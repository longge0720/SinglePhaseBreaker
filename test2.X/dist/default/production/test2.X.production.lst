

HI-TECH Software PIC LITE Macro Assembler V9.82 build 9453 
                                                                                               Thu Aug 06 14:20:18 2020

HI-TECH Software Omniscient Code Generator (Lite mode) build 9453
     1  0000                     opt subtitle "HI-TECH Software Omniscient Code Generator (Lite mode) build 9453"
     2                           
     3                           opt pagewidth 120
     4                           
     5                           	opt lm
     6                           
     7                           	processor	16LF1823
     8                           clrc	macro
     9                           	bcf	3,0
    10  0000                     	endm
    11                           clrz	macro
    12                           	bcf	3,2
    13  0000                     	endm
    14                           setc	macro
    15                           	bsf	3,0
    16  0000                     	endm
    17                           setz	macro
    18                           	bsf	3,2
    19  0000                     	endm
    20                           skipc	macro
    21                           	btfss	3,0
    22  0000                     	endm
    23                           skipz	macro
    24                           	btfss	3,2
    25  0000                     	endm
    26                           skipnc	macro
    27                           	btfsc	3,0
    28  0000                     	endm
    29                           skipnz	macro
    30                           	btfsc	3,2
    31  0000                     	endm
    32  0000                     indf	equ	0
    33  0000                     indf0	equ	0
    34  0001                     indf1	equ	1
    35  0002                     pc	equ	2
    36  0002                     pcl	equ	2
    37  0003                     status	equ	3
    38  0004                     fsr0l	equ	4
    39  0005                     fsr0h	equ	5
    40  0006                     fsr1l	equ	6
    41  0007                     fsr1h	equ	7
    42  0008                     bsr	equ	8
    43  0009                     wreg	equ	9
    44  000B                     intcon	equ	11
    45  0001                     c	equ	1
    46  0000                     z	equ	0
    47  000A                     pclath	equ	10
    48                           # 22 "main.c"
    49                           	psect config,class=CONFIG,delta=2 ;#
    50                           # 22 "main.c"
    51  8007  FF6C               	dw 0xFFFC & 0xFFEF & 0xFFFF & 0xFFFF & 0xFF7F & 0xFFFF & 0xFFFF & 0xFFFF & 0xFFFF & 0xF
                                 FFF ;#
    52                           # 23 "main.c"
    53                           	psect config,class=CONFIG,delta=2 ;#
    54                           # 23 "main.c"
    55  8008  DCFF               	dw 0xFFFF&0xFEFF&0xDFFF&0xFDFF&0xFFFF&0xFFFF ;#
    56                           	FNCALL	_main,_PIC_ConfigClock
    57                           	FNCALL	_main,_PIC_ConfigOptionReg
    58                           	FNCALL	_main,_PIC_ConfigGPIO
    59                           	FNCALL	_main,_PIC_CofnigTimer0
    60                           	FNCALL	_main,_PIC_EnableInterrupt
    61                           	FNCALL	_main,_KeyInit
    62                           	FNCALL	_main,_PowerSwitch_Init
    63                           	FNCALL	_main,_Motor_Init
    64                           	FNCALL	_main,_ADC_Init
    65                           	FNCALL	_main,_internal_E2promInit
    66                           	FNCALL	_main,_Delay_MS
    67                           	FNCALL	_main,_Motor_Stop
    68                           	FNCALL	_main,_WatchDog_Init
    69                           	FNCALL	_main,_Feed_WatchDog
    70                           	FNCALL	_main,_KeyDriver
    71                           	FNCALL	_main,_MainLoop
    72                           	FNCALL	_main,_WatchDog_Reset
    73                           	FNCALL	_main,_Motor_LowPower
    74                           	FNCALL	_main,_PIC_ConfigClock32Khz
    75                           	FNCALL	_MainLoop,_ContrlSignal_Driver
    76                           	FNCALL	_MainLoop,_Motor_Driver
    77                           	FNCALL	_Motor_Driver,_Motor_GetStaus
    78                           	FNCALL	_Motor_Driver,_Uart_SendStr
    79                           	FNCALL	_Motor_Driver,_Delay_MS
    80                           	FNCALL	_Motor_Driver,_Motor_Stop
    81                           	FNCALL	_Motor_Driver,_e2SavePara
    82                           	FNCALL	_ContrlSignal_Driver,_PowerSwitch_Enable
    83                           	FNCALL	_ContrlSignal_Driver,_Delay_MS
    84                           	FNCALL	_ContrlSignal_Driver,_Motor_GetStaus
    85                           	FNCALL	_ContrlSignal_Driver,_Motor_Stop
    86                           	FNCALL	_ContrlSignal_Driver,_Uart_SendStr
    87                           	FNCALL	_ContrlSignal_Driver,_Motor_Counterclockwise
    88                           	FNCALL	_ContrlSignal_Driver,_Motor_Clockwise
    89                           	FNCALL	_Motor_Stop,_Delay_MS
    90                           	FNCALL	_Motor_Stop,_PowerSwitch_Disable
    91                           	FNCALL	_PowerSwitch_Disable,_PowerSwitch_Delay
    92                           	FNCALL	_e2SavePara,_internal_E2Write
    93                           	FNCALL	_PowerSwitch_Enable,_PowerSwitch_Delay
    94                           	FNCALL	_KeyDriver,_KeyAction
    95                           	FNCALL	_internal_E2promInit,_internal_E2Read
    96                           	FNCALL	_internal_E2promInit,_internal_E2Write
    97                           	FNCALL	_ADC_Init,_ADC_AllPin_Init
    98                           	FNROOT	_main
    99                           	FNCALL	_ISR_Manger,_InterruptTimer0
   100                           	FNCALL	_InterruptTimer0,_KeyScan
   101                           	FNCALL	_InterruptTimer0,_Contrl_Signal
   102                           	FNCALL	_InterruptTimer0,_Motor_RunTimeCount
   103                           	FNCALL	_InterruptTimer0,_Delay_Scan
   104                           	FNCALL	_Contrl_Signal,_Get_ADCValue
   105                           	FNCALL	intlevel1,_ISR_Manger
   106                           	global	intlevel1
   107                           	FNROOT	intlevel1
   108                           	global	KeyDriver@backup
   109                           	global	KeyScan@KeyBuf
   110                           	global	_KeySta
   111                           psect	idataBANK0,class=CODE,space=0,delta=2
   112                           global __pidataBANK0
   113  0700                     __pidataBANK0:
   114                           	file	"keyboard.c"
   115                           	line	18
   116                           
   117                           ;initializer for KeyDriver@backup
   118  0700  3401               	retlw	01h
   119                           	line	37
   120                           
   121                           ;initializer for KeyScan@KeyBuf
   122  0701  34FF               	retlw	0FFh
   123                           	line	3
   124                           
   125                           ;initializer for _KeySta
   126  0702  3401               	retlw	01h
   127                           	global	InterruptTimer0@cnt
   128                           	global	_average
   129                           	global	Contrl_Signal@period
   130                           	global	Contrl_Signal@signal_cnt
   131                           	global	_Motor_RunTime
   132                           	global	_PowerSwitch_Cnt
   133                           	global	_delay_time
   134                           	global	_gPhaseVoltage_CH1
   135                           	global	_gPhaseVoltage_CH2
   136                           	global	_numOf120ms
   137                           	global	Contrl_Signal@ctrBuf
   138                           	global	_AutoOrManualMode
   139                           	global	_Ctr_Signal
   140                           	global	_Ctr_SignalBck
   141                           	global	_Motor_RunSta
   142                           	global	_PowerSwitch_EnableCnt
   143                           	global	_RunMode_t
   144                           	global	_System_Sta
   145                           	global	_System_StaBck
   146                           	global	_flag_uart
   147                           	global	_isLowPower
   148                           	global	_gE2promState
   149                           	global	_INTCON
   150  000B                     _INTCON	set	11
   151                           	global	_PORTA
   152  000C                     _PORTA	set	12
   153                           	global	_PORTC
   154  000E                     _PORTC	set	14
   155                           	global	_TMR0
   156  0015                     _TMR0	set	21
   157                           	global	_CARRY
   158  0018                     _CARRY	set	24
   159                           	global	_GIE
   160  005F                     _GIE	set	95
   161                           	global	_RA2
   162  0062                     _RA2	set	98
   163                           	global	_RA4
   164  0064                     _RA4	set	100
   165                           	global	_RA5
   166  0065                     _RA5	set	101
   167                           	global	_RC1
   168  0071                     _RC1	set	113
   169                           	global	_RC2
   170  0072                     _RC2	set	114
   171                           	global	_RC5
   172  0075                     _RC5	set	117
   173                           	global	_ADCON0
   174  009D                     _ADCON0	set	157
   175                           	global	_ADCON1
   176  009E                     _ADCON1	set	158
   177                           	global	_ADRESH
   178  009C                     _ADRESH	set	156
   179                           	global	_ADRESL
   180  009B                     _ADRESL	set	155
   181                           	global	_OPTION_REG
   182  0095                     _OPTION_REG	set	149
   183                           	global	_OSCCON
   184  0099                     _OSCCON	set	153
   185                           	global	_PIE1
   186  0091                     _PIE1	set	145
   187                           	global	_TRISA
   188  008C                     _TRISA	set	140
   189                           	global	_TRISC
   190  008E                     _TRISC	set	142
   191                           	global	_WDTCON
   192  0097                     _WDTCON	set	151
   193                           	global	_SPLLEN
   194  04CF                     _SPLLEN	set	1231
   195                           	global	_APFCON
   196  011D                     _APFCON	set	285
   197                           	global	_EEADR
   198  0191                     _EEADR	set	401
   199                           	global	_ANSELA
   200  018C                     _ANSELA	set	396
   201                           	global	_ANSELC
   202  018E                     _ANSELC	set	398
   203                           	global	_BAUDCON
   204  019F                     _BAUDCON	set	415
   205                           	global	_EEADRL
   206  0191                     _EEADRL	set	401
   207                           	global	_EECON1
   208  0195                     _EECON1	set	405
   209                           	global	_EECON2
   210  0196                     _EECON2	set	406
   211                           	global	_EEDATA
   212  0193                     _EEDATA	set	403
   213                           	global	_EEDATL
   214  0193                     _EEDATL	set	403
   215                           	global	_RCSTA
   216  019D                     _RCSTA	set	413
   217                           	global	_SPBRGH
   218  019C                     _SPBRGH	set	412
   219                           	global	_SPBRGL
   220  019B                     _SPBRGL	set	411
   221                           	global	_TXREG
   222  019A                     _TXREG	set	410
   223                           	global	_TXSTA
   224  019E                     _TXSTA	set	414
   225                           	global	_CFGS
   226  0CAE                     _CFGS	set	3246
   227                           	global	_EEPGD
   228  0CAF                     _EEPGD	set	3247
   229                           	global	_RD
   230  0CA8                     _RD	set	3240
   231                           	global	_WR
   232  0CA9                     _WR	set	3241
   233                           	global	_WREN
   234  0CAA                     _WREN	set	3242
   235                           	global	_WPUA
   236  020C                     _WPUA	set	524
   237                           	global	_WPUC
   238  020E                     _WPUC	set	526
   239                           psect	strings,class=STRING,delta=2
   240                           global __pstrings
   241  0300                     __pstrings:
   242                           	global    __stringtab
   243  0300                     __stringtab:
   244  0300  3400               	retlw	0
   245                           psect	strings
   246                           	
   247  0301                     STR_6:	
   248  0301  344D               	retlw	77	;'M'
   249  0302  3420               	retlw	32	;' '
   250  0303  3461               	retlw	97	;'a'
   251  0304  3475               	retlw	117	;'u'
   252  0305  3474               	retlw	116	;'t'
   253  0306  346F               	retlw	111	;'o'
   254  0307  3420               	retlw	32	;' '
   255  0308  3463               	retlw	99	;'c'
   256  0309  346C               	retlw	108	;'l'
   257  030A  346F               	retlw	111	;'o'
   258  030B  3473               	retlw	115	;'s'
   259  030C  3465               	retlw	101	;'e'
   260  030D  3420               	retlw	32	;' '
   261  030E  3474               	retlw	116	;'t'
   262  030F  3469               	retlw	105	;'i'
   263  0310  346D               	retlw	109	;'m'
   264  0311  3465               	retlw	101	;'e'
   265  0312  346F               	retlw	111	;'o'
   266  0313  3475               	retlw	117	;'u'
   267  0314  3474               	retlw	116	;'t'
   268  0315  340D               	retlw	13
   269  0316  340A               	retlw	10
   270  0317  3400               	retlw	0
   271                           psect	strings
   272                           	
   273  0318                     STR_8:	
   274  0318  344D               	retlw	77	;'M'
   275  0319  3420               	retlw	32	;' '
   276  031A  346D               	retlw	109	;'m'
   277  031B  3461               	retlw	97	;'a'
   278  031C  346E               	retlw	110	;'n'
   279  031D  3420               	retlw	32	;' '
   280  031E  3463               	retlw	99	;'c'
   281  031F  346C               	retlw	108	;'l'
   282  0320  346F               	retlw	111	;'o'
   283  0321  3473               	retlw	115	;'s'
   284  0322  3465               	retlw	101	;'e'
   285  0323  3420               	retlw	32	;' '
   286  0324  3474               	retlw	116	;'t'
   287  0325  3469               	retlw	105	;'i'
   288  0326  346D               	retlw	109	;'m'
   289  0327  3465               	retlw	101	;'e'
   290  0328  346F               	retlw	111	;'o'
   291  0329  3475               	retlw	117	;'u'
   292  032A  3474               	retlw	116	;'t'
   293  032B  340D               	retlw	13
   294  032C  340A               	retlw	10
   295  032D  3400               	retlw	0
   296                           psect	strings
   297                           	
   298  032E                     STR_10:	
   299  032E  344D               	retlw	77	;'M'
   300  032F  3420               	retlw	32	;' '
   301  0330  346F               	retlw	111	;'o'
   302  0331  3470               	retlw	112	;'p'
   303  0332  3465               	retlw	101	;'e'
   304  0333  346E               	retlw	110	;'n'
   305  0334  3420               	retlw	32	;' '
   306  0335  3474               	retlw	116	;'t'
   307  0336  3469               	retlw	105	;'i'
   308  0337  346D               	retlw	109	;'m'
   309  0338  3465               	retlw	101	;'e'
   310  0339  346F               	retlw	111	;'o'
   311  033A  3475               	retlw	117	;'u'
   312  033B  3474               	retlw	116	;'t'
   313  033C  340D               	retlw	13
   314  033D  340A               	retlw	10
   315  033E  3400               	retlw	0
   316                           psect	strings
   317                           	
   318  033F                     STR_1:	
   319  033F  3443               	retlw	67	;'C'
   320  0340  3420               	retlw	32	;' '
   321  0341  3461               	retlw	97	;'a'
   322  0342  3475               	retlw	117	;'u'
   323  0343  3474               	retlw	116	;'t'
   324  0344  346F               	retlw	111	;'o'
   325  0345  3420               	retlw	32	;' '
   326  0346  3463               	retlw	99	;'c'
   327  0347  346C               	retlw	108	;'l'
   328  0348  346F               	retlw	111	;'o'
   329  0349  3473               	retlw	115	;'s'
   330  034A  3465               	retlw	101	;'e'
   331  034B  340D               	retlw	13
   332  034C  340A               	retlw	10
   333  034D  3400               	retlw	0
   334                           psect	strings
   335                           	
   336  034E                     STR_5:	
   337  034E  344D               	retlw	77	;'M'
   338  034F  3420               	retlw	32	;' '
   339  0350  3461               	retlw	97	;'a'
   340  0351  3475               	retlw	117	;'u'
   341  0352  3474               	retlw	116	;'t'
   342  0353  346F               	retlw	111	;'o'
   343  0354  3420               	retlw	32	;' '
   344  0355  3463               	retlw	99	;'c'
   345  0356  346C               	retlw	108	;'l'
   346  0357  346F               	retlw	111	;'o'
   347  0358  3473               	retlw	115	;'s'
   348  0359  3465               	retlw	101	;'e'
   349  035A  340D               	retlw	13
   350  035B  340A               	retlw	10
   351  035C  3400               	retlw	0
   352                           psect	strings
   353                           	
   354  035D                     STR_2:	
   355  035D  3443               	retlw	67	;'C'
   356  035E  3420               	retlw	32	;' '
   357  035F  346D               	retlw	109	;'m'
   358  0360  3461               	retlw	97	;'a'
   359  0361  346E               	retlw	110	;'n'
   360  0362  3420               	retlw	32	;' '
   361  0363  3463               	retlw	99	;'c'
   362  0364  346C               	retlw	108	;'l'
   363  0365  346F               	retlw	111	;'o'
   364  0366  3473               	retlw	115	;'s'
   365  0367  3465               	retlw	101	;'e'
   366  0368  340D               	retlw	13
   367  0369  340A               	retlw	10
   368  036A  3400               	retlw	0
   369                           psect	strings
   370                           	
   371  036B                     STR_7:	
   372  036B  344D               	retlw	77	;'M'
   373  036C  3420               	retlw	32	;' '
   374  036D  346D               	retlw	109	;'m'
   375  036E  3461               	retlw	97	;'a'
   376  036F  346E               	retlw	110	;'n'
   377  0370  3420               	retlw	32	;' '
   378  0371  3463               	retlw	99	;'c'
   379  0372  346C               	retlw	108	;'l'
   380  0373  346F               	retlw	111	;'o'
   381  0374  3473               	retlw	115	;'s'
   382  0375  3465               	retlw	101	;'e'
   383  0376  340D               	retlw	13
   384  0377  340A               	retlw	10
   385  0378  3400               	retlw	0
   386                           psect	strings
   387                           	
   388  0379                     STR_3:	
   389  0379  3443               	retlw	67	;'C'
   390  037A  3420               	retlw	32	;' '
   391  037B  346F               	retlw	111	;'o'
   392  037C  3470               	retlw	112	;'p'
   393  037D  3465               	retlw	101	;'e'
   394  037E  346E               	retlw	110	;'n'
   395  037F  340D               	retlw	13
   396  0380  340A               	retlw	10
   397  0381  3400               	retlw	0
   398                           psect	strings
   399                           	
   400  0382                     STR_9:	
   401  0382  344D               	retlw	77	;'M'
   402  0383  3420               	retlw	32	;' '
   403  0384  346F               	retlw	111	;'o'
   404  0385  3470               	retlw	112	;'p'
   405  0386  3465               	retlw	101	;'e'
   406  0387  346E               	retlw	110	;'n'
   407  0388  340D               	retlw	13
   408  0389  340A               	retlw	10
   409  038A  3400               	retlw	0
   410                           psect	strings
   411                           	
   412  038B                     STR_4:	
   413  038B  3443               	retlw	67	;'C'
   414  038C  3420               	retlw	32	;' '
   415  038D  3473               	retlw	115	;'s'
   416  038E  3474               	retlw	116	;'t'
   417  038F  346F               	retlw	111	;'o'
   418  0390  3470               	retlw	112	;'p'
   419  0391  340D               	retlw	13
   420  0392  340A               	retlw	10
   421  0393  3400               	retlw	0
   422                           psect	strings
   423                           	file	"C:\Users\sunxi\AppData\Local\Temp\sbik."
   424                           	line	#
   425                           psect cinit,class=CODE,delta=2
   426                           global start_initialization
   427  0593                     start_initialization:
   428                           
   429                           psect	bssBANK0,class=BANK0,space=1
   430                           global __pbssBANK0
   431  0020                     __pbssBANK0:
   432  0020                     InterruptTimer0@cnt:
   433  0020                            ds      4
   434                           
   435  0024                     _average:
   436  0024                            ds      4
   437                           
   438  0028                     Contrl_Signal@period:
   439  0028                            ds      2
   440                           
   441  002A                     Contrl_Signal@signal_cnt:
   442  002A                            ds      2
   443                           
   444  002C                     _Motor_RunTime:
   445  002C                            ds      2
   446                           
   447  002E                     _PowerSwitch_Cnt:
   448  002E                            ds      2
   449                           
   450  0030                     _delay_time:
   451  0030                            ds      2
   452                           
   453  0032                     _gPhaseVoltage_CH1:
   454  0032                            ds      2
   455                           
   456  0034                     _gPhaseVoltage_CH2:
   457  0034                            ds      2
   458                           
   459  0036                     _numOf120ms:
   460  0036                            ds      2
   461                           
   462  0038                     Contrl_Signal@ctrBuf:
   463  0038                            ds      1
   464                           
   465  0039                     _AutoOrManualMode:
   466  0039                            ds      1
   467                           
   468  003A                     _Ctr_Signal:
   469  003A                            ds      1
   470                           
   471  003B                     _Ctr_SignalBck:
   472  003B                            ds      1
   473                           
   474  003C                     _Motor_RunSta:
   475  003C                            ds      1
   476                           
   477  003D                     _PowerSwitch_EnableCnt:
   478  003D                            ds      1
   479                           
   480  003E                     _RunMode_t:
   481  003E                            ds      1
   482                           
   483  003F                     _System_Sta:
   484  003F                            ds      1
   485                           
   486  0040                     _System_StaBck:
   487  0040                            ds      1
   488                           
   489  0041                     _flag_uart:
   490  0041                            ds      1
   491                           
   492  0042                     _isLowPower:
   493  0042                            ds      1
   494                           
   495  0043                     _gE2promState:
   496  0043                            ds      3
   497                           
   498                           psect	dataBANK0,class=BANK0,space=1
   499                           global __pdataBANK0
   500  0057                     __pdataBANK0:
   501                           	file	"keyboard.c"
   502                           	line	18
   503  0057                     KeyDriver@backup:
   504  0057                            ds      1
   505                           
   506                           psect	dataBANK0
   507                           	file	"keyboard.c"
   508                           	line	37
   509  0058                     KeyScan@KeyBuf:
   510  0058                            ds      1
   511                           
   512                           psect	dataBANK0
   513                           	file	"keyboard.c"
   514                           	line	3
   515  0059                     _KeySta:
   516  0059                            ds      1
   517                           
   518                           psect clrtext,class=CODE,delta=2
   519                           global clear_ram
   520                           ;	Called with FSR0 containing the base address, and
   521                           ;	WREG with the size to clear
   522  06F0                     clear_ram:
   523  06F0  0064               	clrwdt			;clear the watchdog before getting into this loop
   524  06F1                     clrloop:
   525  06F1  0180               	clrf	indf0		;clear RAM location pointed to by FSR
   526  06F2  3101               	addfsr	0,1
   527  06F3  0B89               	decfsz wreg		;Have we reached the end of clearing yet?
   528  06F4  2EF1               	goto clrloop	;have we reached the end yet?
   529  06F5  3400               	retlw	0		;all done for this memory range, return
   530                           ; Clear objects allocated to BANK0
   531                           psect cinit,class=CODE,delta=2
   532                           	global __pbssBANK0
   533  0593  3020               	movlw	low(__pbssBANK0)
   534  0594  0084               	movwf	fsr0l
   535  0595  3000               	movlw	high(__pbssBANK0)
   536  0596  0085               	movwf	fsr0h
   537  0597  3026               	movlw	026h
   538  0598  3186  26F0  3185   	fcall	clear_ram
   539                           ; Initialize objects allocated to BANK0
   540                           	global __pidataBANK0,__pdataBANK0
   541                           psect cinit,class=CODE,delta=2
   542  059B  3187  2700  3185   	fcall	__pidataBANK0+0		;fetch initializer
   543  059E  00D7               	movwf	__pdataBANK0+0&07fh		
   544  059F  3187  2701  3185   	fcall	__pidataBANK0+1		;fetch initializer
   545  05A2  00D8               	movwf	__pdataBANK0+1&07fh		
   546  05A3  3187  2702  3185   	fcall	__pidataBANK0+2		;fetch initializer
   547  05A6  00D9               	movwf	__pdataBANK0+2&07fh		
   548                           psect cinit,class=CODE,delta=2
   549                           global end_of_initialization
   550                           
   551                           ;End of C runtime variable initialization code
   552                           
   553  05A7                     end_of_initialization:
   554  05A7  0020               movlb 0
   555  05A8  281A               ljmp _main	;jump to C main() function
   556                           psect	cstackCOMMON,class=COMMON,space=1
   557                           global __pcstackCOMMON
   558  0070                     __pcstackCOMMON:
   559                           	global	?_PIC_ConfigClock
   560  0070                     ?_PIC_ConfigClock:	; 0 bytes @ 0x0
   561                           	global	?_PIC_ConfigOptionReg
   562  0070                     ?_PIC_ConfigOptionReg:	; 0 bytes @ 0x0
   563                           	global	?_PIC_ConfigGPIO
   564  0070                     ?_PIC_ConfigGPIO:	; 0 bytes @ 0x0
   565                           	global	?_PIC_CofnigTimer0
   566  0070                     ?_PIC_CofnigTimer0:	; 0 bytes @ 0x0
   567                           	global	?_PIC_EnableInterrupt
   568  0070                     ?_PIC_EnableInterrupt:	; 0 bytes @ 0x0
   569                           	global	?_KeyInit
   570  0070                     ?_KeyInit:	; 0 bytes @ 0x0
   571                           	global	?_PowerSwitch_Init
   572  0070                     ?_PowerSwitch_Init:	; 0 bytes @ 0x0
   573                           	global	?_Motor_Init
   574  0070                     ?_Motor_Init:	; 0 bytes @ 0x0
   575                           	global	?_ADC_Init
   576  0070                     ?_ADC_Init:	; 0 bytes @ 0x0
   577                           	global	?_internal_E2promInit
   578  0070                     ?_internal_E2promInit:	; 0 bytes @ 0x0
   579                           	global	?_Motor_Stop
   580  0070                     ?_Motor_Stop:	; 0 bytes @ 0x0
   581                           	global	?_WatchDog_Init
   582  0070                     ?_WatchDog_Init:	; 0 bytes @ 0x0
   583                           	global	?_Feed_WatchDog
   584  0070                     ?_Feed_WatchDog:	; 0 bytes @ 0x0
   585                           	global	?_KeyDriver
   586  0070                     ?_KeyDriver:	; 0 bytes @ 0x0
   587                           	global	?_MainLoop
   588  0070                     ?_MainLoop:	; 0 bytes @ 0x0
   589                           	global	?_WatchDog_Reset
   590  0070                     ?_WatchDog_Reset:	; 0 bytes @ 0x0
   591                           	global	?_Motor_LowPower
   592  0070                     ?_Motor_LowPower:	; 0 bytes @ 0x0
   593                           	global	?_PIC_ConfigClock32Khz
   594  0070                     ?_PIC_ConfigClock32Khz:	; 0 bytes @ 0x0
   595                           	global	?_KeyScan
   596  0070                     ?_KeyScan:	; 0 bytes @ 0x0
   597                           	global	??_KeyScan
   598  0070                     ??_KeyScan:	; 0 bytes @ 0x0
   599                           	global	?_Contrl_Signal
   600  0070                     ?_Contrl_Signal:	; 0 bytes @ 0x0
   601                           	global	?_Motor_RunTimeCount
   602  0070                     ?_Motor_RunTimeCount:	; 0 bytes @ 0x0
   603                           	global	??_Motor_RunTimeCount
   604  0070                     ??_Motor_RunTimeCount:	; 0 bytes @ 0x0
   605                           	global	?_Delay_Scan
   606  0070                     ?_Delay_Scan:	; 0 bytes @ 0x0
   607                           	global	??_Delay_Scan
   608  0070                     ??_Delay_Scan:	; 0 bytes @ 0x0
   609                           	global	?_PowerSwitch_Enable
   610  0070                     ?_PowerSwitch_Enable:	; 0 bytes @ 0x0
   611                           	global	?_Motor_Counterclockwise
   612  0070                     ?_Motor_Counterclockwise:	; 0 bytes @ 0x0
   613                           	global	?_Motor_Clockwise
   614  0070                     ?_Motor_Clockwise:	; 0 bytes @ 0x0
   615                           	global	?_e2SavePara
   616  0070                     ?_e2SavePara:	; 0 bytes @ 0x0
   617                           	global	?_PowerSwitch_Disable
   618  0070                     ?_PowerSwitch_Disable:	; 0 bytes @ 0x0
   619                           	global	?_KeyAction
   620  0070                     ?_KeyAction:	; 0 bytes @ 0x0
   621                           	global	?_InterruptTimer0
   622  0070                     ?_InterruptTimer0:	; 0 bytes @ 0x0
   623                           	global	?_ISR_Manger
   624  0070                     ?_ISR_Manger:	; 0 bytes @ 0x0
   625                           	global	?_Uart_SendStr
   626  0070                     ?_Uart_SendStr:	; 0 bytes @ 0x0
   627                           	global	?_ContrlSignal_Driver
   628  0070                     ?_ContrlSignal_Driver:	; 0 bytes @ 0x0
   629                           	global	?_Motor_Driver
   630  0070                     ?_Motor_Driver:	; 0 bytes @ 0x0
   631                           	global	?_ADC_AllPin_Init
   632  0070                     ?_ADC_AllPin_Init:	; 0 bytes @ 0x0
   633                           	global	?_PowerSwitch_Delay
   634  0070                     ?_PowerSwitch_Delay:	; 0 bytes @ 0x0
   635                           	global	?_Motor_GetStaus
   636  0070                     ?_Motor_GetStaus:	; 1 bytes @ 0x0
   637                           	global	?_Get_ADCValue
   638  0070                     ?_Get_ADCValue:	; 2 bytes @ 0x0
   639                           	global	Uart_SendStr@str
   640  0070                     Uart_SendStr@str:	; 1 bytes @ 0x0
   641  0070                     	ds	2
   642                           	global	??_Get_ADCValue
   643  0072                     ??_Get_ADCValue:	; 0 bytes @ 0x2
   644  0072                     	ds	4
   645                           	global	Get_ADCValue@channel
   646  0076                     Get_ADCValue@channel:	; 1 bytes @ 0x6
   647  0076                     	ds	1
   648                           	global	Get_ADCValue@tem
   649  0077                     Get_ADCValue@tem:	; 2 bytes @ 0x7
   650  0077                     	ds	2
   651                           	global	??_Contrl_Signal
   652  0079                     ??_Contrl_Signal:	; 0 bytes @ 0x9
   653  0079                     	ds	1
   654                           	global	Contrl_Signal@dis_tmp
   655  007A                     Contrl_Signal@dis_tmp:	; 2 bytes @ 0xA
   656  007A                     	ds	2
   657                           	global	??_InterruptTimer0
   658  007C                     ??_InterruptTimer0:	; 0 bytes @ 0xC
   659                           	global	??_ISR_Manger
   660  007C                     ??_ISR_Manger:	; 0 bytes @ 0xC
   661  007C                     	ds	2
   662                           psect	cstackBANK0,class=BANK0,space=1
   663                           global __pcstackBANK0
   664  0046                     __pcstackBANK0:
   665                           	global	??_PIC_ConfigClock
   666  0046                     ??_PIC_ConfigClock:	; 0 bytes @ 0x0
   667                           	global	??_PIC_ConfigOptionReg
   668  0046                     ??_PIC_ConfigOptionReg:	; 0 bytes @ 0x0
   669                           	global	??_PIC_ConfigGPIO
   670  0046                     ??_PIC_ConfigGPIO:	; 0 bytes @ 0x0
   671                           	global	??_PIC_CofnigTimer0
   672  0046                     ??_PIC_CofnigTimer0:	; 0 bytes @ 0x0
   673                           	global	??_PIC_EnableInterrupt
   674  0046                     ??_PIC_EnableInterrupt:	; 0 bytes @ 0x0
   675                           	global	??_KeyInit
   676  0046                     ??_KeyInit:	; 0 bytes @ 0x0
   677                           	global	??_PowerSwitch_Init
   678  0046                     ??_PowerSwitch_Init:	; 0 bytes @ 0x0
   679                           	global	??_Motor_Init
   680  0046                     ??_Motor_Init:	; 0 bytes @ 0x0
   681                           	global	?_Delay_MS
   682  0046                     ?_Delay_MS:	; 0 bytes @ 0x0
   683                           	global	??_WatchDog_Init
   684  0046                     ??_WatchDog_Init:	; 0 bytes @ 0x0
   685                           	global	??_Feed_WatchDog
   686  0046                     ??_Feed_WatchDog:	; 0 bytes @ 0x0
   687                           	global	??_WatchDog_Reset
   688  0046                     ??_WatchDog_Reset:	; 0 bytes @ 0x0
   689                           	global	??_Motor_LowPower
   690  0046                     ??_Motor_LowPower:	; 0 bytes @ 0x0
   691                           	global	??_PIC_ConfigClock32Khz
   692  0046                     ??_PIC_ConfigClock32Khz:	; 0 bytes @ 0x0
   693                           	global	??_Motor_GetStaus
   694  0046                     ??_Motor_GetStaus:	; 0 bytes @ 0x0
   695                           	global	??_Motor_Counterclockwise
   696  0046                     ??_Motor_Counterclockwise:	; 0 bytes @ 0x0
   697                           	global	??_Motor_Clockwise
   698  0046                     ??_Motor_Clockwise:	; 0 bytes @ 0x0
   699                           	global	??_KeyAction
   700  0046                     ??_KeyAction:	; 0 bytes @ 0x0
   701                           	global	?_internal_E2Read
   702  0046                     ?_internal_E2Read:	; 0 bytes @ 0x0
   703                           	global	?_internal_E2Write
   704  0046                     ?_internal_E2Write:	; 0 bytes @ 0x0
   705                           	global	??_Uart_SendStr
   706  0046                     ??_Uart_SendStr:	; 0 bytes @ 0x0
   707                           	global	??_ADC_AllPin_Init
   708  0046                     ??_ADC_AllPin_Init:	; 0 bytes @ 0x0
   709                           	global	??_PowerSwitch_Delay
   710  0046                     ??_PowerSwitch_Delay:	; 0 bytes @ 0x0
   711                           	global	KeyAction@KeyCode
   712  0046                     KeyAction@KeyCode:	; 1 bytes @ 0x0
   713                           	global	internal_E2Read@dat
   714  0046                     internal_E2Read@dat:	; 1 bytes @ 0x0
   715                           	global	internal_E2Write@dat
   716  0046                     internal_E2Write@dat:	; 1 bytes @ 0x0
   717                           	global	Delay_MS@ms
   718  0046                     Delay_MS@ms:	; 2 bytes @ 0x0
   719  0046                     	ds	1
   720                           	global	??_ADC_Init
   721  0047                     ??_ADC_Init:	; 0 bytes @ 0x1
   722                           	global	??_KeyDriver
   723  0047                     ??_KeyDriver:	; 0 bytes @ 0x1
   724                           	global	Motor_Counterclockwise@tem
   725  0047                     Motor_Counterclockwise@tem:	; 1 bytes @ 0x1
   726                           	global	Motor_Clockwise@tem
   727  0047                     Motor_Clockwise@tem:	; 1 bytes @ 0x1
   728                           	global	Motor_LowPower@tem
   729  0047                     Motor_LowPower@tem:	; 1 bytes @ 0x1
   730                           	global	PowerSwitch_Delay@delay
   731  0047                     PowerSwitch_Delay@delay:	; 1 bytes @ 0x1
   732                           	global	internal_E2Read@len
   733  0047                     internal_E2Read@len:	; 1 bytes @ 0x1
   734                           	global	internal_E2Write@len
   735  0047                     internal_E2Write@len:	; 1 bytes @ 0x1
   736  0047                     	ds	1
   737                           	global	??_Delay_MS
   738  0048                     ??_Delay_MS:	; 0 bytes @ 0x2
   739                           	global	??_PowerSwitch_Enable
   740  0048                     ??_PowerSwitch_Enable:	; 0 bytes @ 0x2
   741                           	global	??_PowerSwitch_Disable
   742  0048                     ??_PowerSwitch_Disable:	; 0 bytes @ 0x2
   743                           	global	??_internal_E2Read
   744  0048                     ??_internal_E2Read:	; 0 bytes @ 0x2
   745                           	global	??_internal_E2Write
   746  0048                     ??_internal_E2Write:	; 0 bytes @ 0x2
   747  0048                     	ds	1
   748                           	global	PowerSwitch_Enable@tmp
   749  0049                     PowerSwitch_Enable@tmp:	; 1 bytes @ 0x3
   750                           	global	PowerSwitch_Disable@tmp
   751  0049                     PowerSwitch_Disable@tmp:	; 1 bytes @ 0x3
   752                           	global	internal_E2Read@addr
   753  0049                     internal_E2Read@addr:	; 1 bytes @ 0x3
   754                           	global	internal_E2Write@reg
   755  0049                     internal_E2Write@reg:	; 1 bytes @ 0x3
   756  0049                     	ds	1
   757                           	global	??_Motor_Stop
   758  004A                     ??_Motor_Stop:	; 0 bytes @ 0x4
   759                           	global	internal_E2Write@addr
   760  004A                     internal_E2Write@addr:	; 1 bytes @ 0x4
   761  004A                     	ds	1
   762                           	global	??_internal_E2promInit
   763  004B                     ??_internal_E2promInit:	; 0 bytes @ 0x5
   764                           	global	??_e2SavePara
   765  004B                     ??_e2SavePara:	; 0 bytes @ 0x5
   766                           	global	Motor_Stop@tem
   767  004B                     Motor_Stop@tem:	; 1 bytes @ 0x5
   768  004B                     	ds	1
   769                           	global	??_ContrlSignal_Driver
   770  004C                     ??_ContrlSignal_Driver:	; 0 bytes @ 0x6
   771  004C                     	ds	1
   772                           	global	internal_E2promInit@addr
   773  004D                     internal_E2promInit@addr:	; 1 bytes @ 0x7
   774                           	global	e2SavePara@val
   775  004D                     e2SavePara@val:	; 1 bytes @ 0x7
   776  004D                     	ds	1
   777                           	global	??_Motor_Driver
   778  004E                     ??_Motor_Driver:	; 0 bytes @ 0x8
   779  004E                     	ds	1
   780                           	global	??_MainLoop
   781  004F                     ??_MainLoop:	; 0 bytes @ 0x9
   782                           	global	?_main
   783  004F                     ?_main:	; 2 bytes @ 0x9
   784                           	global	main@argc
   785  004F                     main@argc:	; 2 bytes @ 0x9
   786  004F                     	ds	2
   787                           	global	main@argv
   788  0051                     main@argv:	; 2 bytes @ 0xB
   789  0051                     	ds	2
   790                           	global	??_main
   791  0053                     ??_main:	; 0 bytes @ 0xD
   792  0053                     	ds	1
   793                           	global	main@i
   794  0054                     main@i:	; 2 bytes @ 0xE
   795  0054                     	ds	2
   796                           	global	main@tmpbuf
   797  0056                     main@tmpbuf:	; 1 bytes @ 0x10
   798  0056                     	ds	1
   799 ;;Data sizes: Strings 147, constant 0, data 3, bss 38, persistent 0 stack 0
   800 ;;Auto spaces:   Size  Autos    Used
   801 ;; COMMON          14     14      14
   802 ;; BANK0           80     17      58
   803 ;; BANK1           32      0       0
   804                           
   805 ;;
   806 ;; Pointer list with targets:
   807                           
   808 ;; ?_Get_ADCValue	unsigned int  size(1) Largest target is 0
   809 ;;
   810 ;; Uart_SendStr@str	PTR unsigned char  size(1) Largest target is 23
   811 ;;		 -> STR_10(CODE[17]), STR_9(CODE[9]), STR_8(CODE[22]), STR_7(CODE[14]), 
   812 ;;		 -> STR_6(CODE[23]), STR_5(CODE[15]), STR_4(CODE[9]), STR_3(CODE[9]), 
   813 ;;		 -> STR_2(CODE[14]), STR_1(CODE[15]), 
   814 ;;
   815 ;; internal_E2Write@dat	PTR unsigned char  size(1) Largest target is 3
   816 ;;		 -> gE2promState(BANK0[3]), 
   817 ;;
   818 ;; internal_E2Read@dat	PTR unsigned char  size(1) Largest target is 3
   819 ;;		 -> gE2promState(BANK0[3]), 
   820 ;;
   821                           
   822                           
   823 ;;
   824 ;; Critical Paths under _main in COMMON
   825 ;;
   826 ;;   None.
   827 ;;
   828 ;; Critical Paths under _ISR_Manger in COMMON
   829 ;;
   830 ;;   _InterruptTimer0->_Contrl_Signal
   831 ;;   _Contrl_Signal->_Get_ADCValue
   832 ;;
   833 ;; Critical Paths under _main in BANK0
   834 ;;
   835 ;;   _MainLoop->_Motor_Driver
   836 ;;   _Motor_Driver->_e2SavePara
   837 ;;   _ContrlSignal_Driver->_Motor_Stop
   838 ;;   _Motor_Stop->_PowerSwitch_Disable
   839 ;;   _PowerSwitch_Disable->_PowerSwitch_Delay
   840 ;;   _e2SavePara->_internal_E2Write
   841 ;;   _PowerSwitch_Enable->_PowerSwitch_Delay
   842 ;;   _KeyDriver->_KeyAction
   843 ;;   _internal_E2promInit->_internal_E2Write
   844 ;;   _ADC_Init->_ADC_AllPin_Init
   845 ;;
   846 ;; Critical Paths under _ISR_Manger in BANK0
   847 ;;
   848 ;;   None.
   849 ;;
   850 ;; Critical Paths under _main in BANK1
   851 ;;
   852 ;;   None.
   853 ;;
   854 ;; Critical Paths under _ISR_Manger in BANK1
   855 ;;
   856 ;;   None.
   857                           
   858 ;;
   859 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   860 ;;
   861                           
   862 ;;
   863 ;;Call Graph Tables:
   864 ;;
   865 ;; ---------------------------------------------------------------------------------
   866 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   867 ;; ---------------------------------------------------------------------------------
   868 ;; (0) _main                                                 8     4      4     982
   869 ;;                                              9 BANK0      8     4      4
   870 ;;                    _PIC_ConfigClock
   871 ;;                _PIC_ConfigOptionReg
   872 ;;                     _PIC_ConfigGPIO
   873 ;;                   _PIC_CofnigTimer0
   874 ;;                _PIC_EnableInterrupt
   875 ;;                            _KeyInit
   876 ;;                   _PowerSwitch_Init
   877 ;;                         _Motor_Init
   878 ;;                           _ADC_Init
   879 ;;                _internal_E2promInit
   880 ;;                           _Delay_MS
   881 ;;                         _Motor_Stop
   882 ;;                      _WatchDog_Init
   883 ;;                      _Feed_WatchDog
   884 ;;                          _KeyDriver
   885 ;;                           _MainLoop
   886 ;;                     _WatchDog_Reset
   887 ;;                     _Motor_LowPower
   888 ;;               _PIC_ConfigClock32Khz
   889 ;; ---------------------------------------------------------------------------------
   890 ;; (1) _MainLoop                                             0     0      0     495
   891 ;;                _ContrlSignal_Driver
   892 ;;                       _Motor_Driver
   893 ;; ---------------------------------------------------------------------------------
   894 ;; (2) _Motor_Driver                                         1     1      0     232
   895 ;;                                              8 BANK0      1     1      0
   896 ;;                     _Motor_GetStaus
   897 ;;                       _Uart_SendStr
   898 ;;                           _Delay_MS
   899 ;;                         _Motor_Stop
   900 ;;                         _e2SavePara
   901 ;; ---------------------------------------------------------------------------------
   902 ;; (2) _ContrlSignal_Driver                                  1     1      0     263
   903 ;;                                              6 BANK0      1     1      0
   904 ;;                 _PowerSwitch_Enable
   905 ;;                           _Delay_MS
   906 ;;                     _Motor_GetStaus
   907 ;;                         _Motor_Stop
   908 ;;                       _Uart_SendStr
   909 ;;             _Motor_Counterclockwise
   910 ;;                    _Motor_Clockwise
   911 ;; ---------------------------------------------------------------------------------
   912 ;; (3) _Motor_Stop                                           2     2      0     119
   913 ;;                                              4 BANK0      2     2      0
   914 ;;                           _Delay_MS
   915 ;;                _PowerSwitch_Disable
   916 ;; ---------------------------------------------------------------------------------
   917 ;; (4) _PowerSwitch_Disable                                  2     2      0      72
   918 ;;                                              2 BANK0      2     2      0
   919 ;;                  _PowerSwitch_Delay
   920 ;; ---------------------------------------------------------------------------------
   921 ;; (3) _e2SavePara                                           3     3      0      91
   922 ;;                                              5 BANK0      3     3      0
   923 ;;                   _internal_E2Write
   924 ;; ---------------------------------------------------------------------------------
   925 ;; (3) _PowerSwitch_Enable                                   2     2      0      72
   926 ;;                                              2 BANK0      2     2      0
   927 ;;                  _PowerSwitch_Delay
   928 ;; ---------------------------------------------------------------------------------
   929 ;; (1) _PIC_ConfigClock32Khz                                 1     1      0       0
   930 ;;                                              0 BANK0      1     1      0
   931 ;; ---------------------------------------------------------------------------------
   932 ;; (1) _KeyDriver                                            1     1      0      44
   933 ;;                                              1 BANK0      1     1      0
   934 ;;                          _KeyAction
   935 ;; ---------------------------------------------------------------------------------
   936 ;; (1) _internal_E2promInit                                  3     3      0     138
   937 ;;                                              5 BANK0      3     3      0
   938 ;;                    _internal_E2Read
   939 ;;                   _internal_E2Write
   940 ;; ---------------------------------------------------------------------------------
   941 ;; (1) _ADC_Init                                             1     1      0       0
   942 ;;                                              1 BANK0      1     1      0
   943 ;;                    _ADC_AllPin_Init
   944 ;; ---------------------------------------------------------------------------------
   945 ;; (4) _internal_E2Write                                     5     3      2      69
   946 ;;                                              0 BANK0      5     3      2
   947 ;; ---------------------------------------------------------------------------------
   948 ;; (2) _internal_E2Read                                      4     2      2      68
   949 ;;                                              0 BANK0      4     2      2
   950 ;; ---------------------------------------------------------------------------------
   951 ;; (5) _PowerSwitch_Delay                                    2     2      0      47
   952 ;;                                              0 BANK0      2     2      0
   953 ;; ---------------------------------------------------------------------------------
   954 ;; (2) _ADC_AllPin_Init                                      1     1      0       0
   955 ;;                                              0 BANK0      1     1      0
   956 ;; ---------------------------------------------------------------------------------
   957 ;; (2) _KeyAction                                            1     1      0      44
   958 ;;                                              0 BANK0      1     1      0
   959 ;; ---------------------------------------------------------------------------------
   960 ;; (3) _Motor_Clockwise                                      2     2      0      25
   961 ;;                                              0 BANK0      2     2      0
   962 ;; ---------------------------------------------------------------------------------
   963 ;; (3) _Motor_Counterclockwise                               2     2      0      25
   964 ;;                                              0 BANK0      2     2      0
   965 ;; ---------------------------------------------------------------------------------
   966 ;; (3) _Motor_GetStaus                                       0     0      0       0
   967 ;; ---------------------------------------------------------------------------------
   968 ;; (3) _Uart_SendStr                                         1     1      0       0
   969 ;; ---------------------------------------------------------------------------------
   970 ;; (1) _Motor_LowPower                                       2     2      0      25
   971 ;;                                              0 BANK0      2     2      0
   972 ;; ---------------------------------------------------------------------------------
   973 ;; (1) _WatchDog_Reset                                       0     0      0       0
   974 ;; ---------------------------------------------------------------------------------
   975 ;; (1) _Feed_WatchDog                                        0     0      0       0
   976 ;; ---------------------------------------------------------------------------------
   977 ;; (1) _WatchDog_Init                                        0     0      0       0
   978 ;; ---------------------------------------------------------------------------------
   979 ;; (4) _Delay_MS                                             2     0      2      22
   980 ;;                                              0 BANK0      2     0      2
   981 ;; ---------------------------------------------------------------------------------
   982 ;; (1) _Motor_Init                                           1     1      0       0
   983 ;;                                              0 BANK0      1     1      0
   984 ;; ---------------------------------------------------------------------------------
   985 ;; (1) _PowerSwitch_Init                                     1     1      0       0
   986 ;;                                              0 BANK0      1     1      0
   987 ;; ---------------------------------------------------------------------------------
   988 ;; (1) _KeyInit                                              1     1      0       0
   989 ;;                                              0 BANK0      1     1      0
   990 ;; ---------------------------------------------------------------------------------
   991 ;; (1) _PIC_EnableInterrupt                                  0     0      0       0
   992 ;; ---------------------------------------------------------------------------------
   993 ;; (1) _PIC_CofnigTimer0                                     1     1      0       0
   994 ;;                                              0 BANK0      1     1      0
   995 ;; ---------------------------------------------------------------------------------
   996 ;; (1) _PIC_ConfigGPIO                                       1     1      0       0
   997 ;;                                              0 BANK0      1     1      0
   998 ;; ---------------------------------------------------------------------------------
   999 ;; (1) _PIC_ConfigOptionReg                                  1     1      0       0
  1000 ;;                                              0 BANK0      1     1      0
  1001 ;; ---------------------------------------------------------------------------------
  1002 ;; (1) _PIC_ConfigClock                                      1     1      0       0
  1003 ;;                                              0 BANK0      1     1      0
  1004 ;; ---------------------------------------------------------------------------------
  1005 ;; Estimated maximum stack depth 5
  1006 ;; ---------------------------------------------------------------------------------
  1007 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1008 ;; ---------------------------------------------------------------------------------
  1009 ;; (6) _ISR_Manger                                           2     2      0      47
  1010 ;;                                             12 COMMON     2     2      0
  1011 ;;                    _InterruptTimer0
  1012 ;; ---------------------------------------------------------------------------------
  1013 ;; (7) _InterruptTimer0                                      0     0      0      47
  1014 ;;                            _KeyScan
  1015 ;;                      _Contrl_Signal
  1016 ;;                 _Motor_RunTimeCount
  1017 ;;                         _Delay_Scan
  1018 ;; ---------------------------------------------------------------------------------
  1019 ;; (8) _Contrl_Signal                                        5     5      0      47
  1020 ;;                                              9 COMMON     3     3      0
  1021 ;;                       _Get_ADCValue
  1022 ;; ---------------------------------------------------------------------------------
  1023 ;; (9) _Get_ADCValue                                         9     7      2      46
  1024 ;;                                              0 COMMON     9     7      2
  1025 ;; ---------------------------------------------------------------------------------
  1026 ;; (8) _Delay_Scan                                           0     0      0       0
  1027 ;; ---------------------------------------------------------------------------------
  1028 ;; (8) _Motor_RunTimeCount                                   0     0      0       0
  1029 ;; ---------------------------------------------------------------------------------
  1030 ;; (8) _KeyScan                                              0     0      0       0
  1031 ;; ---------------------------------------------------------------------------------
  1032 ;; Estimated maximum stack depth 9
  1033 ;; ---------------------------------------------------------------------------------
  1034                           
  1035 ;; Call Graph Graphs:
  1036                           
  1037 ;; _main (ROOT)
  1038 ;;   _PIC_ConfigClock
  1039 ;;   _PIC_ConfigOptionReg
  1040 ;;   _PIC_ConfigGPIO
  1041 ;;   _PIC_CofnigTimer0
  1042 ;;   _PIC_EnableInterrupt
  1043 ;;   _KeyInit
  1044 ;;   _PowerSwitch_Init
  1045 ;;   _Motor_Init
  1046 ;;   _ADC_Init
  1047 ;;     _ADC_AllPin_Init
  1048 ;;   _internal_E2promInit
  1049 ;;     _internal_E2Read
  1050 ;;     _internal_E2Write
  1051 ;;   _Delay_MS
  1052 ;;   _Motor_Stop
  1053 ;;     _Delay_MS
  1054 ;;     _PowerSwitch_Disable
  1055 ;;       _PowerSwitch_Delay
  1056 ;;   _WatchDog_Init
  1057 ;;   _Feed_WatchDog
  1058 ;;   _KeyDriver
  1059 ;;     _KeyAction
  1060 ;;   _MainLoop
  1061 ;;     _ContrlSignal_Driver
  1062 ;;       _PowerSwitch_Enable
  1063 ;;         _PowerSwitch_Delay
  1064 ;;       _Delay_MS
  1065 ;;       _Motor_GetStaus
  1066 ;;       _Motor_Stop
  1067 ;;         _Delay_MS
  1068 ;;         _PowerSwitch_Disable
  1069 ;;           _PowerSwitch_Delay
  1070 ;;       _Uart_SendStr
  1071 ;;       _Motor_Counterclockwise
  1072 ;;       _Motor_Clockwise
  1073 ;;     _Motor_Driver
  1074 ;;       _Motor_GetStaus
  1075 ;;       _Uart_SendStr
  1076 ;;       _Delay_MS
  1077 ;;       _Motor_Stop
  1078 ;;         _Delay_MS
  1079 ;;         _PowerSwitch_Disable
  1080 ;;           _PowerSwitch_Delay
  1081 ;;       _e2SavePara
  1082 ;;         _internal_E2Write
  1083 ;;   _WatchDog_Reset
  1084 ;;   _Motor_LowPower
  1085 ;;   _PIC_ConfigClock32Khz
  1086 ;;
  1087 ;; _ISR_Manger (ROOT)
  1088 ;;   _InterruptTimer0
  1089 ;;     _KeyScan
  1090 ;;     _Contrl_Signal
  1091 ;;       _Get_ADCValue
  1092 ;;     _Motor_RunTimeCount
  1093 ;;     _Delay_Scan
  1094 ;;
  1095                           
  1096 ;; Address spaces:
  1097                           
  1098 ;;Name               Size   Autos  Total    Cost      Usage
  1099 ;;BIGRAM              70      0       0       0        0.0%
  1100 ;;EEDATA             100      0       0       0        0.0%
  1101 ;;NULL                 0      0       0       0        0.0%
  1102 ;;CODE                 0      0       0       0        0.0%
  1103 ;;BITCOMMON            E      0       0       1        0.0%
  1104 ;;BITSFR0              0      0       0       1        0.0%
  1105 ;;SFR0                 0      0       0       1        0.0%
  1106 ;;COMMON               E      E       E       2      100.0%
  1107 ;;BITSFR1              0      0       0       2        0.0%
  1108 ;;SFR1                 0      0       0       2        0.0%
  1109 ;;BITSFR2              0      0       0       3        0.0%
  1110 ;;SFR2                 0      0       0       3        0.0%
  1111 ;;STACK                0      0       D       3        0.0%
  1112 ;;BITSFR3              0      0       0       4        0.0%
  1113 ;;SFR3                 0      0       0       4        0.0%
  1114 ;;ABS                  0      0      48       4        0.0%
  1115 ;;BITBANK0            50      0       0       5        0.0%
  1116 ;;BITSFR4              0      0       0       5        0.0%
  1117 ;;SFR4                 0      0       0       5        0.0%
  1118 ;;BANK0               50     11      3A       6       72.5%
  1119 ;;BITSFR5              0      0       0       6        0.0%
  1120 ;;SFR5                 0      0       0       6        0.0%
  1121 ;;BITBANK1            20      0       0       7        0.0%
  1122 ;;BITSFR6              0      0       0       7        0.0%
  1123 ;;SFR6                 0      0       0       7        0.0%
  1124 ;;BANK1               20      0       0       8        0.0%
  1125 ;;BITSFR7              0      0       0       8        0.0%
  1126 ;;SFR7                 0      0       0       8        0.0%
  1127 ;;BITSFR8              0      0       0       9        0.0%
  1128 ;;SFR8                 0      0       0       9        0.0%
  1129 ;;DATA                 0      0      55       9        0.0%
  1130 ;;BITSFR9              0      0       0      10        0.0%
  1131 ;;SFR9                 0      0       0      10        0.0%
  1132 ;;BITSFR10             0      0       0      11        0.0%
  1133 ;;SFR10                0      0       0      11        0.0%
  1134 ;;BITSFR11             0      0       0      12        0.0%
  1135 ;;SFR11                0      0       0      12        0.0%
  1136 ;;BITSFR12             0      0       0      13        0.0%
  1137 ;;SFR12                0      0       0      13        0.0%
  1138 ;;BITSFR13             0      0       0      14        0.0%
  1139 ;;SFR13                0      0       0      14        0.0%
  1140 ;;BITSFR14             0      0       0      15        0.0%
  1141 ;;SFR14                0      0       0      15        0.0%
  1142 ;;BITSFR15             0      0       0      16        0.0%
  1143 ;;SFR15                0      0       0      16        0.0%
  1144 ;;BITSFR16             0      0       0      17        0.0%
  1145 ;;SFR16                0      0       0      17        0.0%
  1146 ;;BITSFR17             0      0       0      18        0.0%
  1147 ;;SFR17                0      0       0      18        0.0%
  1148 ;;BITSFR18             0      0       0      19        0.0%
  1149 ;;SFR18                0      0       0      19        0.0%
  1150 ;;BITSFR19             0      0       0      20        0.0%
  1151 ;;SFR19                0      0       0      20        0.0%
  1152 ;;BITSFR20             0      0       0      21        0.0%
  1153 ;;SFR20                0      0       0      21        0.0%
  1154 ;;BITSFR21             0      0       0      22        0.0%
  1155 ;;SFR21                0      0       0      22        0.0%
  1156 ;;BITSFR22             0      0       0      23        0.0%
  1157 ;;SFR22                0      0       0      23        0.0%
  1158 ;;BITSFR23             0      0       0      24        0.0%
  1159 ;;SFR23                0      0       0      24        0.0%
  1160 ;;BITSFR24             0      0       0      25        0.0%
  1161 ;;SFR24                0      0       0      25        0.0%
  1162 ;;BITSFR25             0      0       0      26        0.0%
  1163 ;;SFR25                0      0       0      26        0.0%
  1164 ;;BITSFR26             0      0       0      27        0.0%
  1165 ;;SFR26                0      0       0      27        0.0%
  1166 ;;BITSFR27             0      0       0      28        0.0%
  1167 ;;SFR27                0      0       0      28        0.0%
  1168 ;;BITSFR28             0      0       0      29        0.0%
  1169 ;;SFR28                0      0       0      29        0.0%
  1170 ;;BITSFR29             0      0       0      30        0.0%
  1171 ;;SFR29                0      0       0      30        0.0%
  1172 ;;BITSFR30             0      0       0      31        0.0%
  1173 ;;SFR30                0      0       0      31        0.0%
  1174 ;;BITSFR31             0      0       0      32        0.0%
  1175 ;;SFR31                0      0       0      32        0.0%
  1176                           
  1177                           	global	_main
  1178                           psect	maintext,global,class=CODE,delta=2
  1179                           global __pmaintext
  1180  001A                     __pmaintext:
  1181                           
  1182 ;; *************** function _main *****************
  1183 ;; Defined at:
  1184 ;;		line 58 in file "main.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  argc            2    9[BANK0 ] int 
  1187 ;;  argv            2   11[BANK0 ] PTR PTR unsigned char 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;  i               2   14[BANK0 ] int 
  1190 ;;  tmpbuf          1   16[BANK0 ] unsigned char 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  2    9[BANK0 ] int 
  1193 ;; Registers used:
  1194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1195 ;; Tracked objects:
  1196 ;;		On entry : 17F/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMMON   BANK0   BANK1
  1200 ;;      Params:         0       4       0
  1201 ;;      Locals:         0       3       0
  1202 ;;      Temps:          0       1       0
  1203 ;;      Totals:         0       8       0
  1204 ;;Total ram usage:        8 bytes
  1205 ;; Hardware stack levels required when called:    9
  1206 ;; This function calls:
  1207 ;;		_PIC_ConfigClock
  1208 ;;		_PIC_ConfigOptionReg
  1209 ;;		_PIC_ConfigGPIO
  1210 ;;		_PIC_CofnigTimer0
  1211 ;;		_PIC_EnableInterrupt
  1212 ;;		_KeyInit
  1213 ;;		_PowerSwitch_Init
  1214 ;;		_Motor_Init
  1215 ;;		_ADC_Init
  1216 ;;		_internal_E2promInit
  1217 ;;		_Delay_MS
  1218 ;;		_Motor_Stop
  1219 ;;		_WatchDog_Init
  1220 ;;		_Feed_WatchDog
  1221 ;;		_KeyDriver
  1222 ;;		_MainLoop
  1223 ;;		_WatchDog_Reset
  1224 ;;		_Motor_LowPower
  1225 ;;		_PIC_ConfigClock32Khz
  1226 ;; This function is called by:
  1227 ;;		Startup code after reset
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           psect	maintext
  1231                           	file	"main.c"
  1232                           	line	58
  1233                           	global	__size_of_main
  1234  00FF                     	__size_of_main	equ	__end_of_main-_main
  1235                           	
  1236  001A                     _main:	
  1237                           	opt	stack 7
  1238                           ; Regs used in _main: [allreg]
  1239                           	line	62
  1240                           	
  1241  001A                     l19527:	
  1242                           ;main.c: 62: uint8_t tmpbuf = 0;
  1243  001A  0020               	movlb 0	; select bank0
  1244  001B  01D6               	clrf	(main@tmpbuf)
  1245                           	line	64
  1246                           	
  1247  001C                     l19529:	
  1248                           ;main.c: 64: PIC_ConfigClock();
  1249  001C  3185  25D4  3180   	fcall	_PIC_ConfigClock
  1250                           	line	66
  1251                           ;main.c: 66: PIC_ConfigOptionReg();
  1252  001F  3185  250B  3180   	fcall	_PIC_ConfigOptionReg
  1253                           	line	67
  1254                           ;main.c: 67: PIC_ConfigGPIO();
  1255  0022  3186  2654  3180   	fcall	_PIC_ConfigGPIO
  1256                           	line	69
  1257                           ;main.c: 69: PIC_CofnigTimer0();
  1258  0025  3186  2643  3180   	fcall	_PIC_CofnigTimer0
  1259                           	line	70
  1260                           	
  1261  0028                     l19531:	
  1262                           ;main.c: 70: PIC_EnableInterrupt();
  1263  0028  3187  2703  3180   	fcall	_PIC_EnableInterrupt
  1264                           	line	71
  1265                           	
  1266  002B                     l19533:	
  1267                           ;main.c: 71: KeyInit();
  1268  002B  3186  26C7  3180   	fcall	_KeyInit
  1269                           	line	72
  1270                           	
  1271  002E                     l19535:	
  1272                           ;main.c: 72: PowerSwitch_Init();
  1273  002E  3186  2632  3180   	fcall	_PowerSwitch_Init
  1274                           	line	73
  1275                           	
  1276  0031                     l19537:	
  1277                           ;main.c: 73: Motor_Init();
  1278  0031  3184  24B2  3180   	fcall	_Motor_Init
  1279                           	line	74
  1280                           	
  1281  0034                     l19539:	
  1282                           ;main.c: 74: ADC_Init();
  1283  0034  3185  25E9  3180   	fcall	_ADC_Init
  1284                           	line	79
  1285                           	
  1286  0037                     l19541:	
  1287                           ;main.c: 79: internal_E2promInit();
  1288  0037  3184  24E0  3180   	fcall	_internal_E2promInit
  1289                           	line	82
  1290                           	
  1291  003A                     l19543:	
  1292                           ;main.c: 82: RC2 = 1;
  1293  003A  0020               	movlb 0	; select bank0
  1294  003B  150E               	bsf	(114/8),(114)&7
  1295                           	line	83
  1296                           	
  1297  003C                     l19545:	
  1298                           ;main.c: 83: RC5 = 1;
  1299  003C  168E               	bsf	(117/8),(117)&7
  1300                           	line	85
  1301                           	
  1302  003D                     l19547:	
  1303                           ;main.c: 85: for(int i=0;i<6;i++)
  1304  003D  01D4               	clrf	(main@i)
  1305  003E  01D5               	clrf	(main@i+1)
  1306                           	
  1307  003F                     l19549:	
  1308  003F  0855               	movf	(main@i+1),w
  1309  0040  3A80               	xorlw	80h
  1310  0041  00FF               	movwf	btemp+1
  1311  0042  3080               	movlw	(high(06h))^80h
  1312  0043  027F               	subwf	btemp+1,w
  1313  0044  1D03               	skipz
  1314  0045  2848               	goto	u3445
  1315  0046  3006               	movlw	low(06h)
  1316  0047  0254               	subwf	(main@i),w
  1317  0048                     u3445:
  1318                           
  1319  0048  1C03               	skipc
  1320  0049  284B               	goto	u3441
  1321  004A  284C               	goto	u3440
  1322  004B                     u3441:
  1323  004B  284E               	goto	l19553
  1324  004C                     u3440:
  1325  004C  2869               	goto	l19559
  1326                           	
  1327  004D                     l19551:	
  1328  004D  2869               	goto	l19559
  1329                           	line	86
  1330                           	
  1331  004E                     l1351:	
  1332                           	line	94
  1333                           	
  1334  004E                     l19553:	
  1335                           ;main.c: 86: {
  1336                           ;main.c: 94: Delay_MS(1250);
  1337  004E  30E2               	movlw	low(04E2h)
  1338  004F  0020               	movlb 0	; select bank0
  1339  0050  00C6               	movwf	(?_Delay_MS)
  1340  0051  3004               	movlw	high(04E2h)
  1341  0052  00C7               	movwf	((?_Delay_MS))+1
  1342  0053  3186  2621  3180   	fcall	_Delay_MS
  1343                           	line	85
  1344                           	
  1345  0056                     l19555:	
  1346  0056  3001               	movlw	low(01h)
  1347  0057  0020               	movlb 0	; select bank0
  1348  0058  07D4               	addwf	(main@i),f
  1349  0059  3000               	movlw	high(01h)
  1350  005A  3DD5               	addwfc	(main@i+1),f
  1351                           	
  1352  005B                     l19557:	
  1353  005B  0855               	movf	(main@i+1),w
  1354  005C  3A80               	xorlw	80h
  1355  005D  00FF               	movwf	btemp+1
  1356  005E  3080               	movlw	(high(06h))^80h
  1357  005F  027F               	subwf	btemp+1,w
  1358  0060  1D03               	skipz
  1359  0061  2864               	goto	u3455
  1360  0062  3006               	movlw	low(06h)
  1361  0063  0254               	subwf	(main@i),w
  1362  0064                     u3455:
  1363                           
  1364  0064  1C03               	skipc
  1365  0065  2867               	goto	u3451
  1366  0066  2868               	goto	u3450
  1367  0067                     u3451:
  1368  0067  284E               	goto	l19553
  1369  0068                     u3450:
  1370  0068  2869               	goto	l19559
  1371                           	
  1372  0069                     l1352:	
  1373                           	line	97
  1374                           	
  1375  0069                     l19559:	
  1376                           ;main.c: 95: }
  1377                           ;main.c: 97: if(Ctr_Signal == Ctrl_SignalValid)
  1378  0069  0020               	movlb 0	; select bank0
  1379  006A  083A               	movf	(_Ctr_Signal),w
  1380  006B  3A01               	xorlw	01h&0ffh
  1381  006C  1D03               	skipz
  1382  006D  286F               	goto	u3461
  1383  006E  2870               	goto	u3460
  1384  006F                     u3461:
  1385  006F  2884               	goto	l19567
  1386  0070                     u3460:
  1387                           	line	100
  1388                           	
  1389  0070                     l19561:	
  1390                           ;main.c: 98: {
  1391                           ;main.c: 100: if((gE2promState.systemState ==eE2State_AutoOpen ) || (gE2promState.system
                                 State ==eE2State_AutoOpen ))
  1392  0070  0844               	movf	0+(_gE2promState)+01h,w
  1393  0071  3A01               	xorlw	01h&0ffh
  1394  0072  1903               	skipnz
  1395  0073  2875               	goto	u3471
  1396  0074  2876               	goto	u3470
  1397  0075                     u3471:
  1398  0075  287C               	goto	l1356
  1399  0076                     u3470:
  1400                           	
  1401  0076                     l19563:	
  1402  0076  0844               	movf	0+(_gE2promState)+01h,w
  1403  0077  3A01               	xorlw	01h&0ffh
  1404  0078  1D03               	skipz
  1405  0079  287B               	goto	u3481
  1406  007A  287C               	goto	u3480
  1407  007B                     u3481:
  1408  007B  287E               	goto	l19565
  1409  007C                     u3480:
  1410                           	
  1411  007C                     l1356:	
  1412                           	line	102
  1413                           ;main.c: 101: {
  1414                           ;main.c: 102: Ctr_SignalBck = Ctrl_SignalInvalid;
  1415  007C  01BB               	clrf	(_Ctr_SignalBck)
  1416                           	line	103
  1417                           ;main.c: 103: }
  1418  007D  2888               	goto	l19569
  1419                           	line	104
  1420                           	
  1421  007E                     l1354:	
  1422                           	line	106
  1423                           	
  1424  007E                     l19565:	
  1425                           ;main.c: 104: else
  1426                           ;main.c: 106: Ctr_SignalBck = Ctr_Signal;
  1427  007E  083A               	movf	(_Ctr_Signal),w
  1428  007F  00D3               	movwf	(??_main+0)+0
  1429  0080  0853               	movf	(??_main+0)+0,w
  1430  0081  00BB               	movwf	(_Ctr_SignalBck)
  1431  0082  2888               	goto	l19569
  1432                           	
  1433  0083                     l1357:	
  1434                           	line	108
  1435                           ;main.c: 108: }
  1436  0083  2888               	goto	l19569
  1437                           	line	109
  1438                           	
  1439  0084                     l1353:	
  1440                           	line	111
  1441                           	
  1442  0084                     l19567:	
  1443                           ;main.c: 109: else
  1444                           ;main.c: 110: {
  1445                           ;main.c: 111: Ctr_SignalBck = Ctrl_SignalValid;
  1446  0084  01BB               	clrf	(_Ctr_SignalBck)
  1447  0085  1403               	bsf	status,0
  1448  0086  0DBB               	rlf	(_Ctr_SignalBck),f
  1449  0087  2888               	goto	l19569
  1450                           	line	113
  1451                           	
  1452  0088                     l1358:	
  1453                           	line	114
  1454                           	
  1455  0088                     l19569:	
  1456                           ;main.c: 113: }
  1457                           ;main.c: 114: Motor_Stop();
  1458  0088  3185  25A9  3180   	fcall	_Motor_Stop
  1459                           	line	116
  1460                           	
  1461  008B                     l19571:	
  1462                           ;main.c: 116: WatchDog_Init();
  1463  008B  3186  26FC  3180   	fcall	_WatchDog_Init
  1464                           	line	117
  1465                           	
  1466  008E                     l19573:	
  1467                           ;main.c: 117: isLowPower = NormalMode;
  1468  008E  0020               	movlb 0	; select bank0
  1469  008F  01C2               	clrf	(_isLowPower)
  1470                           	line	118
  1471                           	
  1472  0090                     l19575:	
  1473                           ;main.c: 118: numOf120ms = 0;
  1474  0090  01B6               	clrf	(_numOf120ms)
  1475  0091  01B7               	clrf	(_numOf120ms+1)
  1476  0092  2893               	goto	l19577
  1477                           	line	120
  1478                           ;main.c: 120: while(1)
  1479                           	
  1480  0093                     l1359:	
  1481                           	line	122
  1482                           	
  1483  0093                     l19577:	
  1484                           ;main.c: 121: {
  1485                           ;main.c: 122: if(isLowPower == NormalMode)
  1486  0093  0020               	movlb 0	; select bank0
  1487  0094  08C2               	movf	(_isLowPower),f
  1488  0095  1D03               	skipz
  1489  0096  2898               	goto	u3491
  1490  0097  2899               	goto	u3490
  1491  0098                     u3491:
  1492  0098  28AC               	goto	l19589
  1493  0099                     u3490:
  1494                           	line	124
  1495                           	
  1496  0099                     l19579:	
  1497                           ;main.c: 123: {
  1498                           ;main.c: 124: Feed_WatchDog();
  1499  0099  3187  2706  3180   	fcall	_Feed_WatchDog
  1500                           	line	125
  1501                           	
  1502  009C                     l19581:	
  1503                           ;main.c: 125: KeyDriver();
  1504  009C  3185  252D  3180   	fcall	_KeyDriver
  1505                           	line	126
  1506                           	
  1507  009F                     l19583:	
  1508                           ;main.c: 126: MainLoop();
  1509  009F  3186  26E9  3180   	fcall	_MainLoop
  1510                           	line	127
  1511                           	
  1512  00A2                     l19585:	
  1513                           ;main.c: 127: if(RA2 == 0)
  1514  00A2  0020               	movlb 0	; select bank0
  1515  00A3  190C               	btfsc	(98/8),(98)&7
  1516  00A4  28A6               	goto	u3501
  1517  00A5  28A7               	goto	u3500
  1518  00A6                     u3501:
  1519  00A6  2893               	goto	l19577
  1520  00A7                     u3500:
  1521                           	line	129
  1522                           	
  1523  00A7                     l19587:	
  1524                           ;main.c: 128: {
  1525                           ;main.c: 129: WatchDog_Reset();
  1526  00A7  3186  26F6  3180   	fcall	_WatchDog_Reset
  1527  00AA  2893               	goto	l19577
  1528                           	line	130
  1529                           	
  1530  00AB                     l1361:	
  1531                           	line	131
  1532                           ;main.c: 130: }
  1533                           ;main.c: 131: }
  1534  00AB  2893               	goto	l19577
  1535                           	line	132
  1536                           	
  1537  00AC                     l1360:	
  1538                           	
  1539  00AC                     l19589:	
  1540                           ;main.c: 132: else if(isLowPower == LowPowerMode)
  1541  00AC  0020               	movlb 0	; select bank0
  1542  00AD  0842               	movf	(_isLowPower),w
  1543  00AE  3A01               	xorlw	01h&0ffh
  1544  00AF  1D03               	skipz
  1545  00B0  28B2               	goto	u3511
  1546  00B1  28B3               	goto	u3510
  1547  00B2                     u3511:
  1548  00B2  2893               	goto	l19577
  1549  00B3                     u3510:
  1550                           	line	134
  1551                           	
  1552  00B3                     l19591:	
  1553                           ;main.c: 133: {
  1554                           ;main.c: 134: INTCON &= ~(0x01 << 7);
  1555  00B3  307F               	movlw	(07Fh)
  1556  00B4  00D3               	movwf	(??_main+0)+0
  1557  00B5  0853               	movf	(??_main+0)+0,w
  1558  00B6  058B               	andwf	(11),f	;volatile
  1559                           	line	135
  1560                           ;main.c: 135: ADCON0 &= ~0x01;
  1561  00B7  30FE               	movlw	(0FEh)
  1562  00B8  00D3               	movwf	(??_main+0)+0
  1563  00B9  0853               	movf	(??_main+0)+0,w
  1564  00BA  0021               	movlb 1	; select bank1
  1565  00BB  059D               	andwf	(157)^080h,f	;volatile
  1566                           	line	136
  1567                           	
  1568  00BC                     l19593:	
  1569                           ;main.c: 136: Motor_LowPower();
  1570  00BC  3186  2665  3180   	fcall	_Motor_LowPower
  1571                           	line	137
  1572                           	
  1573  00BF                     l19595:	
  1574                           ;main.c: 137: PIC_ConfigClock32Khz();
  1575  00BF  3186  2693  3180   	fcall	_PIC_ConfigClock32Khz
  1576                           	line	138
  1577                           	
  1578  00C2                     l19597:	
  1579                           ;main.c: 138: if(Ctr_Signal == Ctrl_SignalValid)
  1580  00C2  0020               	movlb 0	; select bank0
  1581  00C3  083A               	movf	(_Ctr_Signal),w
  1582  00C4  3A01               	xorlw	01h&0ffh
  1583  00C5  1D03               	skipz
  1584  00C6  28C8               	goto	u3521
  1585  00C7  28C9               	goto	u3520
  1586  00C8                     u3521:
  1587  00C8  28CE               	goto	l1364
  1588  00C9                     u3520:
  1589                           	line	140
  1590                           	
  1591  00C9                     l19599:	
  1592                           ;main.c: 139: {
  1593                           ;main.c: 140: tmpbuf = 0xff;
  1594  00C9  30FF               	movlw	(0FFh)
  1595  00CA  00D3               	movwf	(??_main+0)+0
  1596  00CB  0853               	movf	(??_main+0)+0,w
  1597  00CC  00D6               	movwf	(main@tmpbuf)
  1598                           	line	141
  1599                           ;main.c: 141: }
  1600  00CD  28D0               	goto	l1366
  1601                           	line	142
  1602                           	
  1603  00CE                     l1364:	
  1604                           	line	144
  1605                           ;main.c: 142: else
  1606                           ;main.c: 143: {
  1607                           ;main.c: 144: tmpbuf = 0x00;
  1608  00CE  01D6               	clrf	(main@tmpbuf)
  1609  00CF  28D0               	goto	l1366
  1610                           	line	145
  1611                           	
  1612  00D0                     l1365:	
  1613                           	line	146
  1614                           ;main.c: 145: }
  1615                           ;main.c: 146: while(1)
  1616                           	
  1617  00D0                     l1366:	
  1618                           	line	148
  1619                           ;main.c: 147: {
  1620                           ;main.c: 148: if(RC1 == 0)
  1621  00D0  0020               	movlb 0	; select bank0
  1622  00D1  188E               	btfsc	(113/8),(113)&7
  1623  00D2  28D4               	goto	u3531
  1624  00D3  28D5               	goto	u3530
  1625  00D4                     u3531:
  1626  00D4  28DB               	goto	l1367
  1627  00D5                     u3530:
  1628                           	line	150
  1629                           	
  1630  00D5                     l19601:	
  1631                           ;main.c: 149: {
  1632                           ;main.c: 150: tmpbuf = (tmpbuf << 1) | 0;
  1633  00D5  0856               	movf	(main@tmpbuf),w
  1634  00D6  0709               	addwf	wreg,w
  1635  00D7  00D3               	movwf	(??_main+0)+0
  1636  00D8  0853               	movf	(??_main+0)+0,w
  1637  00D9  00D6               	movwf	(main@tmpbuf)
  1638                           	line	151
  1639                           ;main.c: 151: }
  1640  00DA  28E3               	goto	l19605
  1641                           	line	152
  1642                           	
  1643  00DB                     l1367:	
  1644                           ;main.c: 152: else if(RC1 == 1)
  1645  00DB  1C8E               	btfss	(113/8),(113)&7
  1646  00DC  28DE               	goto	u3541
  1647  00DD  28DF               	goto	u3540
  1648  00DE                     u3541:
  1649  00DE  28E3               	goto	l19605
  1650  00DF                     u3540:
  1651                           	line	154
  1652                           	
  1653  00DF                     l19603:	
  1654                           ;main.c: 153: {
  1655                           ;main.c: 154: tmpbuf = (tmpbuf << 1) | 1;
  1656  00DF  1403               	setc
  1657  00E0  0DD6               	rlf	(main@tmpbuf),f
  1658  00E1  28E3               	goto	l19605
  1659                           	line	155
  1660                           	
  1661  00E2                     l1369:	
  1662  00E2  28E3               	goto	l19605
  1663                           	line	156
  1664                           	
  1665  00E3                     l1368:	
  1666                           	
  1667  00E3                     l19605:	
  1668                           ;main.c: 155: }
  1669                           ;main.c: 156: if((tmpbuf==0xff) && Ctr_Signal == Ctrl_SignalInvalid)
  1670  00E3  0856               	movf	(main@tmpbuf),w
  1671  00E4  3AFF               	xorlw	0FFh&0ffh
  1672  00E5  1D03               	skipz
  1673  00E6  28E8               	goto	u3551
  1674  00E7  28E9               	goto	u3550
  1675  00E8                     u3551:
  1676  00E8  28F0               	goto	l19611
  1677  00E9                     u3550:
  1678                           	
  1679  00E9                     l19607:	
  1680  00E9  08BA               	movf	(_Ctr_Signal),f
  1681  00EA  1D03               	skipz
  1682  00EB  28ED               	goto	u3561
  1683  00EC  28EE               	goto	u3560
  1684  00ED                     u3561:
  1685  00ED  28F0               	goto	l19611
  1686  00EE                     u3560:
  1687  00EE  2909               	goto	l1371
  1688                           	line	158
  1689                           	
  1690  00EF                     l19609:	
  1691                           ;main.c: 157: {
  1692                           ;main.c: 158: break;
  1693  00EF  2909               	goto	l1371
  1694                           	line	159
  1695                           	
  1696  00F0                     l1370:	
  1697                           	line	161
  1698                           	
  1699  00F0                     l19611:	
  1700                           ;main.c: 159: }
  1701                           ;main.c: 161: if((tmpbuf==0x00) && Ctr_Signal == Ctrl_SignalValid)
  1702  00F0  08D6               	movf	(main@tmpbuf),f
  1703  00F1  1D03               	skipz
  1704  00F2  28F4               	goto	u3571
  1705  00F3  28F5               	goto	u3570
  1706  00F4                     u3571:
  1707  00F4  28FD               	goto	l1372
  1708  00F5                     u3570:
  1709                           	
  1710  00F5                     l19613:	
  1711  00F5  083A               	movf	(_Ctr_Signal),w
  1712  00F6  3A01               	xorlw	01h&0ffh
  1713  00F7  1D03               	skipz
  1714  00F8  28FA               	goto	u3581
  1715  00F9  28FB               	goto	u3580
  1716  00FA                     u3581:
  1717  00FA  28FD               	goto	l1372
  1718  00FB                     u3580:
  1719  00FB  2909               	goto	l1371
  1720                           	line	163
  1721                           	
  1722  00FC                     l19615:	
  1723                           ;main.c: 162: {
  1724                           ;main.c: 163: break;
  1725  00FC  2909               	goto	l1371
  1726                           	line	164
  1727                           	
  1728  00FD                     l1372:	
  1729                           	line	165
  1730                           ;main.c: 164: }
  1731                           ;main.c: 165: if(RA2 == 0)
  1732  00FD  190C               	btfsc	(98/8),(98)&7
  1733  00FE  2900               	goto	u3591
  1734  00FF  2901               	goto	u3590
  1735  0100                     u3591:
  1736  0100  2904               	goto	l1373
  1737  0101                     u3590:
  1738                           	line	167
  1739                           	
  1740  0101                     l19617:	
  1741                           ;main.c: 166: {
  1742                           ;main.c: 167: WatchDog_Reset();
  1743  0101  3186  26F6  3180   	fcall	_WatchDog_Reset
  1744                           	line	168
  1745                           	
  1746  0104                     l1373:	
  1747                           	line	169
  1748                           ;main.c: 168: }
  1749                           ;main.c: 169: Feed_WatchDog();
  1750  0104  3187  2706  3180   	fcall	_Feed_WatchDog
  1751  0107  28D0               	goto	l1366
  1752                           	line	170
  1753                           	
  1754  0108                     l1374:	
  1755                           	line	146
  1756  0108  28D0               	goto	l1366
  1757                           	
  1758  0109                     l1371:	
  1759                           	line	171
  1760                           ;main.c: 170: }
  1761                           ;main.c: 171: isLowPower = NormalMode;
  1762  0109  01C2               	clrf	(_isLowPower)
  1763                           	line	172
  1764                           	
  1765  010A                     l19619:	
  1766                           ;main.c: 172: numOf120ms = 0;
  1767  010A  01B6               	clrf	(_numOf120ms)
  1768  010B  01B7               	clrf	(_numOf120ms+1)
  1769                           	line	173
  1770                           	
  1771  010C                     l19621:	
  1772                           ;main.c: 173: PIC_ConfigClock();
  1773  010C  3185  25D4  3180   	fcall	_PIC_ConfigClock
  1774                           	line	174
  1775                           	
  1776  010F                     l19623:	
  1777                           ;main.c: 174: ADCON0 |= 0x01;
  1778  010F  0021               	movlb 1	; select bank1
  1779  0110  141D               	bsf	(157)^080h+(0/8),(0)&7	;volatile
  1780                           	line	175
  1781                           	
  1782  0111                     l19625:	
  1783                           ;main.c: 175: PIC_EnableInterrupt();
  1784  0111  3187  2703  3180   	fcall	_PIC_EnableInterrupt
  1785  0114  2893               	goto	l19577
  1786                           	line	176
  1787                           	
  1788  0115                     l1363:	
  1789  0115  2893               	goto	l19577
  1790                           	line	177
  1791                           	
  1792  0116                     l1362:	
  1793  0116  2893               	goto	l19577
  1794                           	
  1795  0117                     l1375:	
  1796                           	line	120
  1797  0117  2893               	goto	l19577
  1798                           	
  1799  0118                     l1376:	
  1800                           	line	179
  1801                           ;main.c: 176: }
  1802                           ;main.c: 177: }
  1803                           ;main.c: 178: return (0);
  1804                           ;	Return value of _main is never used
  1805                           	
  1806  0118                     l1377:	
  1807                           	global	start
  1808  0118  2818               	ljmp	start
  1809                           	opt stack 0
  1810                           GLOBAL	__end_of_main
  1811  0119                     	__end_of_main:
  1812 ;; =============== function _main ends ============
  1813                           
  1814                           	signat	_main,8314
  1815                           	global	_MainLoop
  1816                           psect	text948,local,class=CODE,delta=2
  1817                           global __ptext948
  1818  06E9                     __ptext948:
  1819                           
  1820 ;; *************** function _MainLoop *****************
  1821 ;; Defined at:
  1822 ;;		line 153 in file "logic_control.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;		None               void
  1829 ;; Registers used:
  1830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMMON   BANK0   BANK1
  1836 ;;      Params:         0       0       0
  1837 ;;      Locals:         0       0       0
  1838 ;;      Temps:          0       0       0
  1839 ;;      Totals:         0       0       0
  1840 ;;Total ram usage:        0 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    8
  1843 ;; This function calls:
  1844 ;;		_ContrlSignal_Driver
  1845 ;;		_Motor_Driver
  1846 ;; This function is called by:
  1847 ;;		_main
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           psect	text948
  1851                           	file	"logic_control.c"
  1852                           	line	153
  1853                           	global	__size_of_MainLoop
  1854  0007                     	__size_of_MainLoop	equ	__end_of_MainLoop-_MainLoop
  1855                           	
  1856  06E9                     _MainLoop:	
  1857                           	opt	stack 7
  1858                           ; Regs used in _MainLoop: [wreg-status,0+pclath+cstack]
  1859                           	line	154
  1860                           	
  1861  06E9                     l19523:	
  1862                           ;logic_control.c: 154: ContrlSignal_Driver();
  1863  06E9  3181  21EB  3186   	fcall	_ContrlSignal_Driver
  1864                           	line	155
  1865                           	
  1866  06EC                     l19525:	
  1867                           ;logic_control.c: 155: Motor_Driver();
  1868  06EC  3181  2119  3186   	fcall	_Motor_Driver
  1869                           	line	156
  1870                           	
  1871  06EF                     l5386:	
  1872  06EF  0008               	return
  1873                           	opt stack 0
  1874                           GLOBAL	__end_of_MainLoop
  1875  06F0                     	__end_of_MainLoop:
  1876 ;; =============== function _MainLoop ends ============
  1877                           
  1878                           	signat	_MainLoop,88
  1879                           	global	_Motor_Driver
  1880                           psect	text949,local,class=CODE,delta=2
  1881                           global __ptext949
  1882  0119                     __ptext949:
  1883                           
  1884 ;; *************** function _Motor_Driver *****************
  1885 ;; Defined at:
  1886 ;;		line 90 in file "logic_control.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;		None               void
  1893 ;; Registers used:
  1894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMMON   BANK0   BANK1
  1900 ;;      Params:         0       0       0
  1901 ;;      Locals:         0       0       0
  1902 ;;      Temps:          0       1       0
  1903 ;;      Totals:         0       1       0
  1904 ;;Total ram usage:        1 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    7
  1907 ;; This function calls:
  1908 ;;		_Motor_GetStaus
  1909 ;;		_Uart_SendStr
  1910 ;;		_Delay_MS
  1911 ;;		_Motor_Stop
  1912 ;;		_e2SavePara
  1913 ;; This function is called by:
  1914 ;;		_MainLoop
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           psect	text949
  1918                           	file	"logic_control.c"
  1919                           	line	90
  1920                           	global	__size_of_Motor_Driver
  1921  00D2                     	__size_of_Motor_Driver	equ	__end_of_Motor_Driver-_Motor_Driver
  1922                           	
  1923  0119                     _Motor_Driver:	
  1924                           	opt	stack 7
  1925                           ; Regs used in _Motor_Driver: [wreg-status,0+pclath+cstack]
  1926                           	line	91
  1927                           	
  1928  0119                     l19455:	
  1929                           ;logic_control.c: 91: System_Sta = Motor_GetStaus();
  1930  0119  3186  26DE  3181   	fcall	_Motor_GetStaus
  1931  011C  0020               	movlb 0	; select bank0
  1932  011D  00CE               	movwf	(??_Motor_Driver+0)+0
  1933  011E  084E               	movf	(??_Motor_Driver+0)+0,w
  1934  011F  00BF               	movwf	(_System_Sta)
  1935                           	line	93
  1936                           ;logic_control.c: 93: switch(Motor_RunSta)
  1937  0120  29DE               	goto	l19521
  1938                           	line	95
  1939                           ;logic_control.c: 94: {
  1940                           ;logic_control.c: 95: case Motor_AutoClosing:
  1941                           	
  1942  0121                     l5369:	
  1943                           	line	96
  1944                           	
  1945  0121                     l19457:	
  1946                           ;logic_control.c: 96: if((System_Sta == System_Closed)&&(Motor_RunTime < 6000))
  1947  0121  083F               	movf	(_System_Sta),w
  1948  0122  3A01               	xorlw	01h&0ffh
  1949  0123  1D03               	skipz
  1950  0124  2926               	goto	u3351
  1951  0125  2927               	goto	u3350
  1952  0126                     u3351:
  1953  0126  2948               	goto	l19471
  1954  0127                     u3350:
  1955                           	
  1956  0127                     l19459:	
  1957  0127  3017               	movlw	high(01770h)
  1958  0128  022D               	subwf	(_Motor_RunTime+1),w
  1959  0129  3070               	movlw	low(01770h)
  1960  012A  1903               	skipnz
  1961  012B  022C               	subwf	(_Motor_RunTime),w
  1962  012C  1803               	skipnc
  1963  012D  292F               	goto	u3361
  1964  012E  2930               	goto	u3360
  1965  012F                     u3361:
  1966  012F  2948               	goto	l19471
  1967  0130                     u3360:
  1968                           	line	98
  1969                           	
  1970  0130                     l19461:	
  1971                           ;logic_control.c: 97: {
  1972                           ;logic_control.c: 98: Uart_SendStr((uint8_t*)"M auto close\r\n");
  1973  0130  304E               	movlw	(STR_5|8000h)&0ffh
  1974  0131  3187  2708  3181   	fcall	_Uart_SendStr
  1975                           	line	99
  1976                           	
  1977  0134                     l19463:	
  1978                           ;logic_control.c: 99: Motor_RunSta = Motor_Stoped;
  1979  0134  3004               	movlw	(04h)
  1980  0135  0020               	movlb 0	; select bank0
  1981  0136  00CE               	movwf	(??_Motor_Driver+0)+0
  1982  0137  084E               	movf	(??_Motor_Driver+0)+0,w
  1983  0138  00BC               	movwf	(_Motor_RunSta)
  1984                           	line	100
  1985                           	
  1986  0139                     l19465:	
  1987                           ;logic_control.c: 100: Delay_MS(75);
  1988  0139  304B               	movlw	low(04Bh)
  1989  013A  00C6               	movwf	(?_Delay_MS)
  1990  013B  3000               	movlw	high(04Bh)
  1991  013C  00C7               	movwf	((?_Delay_MS))+1
  1992  013D  3186  2621  3181   	fcall	_Delay_MS
  1993                           	line	101
  1994                           	
  1995  0140                     l19467:	
  1996                           ;logic_control.c: 101: Motor_Stop();
  1997  0140  3185  25A9  3181   	fcall	_Motor_Stop
  1998                           	line	102
  1999                           	
  2000  0143                     l19469:	
  2001                           ;logic_control.c: 102: e2SavePara(eE2State_AutoClose);
  2002  0143  3002               	movlw	(02h)
  2003  0144  3185  25FD  3181   	fcall	_e2SavePara
  2004                           	line	104
  2005                           ;logic_control.c: 104: }
  2006  0147  29EA               	goto	l5383
  2007                           	line	105
  2008                           	
  2009  0148                     l5370:	
  2010                           	
  2011  0148                     l19471:	
  2012                           ;logic_control.c: 105: else if(Motor_RunTime >= 6000)
  2013  0148  3017               	movlw	high(01770h)
  2014  0149  0020               	movlb 0	; select bank0
  2015  014A  022D               	subwf	(_Motor_RunTime+1),w
  2016  014B  3070               	movlw	low(01770h)
  2017  014C  1903               	skipnz
  2018  014D  022C               	subwf	(_Motor_RunTime),w
  2019  014E  1C03               	skipc
  2020  014F  2951               	goto	u3371
  2021  0150  2952               	goto	u3370
  2022  0151                     u3371:
  2023  0151  29EA               	goto	l5383
  2024  0152                     u3370:
  2025                           	line	107
  2026                           	
  2027  0152                     l19473:	
  2028                           ;logic_control.c: 106: {
  2029                           ;logic_control.c: 107: Uart_SendStr((uint8_t*)"M auto close timeout\r\n");
  2030  0152  3001               	movlw	(STR_6|8000h)&0ffh
  2031  0153  3187  2708  3181   	fcall	_Uart_SendStr
  2032                           	line	108
  2033                           	
  2034  0156                     l19475:	
  2035                           ;logic_control.c: 108: Motor_RunSta = Motor_Stoped;
  2036  0156  3004               	movlw	(04h)
  2037  0157  0020               	movlb 0	; select bank0
  2038  0158  00CE               	movwf	(??_Motor_Driver+0)+0
  2039  0159  084E               	movf	(??_Motor_Driver+0)+0,w
  2040  015A  00BC               	movwf	(_Motor_RunSta)
  2041                           	line	109
  2042                           	
  2043  015B                     l19477:	
  2044                           ;logic_control.c: 109: Motor_Stop();
  2045  015B  3185  25A9  3181   	fcall	_Motor_Stop
  2046  015E  29EA               	goto	l5383
  2047                           	line	111
  2048                           	
  2049  015F                     l5372:	
  2050  015F  29EA               	goto	l5383
  2051                           	line	112
  2052                           	
  2053  0160                     l5371:	
  2054                           ;logic_control.c: 111: }
  2055                           ;logic_control.c: 112: break;
  2056  0160  29EA               	goto	l5383
  2057                           	line	113
  2058                           ;logic_control.c: 113: case Motor_ManualClosing:
  2059                           	
  2060  0161                     l5374:	
  2061                           	line	114
  2062                           	
  2063  0161                     l19479:	
  2064                           ;logic_control.c: 114: if((System_Sta == System_Closed)&&(Motor_RunTime < 6000))
  2065  0161  0020               	movlb 0	; select bank0
  2066  0162  083F               	movf	(_System_Sta),w
  2067  0163  3A01               	xorlw	01h&0ffh
  2068  0164  1D03               	skipz
  2069  0165  2967               	goto	u3381
  2070  0166  2968               	goto	u3380
  2071  0167                     u3381:
  2072  0167  298A               	goto	l19491
  2073  0168                     u3380:
  2074                           	
  2075  0168                     l19481:	
  2076  0168  3017               	movlw	high(01770h)
  2077  0169  022D               	subwf	(_Motor_RunTime+1),w
  2078  016A  3070               	movlw	low(01770h)
  2079  016B  1903               	skipnz
  2080  016C  022C               	subwf	(_Motor_RunTime),w
  2081  016D  1803               	skipnc
  2082  016E  2970               	goto	u3391
  2083  016F  2971               	goto	u3390
  2084  0170                     u3391:
  2085  0170  298A               	goto	l19491
  2086  0171                     u3390:
  2087                           	line	116
  2088                           	
  2089  0171                     l19483:	
  2090                           ;logic_control.c: 115: {
  2091                           ;logic_control.c: 116: Uart_SendStr((uint8_t*)"M man close\r\n");
  2092  0171  306B               	movlw	(STR_7|8000h)&0ffh
  2093  0172  3187  2708  3181   	fcall	_Uart_SendStr
  2094                           	line	117
  2095                           ;logic_control.c: 117: Delay_MS(2);
  2096  0175  3002               	movlw	low(02h)
  2097  0176  0020               	movlb 0	; select bank0
  2098  0177  00C6               	movwf	(?_Delay_MS)
  2099  0178  3000               	movlw	high(02h)
  2100  0179  00C7               	movwf	((?_Delay_MS))+1
  2101  017A  3186  2621  3181   	fcall	_Delay_MS
  2102                           	line	118
  2103                           	
  2104  017D                     l19485:	
  2105                           ;logic_control.c: 118: Motor_RunSta = Motor_Stoped;
  2106  017D  3004               	movlw	(04h)
  2107  017E  0020               	movlb 0	; select bank0
  2108  017F  00CE               	movwf	(??_Motor_Driver+0)+0
  2109  0180  084E               	movf	(??_Motor_Driver+0)+0,w
  2110  0181  00BC               	movwf	(_Motor_RunSta)
  2111                           	line	119
  2112                           	
  2113  0182                     l19487:	
  2114                           ;logic_control.c: 119: Motor_Stop();
  2115  0182  3185  25A9  3181   	fcall	_Motor_Stop
  2116                           	line	120
  2117                           	
  2118  0185                     l19489:	
  2119                           ;logic_control.c: 120: e2SavePara(eE2State_ManClose);
  2120  0185  3004               	movlw	(04h)
  2121  0186  3185  25FD  3181   	fcall	_e2SavePara
  2122                           	line	121
  2123                           ;logic_control.c: 121: }
  2124  0189  29EA               	goto	l5383
  2125                           	line	122
  2126                           	
  2127  018A                     l5375:	
  2128                           	
  2129  018A                     l19491:	
  2130                           ;logic_control.c: 122: else if(Motor_RunTime >= 6000)
  2131  018A  3017               	movlw	high(01770h)
  2132  018B  0020               	movlb 0	; select bank0
  2133  018C  022D               	subwf	(_Motor_RunTime+1),w
  2134  018D  3070               	movlw	low(01770h)
  2135  018E  1903               	skipnz
  2136  018F  022C               	subwf	(_Motor_RunTime),w
  2137  0190  1C03               	skipc
  2138  0191  2993               	goto	u3401
  2139  0192  2994               	goto	u3400
  2140  0193                     u3401:
  2141  0193  29EA               	goto	l5383
  2142  0194                     u3400:
  2143                           	line	124
  2144                           	
  2145  0194                     l19493:	
  2146                           ;logic_control.c: 123: {
  2147                           ;logic_control.c: 124: Uart_SendStr((uint8_t*)"M man close timeout\r\n");
  2148  0194  3018               	movlw	(STR_8|8000h)&0ffh
  2149  0195  3187  2708  3181   	fcall	_Uart_SendStr
  2150                           	line	125
  2151                           	
  2152  0198                     l19495:	
  2153                           ;logic_control.c: 125: Motor_RunSta = Motor_Stoped;
  2154  0198  3004               	movlw	(04h)
  2155  0199  0020               	movlb 0	; select bank0
  2156  019A  00CE               	movwf	(??_Motor_Driver+0)+0
  2157  019B  084E               	movf	(??_Motor_Driver+0)+0,w
  2158  019C  00BC               	movwf	(_Motor_RunSta)
  2159                           	line	126
  2160                           	
  2161  019D                     l19497:	
  2162                           ;logic_control.c: 126: Motor_Stop();
  2163  019D  3185  25A9  3181   	fcall	_Motor_Stop
  2164  01A0  29EA               	goto	l5383
  2165                           	line	128
  2166                           	
  2167  01A1                     l5377:	
  2168  01A1  29EA               	goto	l5383
  2169                           	line	129
  2170                           	
  2171  01A2                     l5376:	
  2172                           ;logic_control.c: 128: }
  2173                           ;logic_control.c: 129: break;
  2174  01A2  29EA               	goto	l5383
  2175                           	line	130
  2176                           ;logic_control.c: 130: case Motor_Opening:
  2177                           	
  2178  01A3                     l5378:	
  2179                           	line	131
  2180                           	
  2181  01A3                     l19499:	
  2182                           ;logic_control.c: 131: if((System_Sta == System_Opened)&&(Motor_RunTime > 500))
  2183  01A3  0020               	movlb 0	; select bank0
  2184  01A4  08BF               	movf	(_System_Sta),f
  2185  01A5  1D03               	skipz
  2186  01A6  29A8               	goto	u3411
  2187  01A7  29A9               	goto	u3410
  2188  01A8                     u3411:
  2189  01A8  29C3               	goto	l19511
  2190  01A9                     u3410:
  2191                           	
  2192  01A9                     l19501:	
  2193  01A9  3001               	movlw	high(01F5h)
  2194  01AA  022D               	subwf	(_Motor_RunTime+1),w
  2195  01AB  30F5               	movlw	low(01F5h)
  2196  01AC  1903               	skipnz
  2197  01AD  022C               	subwf	(_Motor_RunTime),w
  2198  01AE  1C03               	skipc
  2199  01AF  29B1               	goto	u3421
  2200  01B0  29B2               	goto	u3420
  2201  01B1                     u3421:
  2202  01B1  29C3               	goto	l19511
  2203  01B2                     u3420:
  2204                           	line	133
  2205                           	
  2206  01B2                     l19503:	
  2207                           ;logic_control.c: 132: {
  2208                           ;logic_control.c: 133: Uart_SendStr((uint8_t*)"M open\r\n");
  2209  01B2  3082               	movlw	(STR_9|8000h)&0ffh
  2210  01B3  3187  2708  3181   	fcall	_Uart_SendStr
  2211                           	line	134
  2212                           	
  2213  01B6                     l19505:	
  2214                           ;logic_control.c: 134: Motor_RunSta = Motor_Stoped;
  2215  01B6  3004               	movlw	(04h)
  2216  01B7  0020               	movlb 0	; select bank0
  2217  01B8  00CE               	movwf	(??_Motor_Driver+0)+0
  2218  01B9  084E               	movf	(??_Motor_Driver+0)+0,w
  2219  01BA  00BC               	movwf	(_Motor_RunSta)
  2220                           	line	135
  2221                           	
  2222  01BB                     l19507:	
  2223                           ;logic_control.c: 135: Motor_Stop();
  2224  01BB  3185  25A9  3181   	fcall	_Motor_Stop
  2225                           	line	136
  2226                           	
  2227  01BE                     l19509:	
  2228                           ;logic_control.c: 136: e2SavePara(eE2State_AutoOpen);
  2229  01BE  3001               	movlw	(01h)
  2230  01BF  3185  25FD  3181   	fcall	_e2SavePara
  2231                           	line	137
  2232                           ;logic_control.c: 137: }
  2233  01C2  29EA               	goto	l5383
  2234                           	line	138
  2235                           	
  2236  01C3                     l5379:	
  2237                           	
  2238  01C3                     l19511:	
  2239                           ;logic_control.c: 138: else if(Motor_RunTime >= 6000)
  2240  01C3  3017               	movlw	high(01770h)
  2241  01C4  0020               	movlb 0	; select bank0
  2242  01C5  022D               	subwf	(_Motor_RunTime+1),w
  2243  01C6  3070               	movlw	low(01770h)
  2244  01C7  1903               	skipnz
  2245  01C8  022C               	subwf	(_Motor_RunTime),w
  2246  01C9  1C03               	skipc
  2247  01CA  29CC               	goto	u3431
  2248  01CB  29CD               	goto	u3430
  2249  01CC                     u3431:
  2250  01CC  29EA               	goto	l5383
  2251  01CD                     u3430:
  2252                           	line	140
  2253                           	
  2254  01CD                     l19513:	
  2255                           ;logic_control.c: 139: {
  2256                           ;logic_control.c: 140: Uart_SendStr((uint8_t*)"M open timeout\r\n");
  2257  01CD  302E               	movlw	(STR_10|8000h)&0ffh
  2258  01CE  3187  2708  3181   	fcall	_Uart_SendStr
  2259                           	line	141
  2260                           	
  2261  01D1                     l19515:	
  2262                           ;logic_control.c: 141: Motor_RunSta = Motor_Stoped;
  2263  01D1  3004               	movlw	(04h)
  2264  01D2  0020               	movlb 0	; select bank0
  2265  01D3  00CE               	movwf	(??_Motor_Driver+0)+0
  2266  01D4  084E               	movf	(??_Motor_Driver+0)+0,w
  2267  01D5  00BC               	movwf	(_Motor_RunSta)
  2268                           	line	142
  2269                           	
  2270  01D6                     l19517:	
  2271                           ;logic_control.c: 142: Motor_Stop();
  2272  01D6  3185  25A9  3181   	fcall	_Motor_Stop
  2273  01D9  29EA               	goto	l5383
  2274                           	line	144
  2275                           	
  2276  01DA                     l5381:	
  2277  01DA  29EA               	goto	l5383
  2278                           	line	145
  2279                           	
  2280  01DB                     l5380:	
  2281                           ;logic_control.c: 144: }
  2282                           ;logic_control.c: 145: break;
  2283  01DB  29EA               	goto	l5383
  2284                           	line	147
  2285                           ;logic_control.c: 147: default:break;
  2286                           	
  2287  01DC                     l5382:	
  2288  01DC  29EA               	goto	l5383
  2289                           	line	148
  2290                           	
  2291  01DD                     l19519:	
  2292                           ;logic_control.c: 148: }
  2293  01DD  29EA               	goto	l5383
  2294                           	line	93
  2295                           	
  2296  01DE                     l5368:	
  2297                           	
  2298  01DE                     l19521:	
  2299  01DE  0020               	movlb 0	; select bank0
  2300  01DF  083C               	movf	(_Motor_RunSta),w
  2301                           	; Switch size 1, requested type "space"
  2302                           ; Number of cases is 3, Range of values is 1 to 3
  2303                           ; switch strategies available:
  2304                           ; Name         Instructions Cycles
  2305                           ; simple_byte           10     6 (average)
  2306                           ; direct_byte           15     9 (fixed)
  2307                           ; jumptable            263     9 (fixed)
  2308                           ;	Chosen strategy is simple_byte
  2309                           
  2310                           	opt asmopt_off
  2311  01E0  3A01               	xorlw	1^0	; case 1
  2312  01E1  1903               	skipnz
  2313  01E2  2921               	goto	l19457
  2314  01E3  3A03               	xorlw	2^1	; case 2
  2315  01E4  1903               	skipnz
  2316  01E5  2961               	goto	l19479
  2317  01E6  3A01               	xorlw	3^2	; case 3
  2318  01E7  1903               	skipnz
  2319  01E8  29A3               	goto	l19499
  2320  01E9  29EA               	goto	l5383
  2321                           	opt asmopt_on
  2322                           
  2323                           	line	148
  2324                           	
  2325  01EA                     l5373:	
  2326                           	line	150
  2327                           	
  2328  01EA                     l5383:	
  2329  01EA  0008               	return
  2330                           	opt stack 0
  2331                           GLOBAL	__end_of_Motor_Driver
  2332  01EB                     	__end_of_Motor_Driver:
  2333 ;; =============== function _Motor_Driver ends ============
  2334                           
  2335                           	signat	_Motor_Driver,88
  2336                           	global	_ContrlSignal_Driver
  2337                           psect	text950,local,class=CODE,delta=2
  2338                           global __ptext950
  2339  01EB                     __ptext950:
  2340                           
  2341 ;; *************** function _ContrlSignal_Driver *****************
  2342 ;; Defined at:
  2343 ;;		line 35 in file "logic_control.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;		None
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;		None
  2348 ;; Return value:  Size  Location     Type
  2349 ;;		None               void
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, status,0, pclath, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1
  2357 ;;      Params:         0       0       0
  2358 ;;      Locals:         0       0       0
  2359 ;;      Temps:          0       1       0
  2360 ;;      Totals:         0       1       0
  2361 ;;Total ram usage:        1 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    7
  2364 ;; This function calls:
  2365 ;;		_PowerSwitch_Enable
  2366 ;;		_Delay_MS
  2367 ;;		_Motor_GetStaus
  2368 ;;		_Motor_Stop
  2369 ;;		_Uart_SendStr
  2370 ;;		_Motor_Counterclockwise
  2371 ;;		_Motor_Clockwise
  2372 ;; This function is called by:
  2373 ;;		_MainLoop
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           psect	text950
  2377                           	file	"logic_control.c"
  2378                           	line	35
  2379                           	global	__size_of_ContrlSignal_Driver
  2380  00A2                     	__size_of_ContrlSignal_Driver	equ	__end_of_ContrlSignal_Driver-_ContrlSignal_Driver
  2381                           	
  2382  01EB                     _ContrlSignal_Driver:	
  2383                           	opt	stack 7
  2384                           ; Regs used in _ContrlSignal_Driver: [wreg+status,2+status,0+pclath+cstack]
  2385                           	line	38
  2386                           	
  2387  01EB                     l19401:	
  2388                           ;logic_control.c: 38: if((Ctr_SignalBck != Ctr_Signal) &&(Motor_RunSta==Motor_Stoped ||M
                                 otor_RunSta== Motor_Default) &&(gPhaseVoltage_CH1 > 200) )
  2389  01EB  0020               	movlb 0	; select bank0
  2390  01EC  083B               	movf	(_Ctr_SignalBck),w
  2391  01ED  063A               	xorwf	(_Ctr_Signal),w
  2392  01EE  1903               	skipnz
  2393  01EF  29F1               	goto	u3231
  2394  01F0  29F2               	goto	u3230
  2395  01F1                     u3231:
  2396  01F1  2A8C               	goto	l5365
  2397  01F2                     u3230:
  2398                           	
  2399  01F2                     l19403:	
  2400  01F2  083C               	movf	(_Motor_RunSta),w
  2401  01F3  3A04               	xorlw	04h&0ffh
  2402  01F4  1903               	skipnz
  2403  01F5  29F7               	goto	u3241
  2404  01F6  29F8               	goto	u3240
  2405  01F7                     u3241:
  2406  01F7  29FE               	goto	l19407
  2407  01F8                     u3240:
  2408                           	
  2409  01F8                     l19405:	
  2410  01F8  08BC               	movf	(_Motor_RunSta),f
  2411  01F9  1D03               	skipz
  2412  01FA  29FC               	goto	u3251
  2413  01FB  29FD               	goto	u3250
  2414  01FC                     u3251:
  2415  01FC  2A8C               	goto	l5365
  2416  01FD                     u3250:
  2417  01FD  29FE               	goto	l19407
  2418                           	
  2419  01FE                     l5352:	
  2420                           	
  2421  01FE                     l19407:	
  2422  01FE  3000               	movlw	high(0C9h)
  2423  01FF  0233               	subwf	(_gPhaseVoltage_CH1+1),w
  2424  0200  30C9               	movlw	low(0C9h)
  2425  0201  1903               	skipnz
  2426  0202  0232               	subwf	(_gPhaseVoltage_CH1),w
  2427  0203  1C03               	skipc
  2428  0204  2A06               	goto	u3261
  2429  0205  2A07               	goto	u3260
  2430  0206                     u3261:
  2431  0206  2A8C               	goto	l5365
  2432  0207                     u3260:
  2433                           	line	40
  2434                           	
  2435  0207                     l19409:	
  2436                           ;logic_control.c: 39: {
  2437                           ;logic_control.c: 40: PowerSwitch_Enable();
  2438  0207  3186  2610  3181   	fcall	_PowerSwitch_Enable
  2439                           	line	41
  2440                           ;logic_control.c: 41: Delay_MS(200);
  2441  020A  30C8               	movlw	low(0C8h)
  2442  020B  0020               	movlb 0	; select bank0
  2443  020C  00C6               	movwf	(?_Delay_MS)
  2444  020D  3000               	movlw	high(0C8h)
  2445  020E  00C7               	movwf	((?_Delay_MS))+1
  2446  020F  3186  2621  3181   	fcall	_Delay_MS
  2447                           	line	43
  2448                           	
  2449  0212                     l19411:	
  2450                           ;logic_control.c: 43: System_Sta = Motor_GetStaus();
  2451  0212  3186  26DE  3181   	fcall	_Motor_GetStaus
  2452  0215  0020               	movlb 0	; select bank0
  2453  0216  00CC               	movwf	(??_ContrlSignal_Driver+0)+0
  2454  0217  084C               	movf	(??_ContrlSignal_Driver+0)+0,w
  2455  0218  00BF               	movwf	(_System_Sta)
  2456                           	line	44
  2457                           	
  2458  0219                     l19413:	
  2459                           ;logic_control.c: 44: if(Ctr_Signal == Ctrl_SignalValid)
  2460  0219  083A               	movf	(_Ctr_Signal),w
  2461  021A  3A01               	xorlw	01h&0ffh
  2462  021B  1D03               	skipz
  2463  021C  2A1E               	goto	u3271
  2464  021D  2A1F               	goto	u3270
  2465  021E                     u3271:
  2466  021E  2A58               	goto	l19437
  2467  021F                     u3270:
  2468                           	line	46
  2469                           	
  2470  021F                     l19415:	
  2471                           ;logic_control.c: 45: {
  2472                           ;logic_control.c: 46: if(System_Sta == System_Closed)
  2473  021F  083F               	movf	(_System_Sta),w
  2474  0220  3A01               	xorlw	01h&0ffh
  2475  0221  1D03               	skipz
  2476  0222  2A24               	goto	u3281
  2477  0223  2A25               	goto	u3280
  2478  0224                     u3281:
  2479  0224  2A29               	goto	l19419
  2480  0225                     u3280:
  2481                           	line	48
  2482                           	
  2483  0225                     l19417:	
  2484                           ;logic_control.c: 47: {
  2485                           ;logic_control.c: 48: Motor_Stop();
  2486  0225  3185  25A9  3181   	fcall	_Motor_Stop
  2487                           	line	49
  2488                           ;logic_control.c: 49: }
  2489  0228  2A86               	goto	l5360
  2490                           	line	50
  2491                           	
  2492  0229                     l5354:	
  2493                           	
  2494  0229                     l19419:	
  2495                           ;logic_control.c: 50: else if(System_Sta == System_Opened)
  2496  0229  0020               	movlb 0	; select bank0
  2497  022A  08BF               	movf	(_System_Sta),f
  2498  022B  1D03               	skipz
  2499  022C  2A2E               	goto	u3291
  2500  022D  2A2F               	goto	u3290
  2501  022E                     u3291:
  2502  022E  2A86               	goto	l5360
  2503  022F                     u3290:
  2504                           	line	52
  2505                           	
  2506  022F                     l19421:	
  2507                           ;logic_control.c: 51: {
  2508                           ;logic_control.c: 52: if(AutoOrManualMode == AutoMode)
  2509  022F  08B9               	movf	(_AutoOrManualMode),f
  2510  0230  1D03               	skipz
  2511  0231  2A33               	goto	u3301
  2512  0232  2A34               	goto	u3300
  2513  0233                     u3301:
  2514  0233  2A40               	goto	l19429
  2515  0234                     u3300:
  2516                           	line	54
  2517                           	
  2518  0234                     l19423:	
  2519                           ;logic_control.c: 53: {
  2520                           ;logic_control.c: 54: Uart_SendStr((uint8_t*)"C auto close\r\n");
  2521  0234  303F               	movlw	(STR_1|8000h)&0ffh
  2522  0235  3187  2708  3181   	fcall	_Uart_SendStr
  2523                           	line	55
  2524                           	
  2525  0238                     l19425:	
  2526                           ;logic_control.c: 55: Motor_RunSta = Motor_AutoClosing;
  2527  0238  0020               	movlb 0	; select bank0
  2528  0239  01BC               	clrf	(_Motor_RunSta)
  2529  023A  1403               	bsf	status,0
  2530  023B  0DBC               	rlf	(_Motor_RunSta),f
  2531                           	line	56
  2532                           	
  2533  023C                     l19427:	
  2534                           ;logic_control.c: 56: Motor_Counterclockwise();
  2535  023C  3186  26AD  3181   	fcall	_Motor_Counterclockwise
  2536                           	line	57
  2537                           ;logic_control.c: 57: }
  2538  023F  2A86               	goto	l5360
  2539                           	line	58
  2540                           	
  2541  0240                     l5357:	
  2542                           	
  2543  0240                     l19429:	
  2544                           ;logic_control.c: 58: else if(AutoOrManualMode == ManualMode)
  2545  0240  0020               	movlb 0	; select bank0
  2546  0241  0839               	movf	(_AutoOrManualMode),w
  2547  0242  3A01               	xorlw	01h&0ffh
  2548  0243  1D03               	skipz
  2549  0244  2A46               	goto	u3311
  2550  0245  2A47               	goto	u3310
  2551  0246                     u3311:
  2552  0246  2A86               	goto	l5360
  2553  0247                     u3310:
  2554                           	line	60
  2555                           	
  2556  0247                     l19431:	
  2557                           ;logic_control.c: 59: {
  2558                           ;logic_control.c: 60: Uart_SendStr((uint8_t*)"C man close\r\n");
  2559  0247  305D               	movlw	(STR_2|8000h)&0ffh
  2560  0248  3187  2708  3181   	fcall	_Uart_SendStr
  2561                           	line	61
  2562                           	
  2563  024B                     l19433:	
  2564                           ;logic_control.c: 61: Motor_RunSta = Motor_ManualClosing;
  2565  024B  3002               	movlw	(02h)
  2566  024C  0020               	movlb 0	; select bank0
  2567  024D  00CC               	movwf	(??_ContrlSignal_Driver+0)+0
  2568  024E  084C               	movf	(??_ContrlSignal_Driver+0)+0,w
  2569  024F  00BC               	movwf	(_Motor_RunSta)
  2570                           	line	62
  2571                           	
  2572  0250                     l19435:	
  2573                           ;logic_control.c: 62: Motor_Clockwise();
  2574  0250  3186  26A0  3181   	fcall	_Motor_Clockwise
  2575  0253  2A86               	goto	l5360
  2576                           	line	63
  2577                           	
  2578  0254                     l5359:	
  2579  0254  2A86               	goto	l5360
  2580                           	line	65
  2581                           	
  2582  0255                     l5358:	
  2583  0255  2A86               	goto	l5360
  2584                           	
  2585  0256                     l5356:	
  2586  0256  2A86               	goto	l5360
  2587                           	line	66
  2588                           	
  2589  0257                     l5355:	
  2590                           ;logic_control.c: 63: }
  2591                           ;logic_control.c: 65: }
  2592                           ;logic_control.c: 66: }
  2593  0257  2A86               	goto	l5360
  2594                           	line	67
  2595                           	
  2596  0258                     l5353:	
  2597                           	
  2598  0258                     l19437:	
  2599                           ;logic_control.c: 67: else if(Ctr_Signal == Ctrl_SignalInvalid)
  2600  0258  0020               	movlb 0	; select bank0
  2601  0259  08BA               	movf	(_Ctr_Signal),f
  2602  025A  1D03               	skipz
  2603  025B  2A5D               	goto	u3321
  2604  025C  2A5E               	goto	u3320
  2605  025D                     u3321:
  2606  025D  2A86               	goto	l5360
  2607  025E                     u3320:
  2608                           	line	70
  2609                           	
  2610  025E                     l19439:	
  2611                           ;logic_control.c: 68: {
  2612                           ;logic_control.c: 70: if(System_Sta == System_Closed)
  2613  025E  083F               	movf	(_System_Sta),w
  2614  025F  3A01               	xorlw	01h&0ffh
  2615  0260  1D03               	skipz
  2616  0261  2A63               	goto	u3331
  2617  0262  2A64               	goto	u3330
  2618  0263                     u3331:
  2619  0263  2A71               	goto	l19447
  2620  0264                     u3330:
  2621                           	line	72
  2622                           	
  2623  0264                     l19441:	
  2624                           ;logic_control.c: 71: {
  2625                           ;logic_control.c: 72: Uart_SendStr((uint8_t*)"C open\r\n");
  2626  0264  3079               	movlw	(STR_3|8000h)&0ffh
  2627  0265  3187  2708  3181   	fcall	_Uart_SendStr
  2628                           	line	73
  2629                           	
  2630  0268                     l19443:	
  2631                           ;logic_control.c: 73: Motor_RunSta = Motor_Opening;
  2632  0268  3003               	movlw	(03h)
  2633  0269  0020               	movlb 0	; select bank0
  2634  026A  00CC               	movwf	(??_ContrlSignal_Driver+0)+0
  2635  026B  084C               	movf	(??_ContrlSignal_Driver+0)+0,w
  2636  026C  00BC               	movwf	(_Motor_RunSta)
  2637                           	line	74
  2638                           	
  2639  026D                     l19445:	
  2640                           ;logic_control.c: 74: Motor_Counterclockwise();
  2641  026D  3186  26AD  3181   	fcall	_Motor_Counterclockwise
  2642                           	line	75
  2643                           ;logic_control.c: 75: }
  2644  0270  2A86               	goto	l5360
  2645                           	line	76
  2646                           	
  2647  0271                     l5362:	
  2648                           	
  2649  0271                     l19447:	
  2650                           ;logic_control.c: 76: else if(System_Sta == System_Opened)
  2651  0271  0020               	movlb 0	; select bank0
  2652  0272  08BF               	movf	(_System_Sta),f
  2653  0273  1D03               	skipz
  2654  0274  2A76               	goto	u3341
  2655  0275  2A77               	goto	u3340
  2656  0276                     u3341:
  2657  0276  2A86               	goto	l5360
  2658  0277                     u3340:
  2659                           	line	78
  2660                           	
  2661  0277                     l19449:	
  2662                           ;logic_control.c: 77: {
  2663                           ;logic_control.c: 78: Uart_SendStr((uint8_t*)"C stop\r\n");
  2664  0277  308B               	movlw	(STR_4|8000h)&0ffh
  2665  0278  3187  2708  3181   	fcall	_Uart_SendStr
  2666                           	line	79
  2667                           	
  2668  027B                     l19451:	
  2669                           ;logic_control.c: 79: Motor_RunSta = Motor_Stoped;
  2670  027B  3004               	movlw	(04h)
  2671  027C  0020               	movlb 0	; select bank0
  2672  027D  00CC               	movwf	(??_ContrlSignal_Driver+0)+0
  2673  027E  084C               	movf	(??_ContrlSignal_Driver+0)+0,w
  2674  027F  00BC               	movwf	(_Motor_RunSta)
  2675                           	line	80
  2676                           	
  2677  0280                     l19453:	
  2678                           ;logic_control.c: 80: Motor_Stop();
  2679  0280  3185  25A9  3181   	fcall	_Motor_Stop
  2680  0283  2A86               	goto	l5360
  2681                           	line	81
  2682                           	
  2683  0284                     l5364:	
  2684  0284  2A86               	goto	l5360
  2685                           	line	82
  2686                           	
  2687  0285                     l5363:	
  2688  0285  2A86               	goto	l5360
  2689                           	
  2690  0286                     l5361:	
  2691                           	line	83
  2692                           	
  2693  0286                     l5360:	
  2694                           ;logic_control.c: 81: }
  2695                           ;logic_control.c: 82: }
  2696                           ;logic_control.c: 83: Ctr_SignalBck = Ctr_Signal;
  2697  0286  0020               	movlb 0	; select bank0
  2698  0287  083A               	movf	(_Ctr_Signal),w
  2699  0288  00CC               	movwf	(??_ContrlSignal_Driver+0)+0
  2700  0289  084C               	movf	(??_ContrlSignal_Driver+0)+0,w
  2701  028A  00BB               	movwf	(_Ctr_SignalBck)
  2702  028B  2A8C               	goto	l5365
  2703                           	line	84
  2704                           	
  2705  028C                     l5350:	
  2706                           	line	85
  2707                           	
  2708  028C                     l5365:	
  2709  028C  0008               	return
  2710                           	opt stack 0
  2711                           GLOBAL	__end_of_ContrlSignal_Driver
  2712  028D                     	__end_of_ContrlSignal_Driver:
  2713 ;; =============== function _ContrlSignal_Driver ends ============
  2714                           
  2715                           	signat	_ContrlSignal_Driver,88
  2716                           	global	_Motor_Stop
  2717                           psect	text951,local,class=CODE,delta=2
  2718                           global __ptext951
  2719  05A9                     __ptext951:
  2720                           
  2721 ;; *************** function _Motor_Stop *****************
  2722 ;; Defined at:
  2723 ;;		line 69 in file "motor.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;  tem             1    5[BANK0 ] unsigned char 
  2728 ;; Return value:  Size  Location     Type
  2729 ;;		None               void
  2730 ;; Registers used:
  2731 ;;		wreg, status,2, status,0, pclath, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMMON   BANK0   BANK1
  2737 ;;      Params:         0       0       0
  2738 ;;      Locals:         0       1       0
  2739 ;;      Temps:          0       1       0
  2740 ;;      Totals:         0       2       0
  2741 ;;Total ram usage:        2 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    6
  2744 ;; This function calls:
  2745 ;;		_Delay_MS
  2746 ;;		_PowerSwitch_Disable
  2747 ;; This function is called by:
  2748 ;;		_main
  2749 ;;		_ContrlSignal_Driver
  2750 ;;		_Motor_Driver
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           psect	text951
  2754                           	file	"motor.c"
  2755                           	line	69
  2756                           	global	__size_of_Motor_Stop
  2757  0016                     	__size_of_Motor_Stop	equ	__end_of_Motor_Stop-_Motor_Stop
  2758                           	
  2759  05A9                     _Motor_Stop:	
  2760                           	opt	stack 7
  2761                           ; Regs used in _Motor_Stop: [wreg+status,2+status,0+pclath+cstack]
  2762                           	line	73
  2763                           	
  2764  05A9                     l19389:	
  2765                           ;motor.c: 72: uint8_t tem;
  2766                           ;motor.c: 73: tem = PORTC;
  2767  05A9  0020               	movlb 0	; select bank0
  2768  05AA  080E               	movf	(14),w	;volatile
  2769  05AB  00CA               	movwf	(??_Motor_Stop+0)+0
  2770  05AC  084A               	movf	(??_Motor_Stop+0)+0,w
  2771  05AD  00CB               	movwf	(Motor_Stop@tem)
  2772                           	line	74
  2773                           	
  2774  05AE                     l19391:	
  2775                           ;motor.c: 74: tem |= (0x01 << 2);
  2776  05AE  154B               	bsf	(Motor_Stop@tem)+(2/8),(2)&7
  2777                           	line	75
  2778                           	
  2779  05AF                     l19393:	
  2780                           ;motor.c: 75: tem |= (0x01 << 5);
  2781  05AF  16CB               	bsf	(Motor_Stop@tem)+(5/8),(5)&7
  2782                           	line	76
  2783                           ;motor.c: 76: PORTC = tem;
  2784  05B0  084B               	movf	(Motor_Stop@tem),w
  2785  05B1  008E               	movwf	(14)	;volatile
  2786                           	line	77
  2787                           	
  2788  05B2                     l19395:	
  2789                           ;motor.c: 77: Motor_RunTime = 0;
  2790  05B2  01AC               	clrf	(_Motor_RunTime)
  2791  05B3  01AD               	clrf	(_Motor_RunTime+1)
  2792                           	line	80
  2793                           	
  2794  05B4                     l19397:	
  2795                           ;motor.c: 80: Delay_MS(200);
  2796  05B4  30C8               	movlw	low(0C8h)
  2797  05B5  00C6               	movwf	(?_Delay_MS)
  2798  05B6  3000               	movlw	high(0C8h)
  2799  05B7  00C7               	movwf	((?_Delay_MS))+1
  2800  05B8  3186  2621  3185   	fcall	_Delay_MS
  2801                           	line	81
  2802                           	
  2803  05BB                     l19399:	
  2804                           ;motor.c: 81: PowerSwitch_Disable();
  2805  05BB  3186  2685  3185   	fcall	_PowerSwitch_Disable
  2806                           	line	83
  2807                           	
  2808  05BE                     l6702:	
  2809  05BE  0008               	return
  2810                           	opt stack 0
  2811                           GLOBAL	__end_of_Motor_Stop
  2812  05BF                     	__end_of_Motor_Stop:
  2813 ;; =============== function _Motor_Stop ends ============
  2814                           
  2815                           	signat	_Motor_Stop,88
  2816                           	global	_PowerSwitch_Disable
  2817                           psect	text952,local,class=CODE,delta=2
  2818                           global __ptext952
  2819  0685                     __ptext952:
  2820                           
  2821 ;; *************** function _PowerSwitch_Disable *****************
  2822 ;; Defined at:
  2823 ;;		line 31 in file "lowpower.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;		None
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;  tmp             1    3[BANK0 ] unsigned char 
  2828 ;; Return value:  Size  Location     Type
  2829 ;;		None               void
  2830 ;; Registers used:
  2831 ;;		wreg, status,2, status,0, pclath, cstack
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMMON   BANK0   BANK1
  2837 ;;      Params:         0       0       0
  2838 ;;      Locals:         0       1       0
  2839 ;;      Temps:          0       1       0
  2840 ;;      Totals:         0       2       0
  2841 ;;Total ram usage:        2 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:    5
  2844 ;; This function calls:
  2845 ;;		_PowerSwitch_Delay
  2846 ;; This function is called by:
  2847 ;;		_Motor_Stop
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           psect	text952
  2851                           	file	"lowpower.c"
  2852                           	line	31
  2853                           	global	__size_of_PowerSwitch_Disable
  2854  000E                     	__size_of_PowerSwitch_Disable	equ	__end_of_PowerSwitch_Disable-_PowerSwitch_Disable
  2855                           	
  2856  0685                     _PowerSwitch_Disable:	
  2857                           	opt	stack 7
  2858                           ; Regs used in _PowerSwitch_Disable: [wreg+status,2+status,0+pclath+cstack]
  2859                           	line	32
  2860                           	
  2861  0685                     l19379:	
  2862                           ;lowpower.c: 32: uint8_t tmp = 0;
  2863  0685  0020               	movlb 0	; select bank0
  2864  0686  01C9               	clrf	(PowerSwitch_Disable@tmp)
  2865                           	line	34
  2866                           	
  2867  0687                     l19381:	
  2868                           ;lowpower.c: 34: PowerSwitch_Delay();
  2869  0687  3185  257C  3186   	fcall	_PowerSwitch_Delay
  2870                           	line	35
  2871                           	
  2872  068A                     l19383:	
  2873                           ;lowpower.c: 35: tmp = PORTC;
  2874  068A  0020               	movlb 0	; select bank0
  2875  068B  080E               	movf	(14),w	;volatile
  2876  068C  00C8               	movwf	(??_PowerSwitch_Disable+0)+0
  2877  068D  0848               	movf	(??_PowerSwitch_Disable+0)+0,w
  2878  068E  00C9               	movwf	(PowerSwitch_Disable@tmp)
  2879                           	line	36
  2880                           	
  2881  068F                     l19385:	
  2882                           ;lowpower.c: 36: tmp |= (0x01 << 3);
  2883  068F  15C9               	bsf	(PowerSwitch_Disable@tmp)+(3/8),(3)&7
  2884                           	line	37
  2885                           	
  2886  0690                     l19387:	
  2887                           ;lowpower.c: 37: PORTC = tmp;
  2888  0690  0849               	movf	(PowerSwitch_Disable@tmp),w
  2889  0691  008E               	movwf	(14)	;volatile
  2890                           	line	39
  2891                           	
  2892  0692                     l14636:	
  2893  0692  0008               	return
  2894                           	opt stack 0
  2895                           GLOBAL	__end_of_PowerSwitch_Disable
  2896  0693                     	__end_of_PowerSwitch_Disable:
  2897 ;; =============== function _PowerSwitch_Disable ends ============
  2898                           
  2899                           	signat	_PowerSwitch_Disable,88
  2900                           	global	_e2SavePara
  2901                           psect	text953,local,class=CODE,delta=2
  2902                           global __ptext953
  2903  05FD                     __ptext953:
  2904                           
  2905 ;; *************** function _e2SavePara *****************
  2906 ;; Defined at:
  2907 ;;		line 84 in file "internal_e2prom.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;  val             1    wreg     enum E29
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  val             1    7[BANK0 ] enum E29
  2912 ;; Return value:  Size  Location     Type
  2913 ;;		None               void
  2914 ;; Registers used:
  2915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMMON   BANK0   BANK1
  2921 ;;      Params:         0       0       0
  2922 ;;      Locals:         0       1       0
  2923 ;;      Temps:          0       2       0
  2924 ;;      Totals:         0       3       0
  2925 ;;Total ram usage:        3 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:    5
  2928 ;; This function calls:
  2929 ;;		_internal_E2Write
  2930 ;; This function is called by:
  2931 ;;		_Motor_Driver
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           psect	text953
  2935                           	file	"internal_e2prom.c"
  2936                           	line	84
  2937                           	global	__size_of_e2SavePara
  2938  0013                     	__size_of_e2SavePara	equ	__end_of_e2SavePara-_e2SavePara
  2939                           	
  2940  05FD                     _e2SavePara:	
  2941                           	opt	stack 8
  2942                           ; Regs used in _e2SavePara: [wreg+fsr1l-status,0+pclath+cstack]
  2943                           ;e2SavePara@val stored from wreg
  2944  05FD  0020               	movlb 0	; select bank0
  2945  05FE  00CD               	movwf	(e2SavePara@val)
  2946                           	line	85
  2947                           	
  2948  05FF                     l19375:	
  2949                           ;internal_e2prom.c: 85: gE2promState.systemState = val;
  2950  05FF  084D               	movf	(e2SavePara@val),w
  2951  0600  00CB               	movwf	(??_e2SavePara+0)+0
  2952  0601  084B               	movf	(??_e2SavePara+0)+0,w
  2953  0602  00C4               	movwf	0+(_gE2promState)+01h
  2954                           	line	86
  2955                           	
  2956  0603                     l19377:	
  2957                           ;internal_e2prom.c: 86: internal_E2Write(0,(uint8_t *)&gE2promState,sizeof(gE2promState)
                                 );
  2958  0603  3043               	movlw	(_gE2promState)&0ffh
  2959  0604  00CB               	movwf	(??_e2SavePara+0)+0
  2960  0605  084B               	movf	(??_e2SavePara+0)+0,w
  2961  0606  00C6               	movwf	(?_internal_E2Write)
  2962  0607  3003               	movlw	(03h)
  2963  0608  00CC               	movwf	(??_e2SavePara+1)+0
  2964  0609  084C               	movf	(??_e2SavePara+1)+0,w
  2965  060A  00C7               	movwf	0+(?_internal_E2Write)+01h
  2966  060B  3000               	movlw	(0)
  2967  060C  3184  2411  3185   	fcall	_internal_E2Write
  2968                           	line	87
  2969                           	
  2970  060F                     l15978:	
  2971  060F  0008               	return
  2972                           	opt stack 0
  2973                           GLOBAL	__end_of_e2SavePara
  2974  0610                     	__end_of_e2SavePara:
  2975 ;; =============== function _e2SavePara ends ============
  2976                           
  2977                           	signat	_e2SavePara,4216
  2978                           	global	_PowerSwitch_Enable
  2979                           psect	text954,local,class=CODE,delta=2
  2980                           global __ptext954
  2981  0610                     __ptext954:
  2982                           
  2983 ;; *************** function _PowerSwitch_Enable *****************
  2984 ;; Defined at:
  2985 ;;		line 22 in file "lowpower.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;		None
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;  tmp             1    3[BANK0 ] unsigned char 
  2990 ;; Return value:  Size  Location     Type
  2991 ;;		None               void
  2992 ;; Registers used:
  2993 ;;		wreg, status,2, status,0, pclath, cstack
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMMON   BANK0   BANK1
  2999 ;;      Params:         0       0       0
  3000 ;;      Locals:         0       1       0
  3001 ;;      Temps:          0       1       0
  3002 ;;      Totals:         0       2       0
  3003 ;;Total ram usage:        2 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    5
  3006 ;; This function calls:
  3007 ;;		_PowerSwitch_Delay
  3008 ;; This function is called by:
  3009 ;;		_ContrlSignal_Driver
  3010 ;;		_PowerSwitch_WaitReady
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           psect	text954
  3014                           	file	"lowpower.c"
  3015                           	line	22
  3016                           	global	__size_of_PowerSwitch_Enable
  3017  0011                     	__size_of_PowerSwitch_Enable	equ	__end_of_PowerSwitch_Enable-_PowerSwitch_Enable
  3018                           	
  3019  0610                     _PowerSwitch_Enable:	
  3020                           	opt	stack 8
  3021                           ; Regs used in _PowerSwitch_Enable: [wreg+status,2+status,0+pclath+cstack]
  3022                           	line	23
  3023                           	
  3024  0610                     l19365:	
  3025                           ;lowpower.c: 23: uint8_t tmp = 0;
  3026  0610  0020               	movlb 0	; select bank0
  3027  0611  01C9               	clrf	(PowerSwitch_Enable@tmp)
  3028                           	line	24
  3029                           	
  3030  0612                     l19367:	
  3031                           ;lowpower.c: 24: PowerSwitch_Delay();
  3032  0612  3185  257C  3186   	fcall	_PowerSwitch_Delay
  3033                           	line	25
  3034                           	
  3035  0615                     l19369:	
  3036                           ;lowpower.c: 25: tmp = PORTC;
  3037  0615  0020               	movlb 0	; select bank0
  3038  0616  080E               	movf	(14),w	;volatile
  3039  0617  00C8               	movwf	(??_PowerSwitch_Enable+0)+0
  3040  0618  0848               	movf	(??_PowerSwitch_Enable+0)+0,w
  3041  0619  00C9               	movwf	(PowerSwitch_Enable@tmp)
  3042                           	line	26
  3043                           	
  3044  061A                     l19371:	
  3045                           ;lowpower.c: 26: tmp &= ~(0x01 << 3);
  3046  061A  30F7               	movlw	(0F7h)
  3047  061B  00C8               	movwf	(??_PowerSwitch_Enable+0)+0
  3048  061C  0848               	movf	(??_PowerSwitch_Enable+0)+0,w
  3049  061D  05C9               	andwf	(PowerSwitch_Enable@tmp),f
  3050                           	line	27
  3051                           	
  3052  061E                     l19373:	
  3053                           ;lowpower.c: 27: PORTC = tmp;
  3054  061E  0849               	movf	(PowerSwitch_Enable@tmp),w
  3055  061F  008E               	movwf	(14)	;volatile
  3056                           	line	28
  3057                           	
  3058  0620                     l14633:	
  3059  0620  0008               	return
  3060                           	opt stack 0
  3061                           GLOBAL	__end_of_PowerSwitch_Enable
  3062  0621                     	__end_of_PowerSwitch_Enable:
  3063 ;; =============== function _PowerSwitch_Enable ends ============
  3064                           
  3065                           	signat	_PowerSwitch_Enable,88
  3066                           	global	_PIC_ConfigClock32Khz
  3067                           psect	text955,local,class=CODE,delta=2
  3068                           global __ptext955
  3069  0693                     __ptext955:
  3070                           
  3071 ;; *************** function _PIC_ConfigClock32Khz *****************
  3072 ;; Defined at:
  3073 ;;		line 56 in file "system_init.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;		None
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;		None
  3078 ;; Return value:  Size  Location     Type
  3079 ;;		None               void
  3080 ;; Registers used:
  3081 ;;		wreg, status,2, status,0
  3082 ;; Tracked objects:
  3083 ;;		On entry : 0/0
  3084 ;;		On exit  : 0/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMMON   BANK0   BANK1
  3087 ;;      Params:         0       0       0
  3088 ;;      Locals:         0       0       0
  3089 ;;      Temps:          0       1       0
  3090 ;;      Totals:         0       1       0
  3091 ;;Total ram usage:        1 bytes
  3092 ;; Hardware stack levels used:    1
  3093 ;; Hardware stack levels required when called:    4
  3094 ;; This function calls:
  3095 ;;		Nothing
  3096 ;; This function is called by:
  3097 ;;		_main
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           psect	text955
  3101                           	file	"system_init.c"
  3102                           	line	56
  3103                           	global	__size_of_PIC_ConfigClock32Khz
  3104  000D                     	__size_of_PIC_ConfigClock32Khz	equ	__end_of_PIC_ConfigClock32Khz-_PIC_ConfigClock32Khz
  3105                           	
  3106  0693                     _PIC_ConfigClock32Khz:	
  3107                           	opt	stack 11
  3108                           ; Regs used in _PIC_ConfigClock32Khz: [wreg+status,2+status,0]
  3109                           	line	57
  3110                           	
  3111  0693                     l19353:	
  3112                           ;system_init.c: 57: OSCCON &= ~(0x0f << 3);
  3113  0693  3087               	movlw	(087h)
  3114  0694  0020               	movlb 0	; select bank0
  3115  0695  00C6               	movwf	(??_PIC_ConfigClock32Khz+0)+0
  3116  0696  0846               	movf	(??_PIC_ConfigClock32Khz+0)+0,w
  3117  0697  0021               	movlb 1	; select bank1
  3118  0698  0599               	andwf	(153)^080h,f	;volatile
  3119                           	line	58
  3120                           	
  3121  0699                     l19355:	
  3122                           ;system_init.c: 58: _nop();
  3123  0699  0000               	nop
  3124                           	line	59
  3125                           	
  3126  069A                     l19357:	
  3127                           ;system_init.c: 59: _nop();
  3128  069A  0000               	nop
  3129                           	line	60
  3130                           	
  3131  069B                     l19359:	
  3132                           ;system_init.c: 60: OSCCON |= (0x00 << 3);
  3133  069B  0021               	movlb 1	; select bank1
  3134  069C  0819               	movf	(153)^080h,w	;volatile
  3135                           	line	61
  3136                           	
  3137  069D                     l19361:	
  3138                           ;system_init.c: 61: _nop();
  3139  069D  0000               	nop
  3140                           	line	62
  3141                           	
  3142  069E                     l19363:	
  3143                           ;system_init.c: 62: _nop();
  3144  069E  0000               	nop
  3145                           	line	63
  3146                           	
  3147  069F                     l9352:	
  3148  069F  0008               	return
  3149                           	opt stack 0
  3150                           GLOBAL	__end_of_PIC_ConfigClock32Khz
  3151  06A0                     	__end_of_PIC_ConfigClock32Khz:
  3152 ;; =============== function _PIC_ConfigClock32Khz ends ============
  3153                           
  3154                           	signat	_PIC_ConfigClock32Khz,88
  3155                           	global	_KeyDriver
  3156                           psect	text956,local,class=CODE,delta=2
  3157                           global __ptext956
  3158  052D                     __ptext956:
  3159                           
  3160 ;; *************** function _KeyDriver *****************
  3161 ;; Defined at:
  3162 ;;		line 17 in file "keyboard.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;		None
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;		None
  3167 ;; Return value:  Size  Location     Type
  3168 ;;		None               void
  3169 ;; Registers used:
  3170 ;;		wreg, status,2, status,0, pclath, cstack
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMMON   BANK0   BANK1
  3176 ;;      Params:         0       0       0
  3177 ;;      Locals:         0       0       0
  3178 ;;      Temps:          0       1       0
  3179 ;;      Totals:         0       1       0
  3180 ;;Total ram usage:        1 bytes
  3181 ;; Hardware stack levels used:    1
  3182 ;; Hardware stack levels required when called:    5
  3183 ;; This function calls:
  3184 ;;		_KeyAction
  3185 ;; This function is called by:
  3186 ;;		_main
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           psect	text956
  3190                           	file	"keyboard.c"
  3191                           	line	17
  3192                           	global	__size_of_KeyDriver
  3193  001D                     	__size_of_KeyDriver	equ	__end_of_KeyDriver-_KeyDriver
  3194                           	
  3195  052D                     _KeyDriver:	
  3196                           	opt	stack 10
  3197                           ; Regs used in _KeyDriver: [wreg+status,2+status,0+pclath+cstack]
  3198                           	line	20
  3199                           	
  3200  052D                     l19343:	
  3201                           ;keyboard.c: 18: static unsigned char backup = 1;
  3202                           ;keyboard.c: 20: if(backup != KeySta)
  3203  052D  0020               	movlb 0	; select bank0
  3204  052E  0857               	movf	(KeyDriver@backup),w
  3205  052F  0659               	xorwf	(_KeySta),w
  3206  0530  1903               	skipnz
  3207  0531  2D33               	goto	u3211
  3208  0532  2D34               	goto	u3210
  3209  0533                     u3211:
  3210  0533  2D49               	goto	l8028
  3211  0534                     u3210:
  3212                           	line	22
  3213                           	
  3214  0534                     l19345:	
  3215                           ;keyboard.c: 21: {
  3216                           ;keyboard.c: 22: if(KeySta == 0x00)
  3217  0534  08D9               	movf	(_KeySta),f
  3218  0535  1D03               	skipz
  3219  0536  2D38               	goto	u3221
  3220  0537  2D39               	goto	u3220
  3221  0538                     u3221:
  3222  0538  2D3E               	goto	l19349
  3223  0539                     u3220:
  3224                           	line	24
  3225                           	
  3226  0539                     l19347:	
  3227                           ;keyboard.c: 23: {
  3228                           ;keyboard.c: 24: KeyAction(0x00);
  3229  0539  3000               	movlw	(0)
  3230  053A  3185  25BF  3185   	fcall	_KeyAction
  3231                           	line	25
  3232                           ;keyboard.c: 25: }
  3233  053D  2D43               	goto	l19351
  3234                           	line	26
  3235                           	
  3236  053E                     l8026:	
  3237                           	line	28
  3238                           	
  3239  053E                     l19349:	
  3240                           ;keyboard.c: 26: else
  3241                           ;keyboard.c: 27: {
  3242                           ;keyboard.c: 28: KeyAction(0x01);
  3243  053E  3001               	movlw	(01h)
  3244  053F  3185  25BF  3185   	fcall	_KeyAction
  3245  0542  2D43               	goto	l19351
  3246                           	line	29
  3247                           	
  3248  0543                     l8027:	
  3249                           	line	30
  3250                           	
  3251  0543                     l19351:	
  3252                           ;keyboard.c: 29: }
  3253                           ;keyboard.c: 30: backup = KeySta;
  3254  0543  0020               	movlb 0	; select bank0
  3255  0544  0859               	movf	(_KeySta),w
  3256  0545  00C7               	movwf	(??_KeyDriver+0)+0
  3257  0546  0847               	movf	(??_KeyDriver+0)+0,w
  3258  0547  00D7               	movwf	(KeyDriver@backup)
  3259  0548  2D49               	goto	l8028
  3260                           	line	31
  3261                           	
  3262  0549                     l8025:	
  3263                           	line	32
  3264                           	
  3265  0549                     l8028:	
  3266  0549  0008               	return
  3267                           	opt stack 0
  3268                           GLOBAL	__end_of_KeyDriver
  3269  054A                     	__end_of_KeyDriver:
  3270 ;; =============== function _KeyDriver ends ============
  3271                           
  3272                           	signat	_KeyDriver,88
  3273                           	global	_internal_E2promInit
  3274                           psect	text957,local,class=CODE,delta=2
  3275                           global __ptext957
  3276  04E0                     __ptext957:
  3277                           
  3278 ;; *************** function _internal_E2promInit *****************
  3279 ;; Defined at:
  3280 ;;		line 13 in file "internal_e2prom.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  addr            1    7[BANK0 ] unsigned char 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;		None               void
  3287 ;; Registers used:
  3288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1
  3294 ;;      Params:         0       0       0
  3295 ;;      Locals:         0       1       0
  3296 ;;      Temps:          0       2       0
  3297 ;;      Totals:         0       3       0
  3298 ;;Total ram usage:        3 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    5
  3301 ;; This function calls:
  3302 ;;		_internal_E2Read
  3303 ;;		_internal_E2Write
  3304 ;; This function is called by:
  3305 ;;		_main
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           psect	text957
  3309                           	file	"internal_e2prom.c"
  3310                           	line	13
  3311                           	global	__size_of_internal_E2promInit
  3312  002B                     	__size_of_internal_E2promInit	equ	__end_of_internal_E2promInit-_internal_E2promInit
  3313                           	
  3314  04E0                     _internal_E2promInit:	
  3315                           	opt	stack 10
  3316                           ; Regs used in _internal_E2promInit: [wreg+fsr1l-status,0+pclath+cstack]
  3317                           	line	14
  3318                           	
  3319  04E0                     l19329:	
  3320                           ;internal_e2prom.c: 14: uint8_t addr = 0;
  3321  04E0  0020               	movlb 0	; select bank0
  3322  04E1  01CD               	clrf	(internal_E2promInit@addr)
  3323                           	line	15
  3324                           	
  3325  04E2                     l19331:	
  3326                           ;internal_e2prom.c: 15: EECON1 = 0;
  3327  04E2  0023               	movlb 3	; select bank3
  3328  04E3  0195               	clrf	(405)^0180h	;volatile
  3329                           	line	18
  3330                           	
  3331  04E4                     l19333:	
  3332                           ;internal_e2prom.c: 18: internal_E2Read(0,(uint8_t *)&gE2promState,sizeof(gE2promState))
                                 ;
  3333  04E4  3043               	movlw	(_gE2promState)&0ffh
  3334  04E5  0020               	movlb 0	; select bank0
  3335  04E6  00CB               	movwf	(??_internal_E2promInit+0)+0
  3336  04E7  084B               	movf	(??_internal_E2promInit+0)+0,w
  3337  04E8  00C6               	movwf	(?_internal_E2Read)
  3338  04E9  3003               	movlw	(03h)
  3339  04EA  00CC               	movwf	(??_internal_E2promInit+1)+0
  3340  04EB  084C               	movf	(??_internal_E2promInit+1)+0,w
  3341  04EC  00C7               	movwf	0+(?_internal_E2Read)+01h
  3342  04ED  3000               	movlw	(0)
  3343  04EE  3184  244D  3184   	fcall	_internal_E2Read
  3344                           	line	19
  3345                           	
  3346  04F1                     l19335:	
  3347                           ;internal_e2prom.c: 19: if(gE2promState.version != 0xab)
  3348  04F1  0020               	movlb 0	; select bank0
  3349  04F2  0843               	movf	(_gE2promState),w
  3350  04F3  3AAB               	xorlw	0ABh&0ffh
  3351  04F4  1903               	skipnz
  3352  04F5  2CF7               	goto	u3201
  3353  04F6  2CF8               	goto	u3200
  3354  04F7                     u3201:
  3355  04F7  2D0A               	goto	l15951
  3356  04F8                     u3200:
  3357                           	line	21
  3358                           	
  3359  04F8                     l19337:	
  3360                           ;internal_e2prom.c: 20: {
  3361                           ;internal_e2prom.c: 21: gE2promState.systemState = eE2State_Default;
  3362  04F8  01C4               	clrf	0+(_gE2promState)+01h
  3363                           	line	22
  3364                           	
  3365  04F9                     l19339:	
  3366                           ;internal_e2prom.c: 22: gE2promState.version = 0xab;
  3367  04F9  30AB               	movlw	(0ABh)
  3368  04FA  00CB               	movwf	(??_internal_E2promInit+0)+0
  3369  04FB  084B               	movf	(??_internal_E2promInit+0)+0,w
  3370  04FC  00C3               	movwf	(_gE2promState)
  3371                           	line	23
  3372                           	
  3373  04FD                     l19341:	
  3374                           ;internal_e2prom.c: 23: internal_E2Write(0,(uint8_t *)&gE2promState,sizeof(gE2promState)
                                 );
  3375  04FD  3043               	movlw	(_gE2promState)&0ffh
  3376  04FE  00CB               	movwf	(??_internal_E2promInit+0)+0
  3377  04FF  084B               	movf	(??_internal_E2promInit+0)+0,w
  3378  0500  00C6               	movwf	(?_internal_E2Write)
  3379  0501  3003               	movlw	(03h)
  3380  0502  00CC               	movwf	(??_internal_E2promInit+1)+0
  3381  0503  084C               	movf	(??_internal_E2promInit+1)+0,w
  3382  0504  00C7               	movwf	0+(?_internal_E2Write)+01h
  3383  0505  3000               	movlw	(0)
  3384  0506  3184  2411  3184   	fcall	_internal_E2Write
  3385  0509  2D0A               	goto	l15951
  3386                           	line	24
  3387                           	
  3388  050A                     l15950:	
  3389                           	line	36
  3390                           	
  3391  050A                     l15951:	
  3392  050A  0008               	return
  3393                           	opt stack 0
  3394                           GLOBAL	__end_of_internal_E2promInit
  3395  050B                     	__end_of_internal_E2promInit:
  3396 ;; =============== function _internal_E2promInit ends ============
  3397                           
  3398                           	signat	_internal_E2promInit,88
  3399                           	global	_ADC_Init
  3400                           psect	text958,local,class=CODE,delta=2
  3401                           global __ptext958
  3402  05E9                     __ptext958:
  3403                           
  3404 ;; *************** function _ADC_Init *****************
  3405 ;; Defined at:
  3406 ;;		line 25 in file "adc.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;		None
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;		None
  3411 ;; Return value:  Size  Location     Type
  3412 ;;		None               void
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0, pclath, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1
  3420 ;;      Params:         0       0       0
  3421 ;;      Locals:         0       0       0
  3422 ;;      Temps:          0       1       0
  3423 ;;      Totals:         0       1       0
  3424 ;;Total ram usage:        1 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    5
  3427 ;; This function calls:
  3428 ;;		_ADC_AllPin_Init
  3429 ;; This function is called by:
  3430 ;;		_main
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           psect	text958
  3434                           	file	"adc.c"
  3435                           	line	25
  3436                           	global	__size_of_ADC_Init
  3437  0014                     	__size_of_ADC_Init	equ	__end_of_ADC_Init-_ADC_Init
  3438                           	
  3439  05E9                     _ADC_Init:	
  3440                           	opt	stack 10
  3441                           ; Regs used in _ADC_Init: [wreg+status,2+status,0+pclath+cstack]
  3442                           	line	26
  3443                           	
  3444  05E9                     l19317:	
  3445                           ;adc.c: 26: ADC_AllPin_Init();
  3446  05E9  3186  26D3  3185   	fcall	_ADC_AllPin_Init
  3447                           	line	28
  3448                           	
  3449  05EC                     l19319:	
  3450                           ;adc.c: 28: ADCON1 |= (0x01 << 7);
  3451  05EC  0021               	movlb 1	; select bank1
  3452  05ED  179E               	bsf	(158)^080h+(7/8),(7)&7	;volatile
  3453                           	line	29
  3454                           	
  3455  05EE                     l19321:	
  3456                           ;adc.c: 29: ADCON1 &= ~(0x07 << 4);
  3457  05EE  308F               	movlw	(08Fh)
  3458  05EF  0020               	movlb 0	; select bank0
  3459  05F0  00C7               	movwf	(??_ADC_Init+0)+0
  3460  05F1  0847               	movf	(??_ADC_Init+0)+0,w
  3461  05F2  0021               	movlb 1	; select bank1
  3462  05F3  059E               	andwf	(158)^080h,f	;volatile
  3463                           	line	31
  3464                           	
  3465  05F4                     l19323:	
  3466                           ;adc.c: 31: ADCON1 |= (0x00 << 4);
  3467  05F4  081E               	movf	(158)^080h,w	;volatile
  3468                           	line	32
  3469                           	
  3470  05F5                     l19325:	
  3471                           ;adc.c: 32: ADCON1 &= ~(0x03 << 0);
  3472  05F5  30FC               	movlw	(0FCh)
  3473  05F6  0020               	movlb 0	; select bank0
  3474  05F7  00C7               	movwf	(??_ADC_Init+0)+0
  3475  05F8  0847               	movf	(??_ADC_Init+0)+0,w
  3476  05F9  0021               	movlb 1	; select bank1
  3477  05FA  059E               	andwf	(158)^080h,f	;volatile
  3478                           	line	34
  3479                           	
  3480  05FB                     l19327:	
  3481                           ;adc.c: 34: ADCON0 |= 0x01;
  3482  05FB  141D               	bsf	(157)^080h+(0/8),(0)&7	;volatile
  3483                           	line	35
  3484                           	
  3485  05FC                     l13316:	
  3486  05FC  0008               	return
  3487                           	opt stack 0
  3488                           GLOBAL	__end_of_ADC_Init
  3489  05FD                     	__end_of_ADC_Init:
  3490 ;; =============== function _ADC_Init ends ============
  3491                           
  3492                           	signat	_ADC_Init,88
  3493                           	global	_internal_E2Write
  3494                           psect	text959,local,class=CODE,delta=2
  3495                           global __ptext959
  3496  0411                     __ptext959:
  3497                           
  3498 ;; *************** function _internal_E2Write *****************
  3499 ;; Defined at:
  3500 ;;		line 58 in file "internal_e2prom.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  addr            1    wreg     unsigned char 
  3503 ;;  dat             1    0[BANK0 ] PTR unsigned char 
  3504 ;;		 -> gE2promState(3), 
  3505 ;;  len             1    1[BANK0 ] unsigned char 
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;  addr            1    4[BANK0 ] unsigned char 
  3508 ;;  reg             1    3[BANK0 ] unsigned char 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;		None               void
  3511 ;; Registers used:
  3512 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMMON   BANK0   BANK1
  3518 ;;      Params:         0       2       0
  3519 ;;      Locals:         0       2       0
  3520 ;;      Temps:          0       1       0
  3521 ;;      Totals:         0       5       0
  3522 ;;Total ram usage:        5 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; Hardware stack levels required when called:    4
  3525 ;; This function calls:
  3526 ;;		Nothing
  3527 ;; This function is called by:
  3528 ;;		_internal_E2promInit
  3529 ;;		_e2SavePara
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           psect	text959
  3533                           	file	"internal_e2prom.c"
  3534                           	line	58
  3535                           	global	__size_of_internal_E2Write
  3536  003C                     	__size_of_internal_E2Write	equ	__end_of_internal_E2Write-_internal_E2Write
  3537                           	
  3538  0411                     _internal_E2Write:	
  3539                           	opt	stack 8
  3540                           ; Regs used in _internal_E2Write: [wreg+fsr1l-status,0]
  3541                           ;internal_E2Write@addr stored from wreg
  3542  0411  0020               	movlb 0	; select bank0
  3543  0412  00CA               	movwf	(internal_E2Write@addr)
  3544                           	line	59
  3545                           	
  3546  0413                     l19295:	
  3547                           ;internal_e2prom.c: 59: uint8_t reg = 0;
  3548  0413  01C9               	clrf	(internal_E2Write@reg)
  3549                           	line	60
  3550                           	
  3551  0414                     l19297:	
  3552                           ;internal_e2prom.c: 60: INTCON &= ~(0x01 << 7);
  3553  0414  307F               	movlw	(07Fh)
  3554  0415  00C8               	movwf	(??_internal_E2Write+0)+0
  3555  0416  0848               	movf	(??_internal_E2Write+0)+0,w
  3556  0417  058B               	andwf	(11),f	;volatile
  3557                           	line	61
  3558                           ;internal_e2prom.c: 61: while(len --)
  3559  0418  2C42               	goto	l19315
  3560                           	
  3561  0419                     l15967:	
  3562                           	line	63
  3563                           ;internal_e2prom.c: 62: {
  3564                           ;internal_e2prom.c: 63: while(WR == 1);
  3565  0419  2C1A               	goto	l15968
  3566                           	
  3567  041A                     l15969:	
  3568                           	
  3569  041A                     l15968:	
  3570  041A  0023               	movlb 3	; select bank3
  3571  041B  1895               	btfsc	(3241/8)^0180h,(3241)&7
  3572  041C  2C1E               	goto	u3171
  3573  041D  2C1F               	goto	u3170
  3574  041E                     u3171:
  3575  041E  2C1A               	goto	l15968
  3576  041F                     u3170:
  3577  041F  2C20               	goto	l19299
  3578                           	
  3579  0420                     l15970:	
  3580                           	line	65
  3581                           	
  3582  0420                     l19299:	
  3583                           ;internal_e2prom.c: 65: EEADRL = addr++;
  3584  0420  0020               	movlb 0	; select bank0
  3585  0421  084A               	movf	(internal_E2Write@addr),w
  3586  0422  0023               	movlb 3	; select bank3
  3587  0423  0091               	movwf	(401)^0180h	;volatile
  3588                           	
  3589  0424                     l19301:	
  3590  0424  3001               	movlw	(01h)
  3591  0425  0020               	movlb 0	; select bank0
  3592  0426  00C8               	movwf	(??_internal_E2Write+0)+0
  3593  0427  0848               	movf	(??_internal_E2Write+0)+0,w
  3594  0428  07CA               	addwf	(internal_E2Write@addr),f
  3595                           	line	66
  3596                           	
  3597  0429                     l19303:	
  3598                           ;internal_e2prom.c: 66: EEDATL = *dat++;
  3599  0429  0846               	movf	(internal_E2Write@dat),w
  3600  042A  0086               	movwf	fsr1l
  3601  042B  0187               	clrf fsr1h	
  3602                           	
  3603  042C  0801               	movf	indf1,w
  3604  042D  0023               	movlb 3	; select bank3
  3605  042E  0093               	movwf	(403)^0180h	;volatile
  3606                           	
  3607  042F                     l19305:	
  3608  042F  3001               	movlw	(01h)
  3609  0430  0020               	movlb 0	; select bank0
  3610  0431  00C8               	movwf	(??_internal_E2Write+0)+0
  3611  0432  0848               	movf	(??_internal_E2Write+0)+0,w
  3612  0433  07C6               	addwf	(internal_E2Write@dat),f
  3613                           	line	68
  3614                           	
  3615  0434                     l19307:	
  3616                           ;internal_e2prom.c: 68: WREN = 1;
  3617  0434  0023               	movlb 3	; select bank3
  3618  0435  1515               	bsf	(3242/8)^0180h,(3242)&7
  3619                           	line	69
  3620                           	
  3621  0436                     l19309:	
  3622                           ;internal_e2prom.c: 69: EECON2 = 0x55;
  3623  0436  3055               	movlw	(055h)
  3624  0437  0096               	movwf	(406)^0180h	;volatile
  3625                           	line	70
  3626                           	
  3627  0438                     l19311:	
  3628                           ;internal_e2prom.c: 70: EECON2 = 0xAA;
  3629  0438  30AA               	movlw	(0AAh)
  3630  0439  0096               	movwf	(406)^0180h	;volatile
  3631                           	line	72
  3632                           	
  3633  043A                     l19313:	
  3634                           ;internal_e2prom.c: 72: WR = 1;
  3635  043A  1495               	bsf	(3241/8)^0180h,(3241)&7
  3636                           	line	73
  3637                           ;internal_e2prom.c: 73: while(WR==1);
  3638  043B  2C3C               	goto	l15971
  3639                           	
  3640  043C                     l15972:	
  3641                           	
  3642  043C                     l15971:	
  3643  043C  1895               	btfsc	(3241/8)^0180h,(3241)&7
  3644  043D  2C3F               	goto	u3181
  3645  043E  2C40               	goto	u3180
  3646  043F                     u3181:
  3647  043F  2C3C               	goto	l15971
  3648  0440                     u3180:
  3649                           	
  3650  0440                     l15973:	
  3651                           	line	74
  3652                           ;internal_e2prom.c: 74: WREN = 0;
  3653  0440  1115               	bcf	(3242/8)^0180h,(3242)&7
  3654  0441  2C42               	goto	l19315
  3655                           	line	78
  3656                           	
  3657  0442                     l15966:	
  3658                           	line	61
  3659                           	
  3660  0442                     l19315:	
  3661  0442  3001               	movlw	low(01h)
  3662  0443  0020               	movlb 0	; select bank0
  3663  0444  02C7               	subwf	(internal_E2Write@len),f
  3664  0445  0847               	movf	((internal_E2Write@len)),w
  3665  0446  3AFF               	xorlw	0FFh&0ffh
  3666  0447  1D03               	skipz
  3667  0448  2C4A               	goto	u3191
  3668  0449  2C4B               	goto	u3190
  3669  044A                     u3191:
  3670  044A  2C1A               	goto	l15968
  3671  044B                     u3190:
  3672                           	
  3673  044B                     l15974:	
  3674                           	line	79
  3675                           ;internal_e2prom.c: 78: }
  3676                           ;internal_e2prom.c: 79: INTCON |= (0x01 << 7);
  3677  044B  178B               	bsf	(11)+(7/8),(7)&7	;volatile
  3678                           	line	81
  3679                           	
  3680  044C                     l15975:	
  3681  044C  0008               	return
  3682                           	opt stack 0
  3683                           GLOBAL	__end_of_internal_E2Write
  3684  044D                     	__end_of_internal_E2Write:
  3685 ;; =============== function _internal_E2Write ends ============
  3686                           
  3687                           	signat	_internal_E2Write,12408
  3688                           	global	_internal_E2Read
  3689                           psect	text960,local,class=CODE,delta=2
  3690                           global __ptext960
  3691  044D                     __ptext960:
  3692                           
  3693 ;; *************** function _internal_E2Read *****************
  3694 ;; Defined at:
  3695 ;;		line 40 in file "internal_e2prom.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;  addr            1    wreg     unsigned char 
  3698 ;;  dat             1    0[BANK0 ] PTR unsigned char 
  3699 ;;		 -> gE2promState(3), 
  3700 ;;  len             1    1[BANK0 ] unsigned char 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  addr            1    3[BANK0 ] unsigned char 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;		None               void
  3705 ;; Registers used:
  3706 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1
  3712 ;;      Params:         0       2       0
  3713 ;;      Locals:         0       1       0
  3714 ;;      Temps:          0       1       0
  3715 ;;      Totals:         0       4       0
  3716 ;;Total ram usage:        4 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    4
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_internal_E2promInit
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           psect	text960
  3726                           	file	"internal_e2prom.c"
  3727                           	line	40
  3728                           	global	__size_of_internal_E2Read
  3729  0034                     	__size_of_internal_E2Read	equ	__end_of_internal_E2Read-_internal_E2Read
  3730                           	
  3731  044D                     _internal_E2Read:	
  3732                           	opt	stack 10
  3733                           ; Regs used in _internal_E2Read: [wreg+fsr1l-status,0]
  3734                           ;internal_E2Read@addr stored from wreg
  3735  044D  0020               	movlb 0	; select bank0
  3736  044E  00C9               	movwf	(internal_E2Read@addr)
  3737                           	line	41
  3738                           	
  3739  044F                     l19279:	
  3740                           ;internal_e2prom.c: 41: while(len --)
  3741  044F  2C77               	goto	l19293
  3742                           	
  3743  0450                     l15955:	
  3744                           	line	43
  3745                           ;internal_e2prom.c: 42: {
  3746                           ;internal_e2prom.c: 43: while(RD == 1);
  3747  0450  2C51               	goto	l15956
  3748                           	
  3749  0451                     l15957:	
  3750                           	
  3751  0451                     l15956:	
  3752  0451  0023               	movlb 3	; select bank3
  3753  0452  1815               	btfsc	(3240/8)^0180h,(3240)&7
  3754  0453  2C55               	goto	u3141
  3755  0454  2C56               	goto	u3140
  3756  0455                     u3141:
  3757  0455  2C51               	goto	l15956
  3758  0456                     u3140:
  3759  0456  2C57               	goto	l19281
  3760                           	
  3761  0457                     l15958:	
  3762                           	line	45
  3763                           	
  3764  0457                     l19281:	
  3765                           ;internal_e2prom.c: 45: EEADRL = addr++;
  3766  0457  0020               	movlb 0	; select bank0
  3767  0458  0849               	movf	(internal_E2Read@addr),w
  3768  0459  0023               	movlb 3	; select bank3
  3769  045A  0091               	movwf	(401)^0180h	;volatile
  3770  045B  3001               	movlw	(01h)
  3771  045C  0020               	movlb 0	; select bank0
  3772  045D  00C8               	movwf	(??_internal_E2Read+0)+0
  3773  045E  0848               	movf	(??_internal_E2Read+0)+0,w
  3774  045F  07C9               	addwf	(internal_E2Read@addr),f
  3775                           	line	46
  3776                           	
  3777  0460                     l19283:	
  3778                           ;internal_e2prom.c: 46: EEPGD = 0;
  3779  0460  0023               	movlb 3	; select bank3
  3780  0461  1395               	bcf	(3247/8)^0180h,(3247)&7
  3781                           	line	47
  3782                           	
  3783  0462                     l19285:	
  3784                           ;internal_e2prom.c: 47: CFGS = 0;
  3785  0462  1315               	bcf	(3246/8)^0180h,(3246)&7
  3786                           	line	48
  3787                           	
  3788  0463                     l19287:	
  3789                           ;internal_e2prom.c: 48: RD = 1;
  3790  0463  1415               	bsf	(3240/8)^0180h,(3240)&7
  3791                           	line	49
  3792                           ;internal_e2prom.c: 49: while(RD==1);
  3793  0464  2C65               	goto	l15959
  3794                           	
  3795  0465                     l15960:	
  3796                           	
  3797  0465                     l15959:	
  3798  0465  1815               	btfsc	(3240/8)^0180h,(3240)&7
  3799  0466  2C68               	goto	u3151
  3800  0467  2C69               	goto	u3150
  3801  0468                     u3151:
  3802  0468  2C65               	goto	l15959
  3803  0469                     u3150:
  3804  0469  2C6A               	goto	l19289
  3805                           	
  3806  046A                     l15961:	
  3807                           	line	52
  3808                           	
  3809  046A                     l19289:	
  3810                           ;internal_e2prom.c: 52: *dat++ = EEDATL;
  3811  046A  0813               	movf	(403)^0180h,w	;volatile
  3812  046B  0020               	movlb 0	; select bank0
  3813  046C  00C8               	movwf	(??_internal_E2Read+0)+0
  3814  046D  0846               	movf	(internal_E2Read@dat),w
  3815  046E  0086               	movwf	fsr1l
  3816  046F  0187               	clrf fsr1h	
  3817                           	
  3818  0470  0848               	movf	(??_internal_E2Read+0)+0,w
  3819  0471  0081               	movwf	indf1
  3820                           	
  3821  0472                     l19291:	
  3822  0472  3001               	movlw	(01h)
  3823  0473  00C8               	movwf	(??_internal_E2Read+0)+0
  3824  0474  0848               	movf	(??_internal_E2Read+0)+0,w
  3825  0475  07C6               	addwf	(internal_E2Read@dat),f
  3826  0476  2C77               	goto	l19293
  3827                           	line	53
  3828                           	
  3829  0477                     l15954:	
  3830                           	line	41
  3831                           	
  3832  0477                     l19293:	
  3833  0477  3001               	movlw	low(01h)
  3834  0478  02C7               	subwf	(internal_E2Read@len),f
  3835  0479  0847               	movf	((internal_E2Read@len)),w
  3836  047A  3AFF               	xorlw	0FFh&0ffh
  3837  047B  1D03               	skipz
  3838  047C  2C7E               	goto	u3161
  3839  047D  2C7F               	goto	u3160
  3840  047E                     u3161:
  3841  047E  2C51               	goto	l15956
  3842  047F                     u3160:
  3843  047F  2C80               	goto	l15963
  3844                           	
  3845  0480                     l15962:	
  3846                           	line	55
  3847                           	
  3848  0480                     l15963:	
  3849  0480  0008               	return
  3850                           	opt stack 0
  3851                           GLOBAL	__end_of_internal_E2Read
  3852  0481                     	__end_of_internal_E2Read:
  3853 ;; =============== function _internal_E2Read ends ============
  3854                           
  3855                           	signat	_internal_E2Read,12408
  3856                           	global	_PowerSwitch_Delay
  3857                           psect	text961,local,class=CODE,delta=2
  3858                           global __ptext961
  3859  057C                     __ptext961:
  3860                           
  3861 ;; *************** function _PowerSwitch_Delay *****************
  3862 ;; Defined at:
  3863 ;;		line 16 in file "lowpower.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  delay           1    1[BANK0 ] unsigned char 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;		None               void
  3870 ;; Registers used:
  3871 ;;		wreg, status,2, status,0
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMMON   BANK0   BANK1
  3877 ;;      Params:         0       0       0
  3878 ;;      Locals:         0       1       0
  3879 ;;      Temps:          0       1       0
  3880 ;;      Totals:         0       2       0
  3881 ;;Total ram usage:        2 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    4
  3884 ;; This function calls:
  3885 ;;		Nothing
  3886 ;; This function is called by:
  3887 ;;		_PowerSwitch_Enable
  3888 ;;		_PowerSwitch_Disable
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           psect	text961
  3892                           	file	"lowpower.c"
  3893                           	line	16
  3894                           	global	__size_of_PowerSwitch_Delay
  3895  0017                     	__size_of_PowerSwitch_Delay	equ	__end_of_PowerSwitch_Delay-_PowerSwitch_Delay
  3896                           	
  3897  057C                     _PowerSwitch_Delay:	
  3898                           	opt	stack 7
  3899                           ; Regs used in _PowerSwitch_Delay: [wreg+status,2+status,0]
  3900                           	line	17
  3901                           	
  3902  057C                     l19247:	
  3903                           ;lowpower.c: 17: uint8_t delay = 0;
  3904  057C  0020               	movlb 0	; select bank0
  3905  057D  01C7               	clrf	(PowerSwitch_Delay@delay)
  3906                           	line	18
  3907                           ;lowpower.c: 18: for(delay=0;delay<20;delay++);
  3908  057E  01C7               	clrf	(PowerSwitch_Delay@delay)
  3909                           	
  3910  057F                     l19249:	
  3911  057F  3014               	movlw	(014h)
  3912  0580  0247               	subwf	(PowerSwitch_Delay@delay),w
  3913  0581  1C03               	skipc
  3914  0582  2D84               	goto	u3101
  3915  0583  2D85               	goto	u3100
  3916  0584                     u3101:
  3917  0584  2D87               	goto	l19253
  3918  0585                     u3100:
  3919  0585  2D92               	goto	l14630
  3920                           	
  3921  0586                     l19251:	
  3922  0586  2D92               	goto	l14630
  3923                           	
  3924  0587                     l14628:	
  3925                           	
  3926  0587                     l19253:	
  3927  0587  3001               	movlw	(01h)
  3928  0588  00C6               	movwf	(??_PowerSwitch_Delay+0)+0
  3929  0589  0846               	movf	(??_PowerSwitch_Delay+0)+0,w
  3930  058A  07C7               	addwf	(PowerSwitch_Delay@delay),f
  3931                           	
  3932  058B                     l19255:	
  3933  058B  3014               	movlw	(014h)
  3934  058C  0247               	subwf	(PowerSwitch_Delay@delay),w
  3935  058D  1C03               	skipc
  3936  058E  2D90               	goto	u3111
  3937  058F  2D91               	goto	u3110
  3938  0590                     u3111:
  3939  0590  2D87               	goto	l19253
  3940  0591                     u3110:
  3941  0591  2D92               	goto	l14630
  3942                           	
  3943  0592                     l14629:	
  3944                           	line	19
  3945                           	
  3946  0592                     l14630:	
  3947  0592  0008               	return
  3948                           	opt stack 0
  3949                           GLOBAL	__end_of_PowerSwitch_Delay
  3950  0593                     	__end_of_PowerSwitch_Delay:
  3951 ;; =============== function _PowerSwitch_Delay ends ============
  3952                           
  3953                           	signat	_PowerSwitch_Delay,88
  3954                           	global	_ADC_AllPin_Init
  3955                           psect	text962,local,class=CODE,delta=2
  3956                           global __ptext962
  3957  06D3                     __ptext962:
  3958                           
  3959 ;; *************** function _ADC_AllPin_Init *****************
  3960 ;; Defined at:
  3961 ;;		line 5 in file "adc.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;		None
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;		None
  3966 ;; Return value:  Size  Location     Type
  3967 ;;		None               void
  3968 ;; Registers used:
  3969 ;;		wreg, status,2, status,0
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMMON   BANK0   BANK1
  3975 ;;      Params:         0       0       0
  3976 ;;      Locals:         0       0       0
  3977 ;;      Temps:          0       1       0
  3978 ;;      Totals:         0       1       0
  3979 ;;Total ram usage:        1 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    4
  3982 ;; This function calls:
  3983 ;;		Nothing
  3984 ;; This function is called by:
  3985 ;;		_ADC_Init
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           psect	text962
  3989                           	file	"adc.c"
  3990                           	line	5
  3991                           	global	__size_of_ADC_AllPin_Init
  3992  000B                     	__size_of_ADC_AllPin_Init	equ	__end_of_ADC_AllPin_Init-_ADC_AllPin_Init
  3993                           	
  3994  06D3                     _ADC_AllPin_Init:	
  3995                           	opt	stack 10
  3996                           ; Regs used in _ADC_AllPin_Init: [wreg+status,2+status,0]
  3997                           	line	13
  3998                           	
  3999  06D3                     l19243:	
  4000                           ;adc.c: 13: TRISC |= (0x01 << 0);
  4001  06D3  0021               	movlb 1	; select bank1
  4002  06D4  140E               	bsf	(142)^080h+(0/8),(0)&7	;volatile
  4003                           	line	14
  4004                           ;adc.c: 14: ANSELC |= (0x01 << 0);
  4005  06D5  0023               	movlb 3	; select bank3
  4006  06D6  140E               	bsf	(398)^0180h+(0/8),(0)&7	;volatile
  4007                           	line	15
  4008                           	
  4009  06D7                     l19245:	
  4010                           ;adc.c: 15: WPUC &= ~(0x01 << 0);
  4011  06D7  30FE               	movlw	(0FEh)
  4012  06D8  0020               	movlb 0	; select bank0
  4013  06D9  00C6               	movwf	(??_ADC_AllPin_Init+0)+0
  4014  06DA  0846               	movf	(??_ADC_AllPin_Init+0)+0,w
  4015  06DB  0024               	movlb 4	; select bank4
  4016  06DC  058E               	andwf	(526)^0200h,f	;volatile
  4017                           	line	22
  4018                           	
  4019  06DD                     l13313:	
  4020  06DD  0008               	return
  4021                           	opt stack 0
  4022                           GLOBAL	__end_of_ADC_AllPin_Init
  4023  06DE                     	__end_of_ADC_AllPin_Init:
  4024 ;; =============== function _ADC_AllPin_Init ends ============
  4025                           
  4026                           	signat	_ADC_AllPin_Init,88
  4027                           	global	_KeyAction
  4028                           psect	text963,local,class=CODE,delta=2
  4029                           global __ptext963
  4030  05BF                     __ptext963:
  4031                           
  4032 ;; *************** function _KeyAction *****************
  4033 ;; Defined at:
  4034 ;;		line 53 in file "keyboard.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  KeyCode         1    wreg     unsigned char 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  KeyCode         1    0[BANK0 ] unsigned char 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;		None               void
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMMON   BANK0   BANK1
  4048 ;;      Params:         0       0       0
  4049 ;;      Locals:         0       1       0
  4050 ;;      Temps:          0       0       0
  4051 ;;      Totals:         0       1       0
  4052 ;;Total ram usage:        1 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    4
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		_KeyDriver
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           psect	text963
  4062                           	file	"keyboard.c"
  4063                           	line	53
  4064                           	global	__size_of_KeyAction
  4065  0015                     	__size_of_KeyAction	equ	__end_of_KeyAction-_KeyAction
  4066                           	
  4067  05BF                     _KeyAction:	
  4068                           	opt	stack 10
  4069                           ; Regs used in _KeyAction: [wreg+status,2+status,0]
  4070                           ;KeyAction@KeyCode stored from wreg
  4071  05BF  0020               	movlb 0	; select bank0
  4072  05C0  00C6               	movwf	(KeyAction@KeyCode)
  4073                           	line	54
  4074                           	
  4075  05C1                     l19219:	
  4076                           ;keyboard.c: 54: if(KeyCode == 0x00)
  4077  05C1  08C6               	movf	(KeyAction@KeyCode),f
  4078  05C2  1D03               	skipz
  4079  05C3  2DC5               	goto	u3061
  4080  05C4  2DC6               	goto	u3060
  4081  05C5                     u3061:
  4082  05C5  2DCA               	goto	l19223
  4083  05C6                     u3060:
  4084                           	line	56
  4085                           	
  4086  05C6                     l19221:	
  4087                           ;keyboard.c: 55: {
  4088                           ;keyboard.c: 56: AutoOrManualMode = ManualMode;
  4089  05C6  01B9               	clrf	(_AutoOrManualMode)
  4090  05C7  1403               	bsf	status,0
  4091  05C8  0DB9               	rlf	(_AutoOrManualMode),f
  4092                           	line	57
  4093                           ;keyboard.c: 57: }
  4094  05C9  2DD3               	goto	l8042
  4095                           	line	58
  4096                           	
  4097  05CA                     l8039:	
  4098                           	
  4099  05CA                     l19223:	
  4100                           ;keyboard.c: 58: else if(KeyCode == 0x01)
  4101  05CA  0846               	movf	(KeyAction@KeyCode),w
  4102  05CB  3A01               	xorlw	01h&0ffh
  4103  05CC  1D03               	skipz
  4104  05CD  2DCF               	goto	u3071
  4105  05CE  2DD0               	goto	u3070
  4106  05CF                     u3071:
  4107  05CF  2DD3               	goto	l8042
  4108  05D0                     u3070:
  4109                           	line	60
  4110                           	
  4111  05D0                     l19225:	
  4112                           ;keyboard.c: 59: {
  4113                           ;keyboard.c: 60: AutoOrManualMode = AutoMode;
  4114  05D0  01B9               	clrf	(_AutoOrManualMode)
  4115  05D1  2DD3               	goto	l8042
  4116                           	line	61
  4117                           	
  4118  05D2                     l8041:	
  4119  05D2  2DD3               	goto	l8042
  4120                           	line	72
  4121                           	
  4122  05D3                     l8040:	
  4123                           	
  4124  05D3                     l8042:	
  4125  05D3  0008               	return
  4126                           	opt stack 0
  4127                           GLOBAL	__end_of_KeyAction
  4128  05D4                     	__end_of_KeyAction:
  4129 ;; =============== function _KeyAction ends ============
  4130                           
  4131                           	signat	_KeyAction,4216
  4132                           	global	_Motor_Clockwise
  4133                           psect	text964,local,class=CODE,delta=2
  4134                           global __ptext964
  4135  06A0                     __ptext964:
  4136                           
  4137 ;; *************** function _Motor_Clockwise *****************
  4138 ;; Defined at:
  4139 ;;		line 49 in file "motor.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  tem             1    1[BANK0 ] unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;		None               void
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1
  4153 ;;      Params:         0       0       0
  4154 ;;      Locals:         0       1       0
  4155 ;;      Temps:          0       1       0
  4156 ;;      Totals:         0       2       0
  4157 ;;Total ram usage:        2 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    4
  4160 ;; This function calls:
  4161 ;;		Nothing
  4162 ;; This function is called by:
  4163 ;;		_ContrlSignal_Driver
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           psect	text964
  4167                           	file	"motor.c"
  4168                           	line	49
  4169                           	global	__size_of_Motor_Clockwise
  4170  000D                     	__size_of_Motor_Clockwise	equ	__end_of_Motor_Clockwise-_Motor_Clockwise
  4171                           	
  4172  06A0                     _Motor_Clockwise:	
  4173                           	opt	stack 9
  4174                           ; Regs used in _Motor_Clockwise: [wreg+status,2+status,0]
  4175                           	line	61
  4176                           	
  4177  06A0                     l19211:	
  4178                           ;motor.c: 60: uint8_t tem;
  4179                           ;motor.c: 61: tem = PORTC;
  4180  06A0  0020               	movlb 0	; select bank0
  4181  06A1  080E               	movf	(14),w	;volatile
  4182  06A2  00C6               	movwf	(??_Motor_Clockwise+0)+0
  4183  06A3  0846               	movf	(??_Motor_Clockwise+0)+0,w
  4184  06A4  00C7               	movwf	(Motor_Clockwise@tem)
  4185                           	line	62
  4186                           	
  4187  06A5                     l19213:	
  4188                           ;motor.c: 62: tem |= (0x01 << 2);
  4189  06A5  1547               	bsf	(Motor_Clockwise@tem)+(2/8),(2)&7
  4190                           	line	63
  4191                           	
  4192  06A6                     l19215:	
  4193                           ;motor.c: 63: tem &= ~(0x01 << 5);
  4194  06A6  30DF               	movlw	(0DFh)
  4195  06A7  00C6               	movwf	(??_Motor_Clockwise+0)+0
  4196  06A8  0846               	movf	(??_Motor_Clockwise+0)+0,w
  4197  06A9  05C7               	andwf	(Motor_Clockwise@tem),f
  4198                           	line	64
  4199                           	
  4200  06AA                     l19217:	
  4201                           ;motor.c: 64: PORTC = tem;
  4202  06AA  0847               	movf	(Motor_Clockwise@tem),w
  4203  06AB  008E               	movwf	(14)	;volatile
  4204                           	line	66
  4205                           	
  4206  06AC                     l6699:	
  4207  06AC  0008               	return
  4208                           	opt stack 0
  4209                           GLOBAL	__end_of_Motor_Clockwise
  4210  06AD                     	__end_of_Motor_Clockwise:
  4211 ;; =============== function _Motor_Clockwise ends ============
  4212                           
  4213                           	signat	_Motor_Clockwise,88
  4214                           	global	_Motor_Counterclockwise
  4215                           psect	text965,local,class=CODE,delta=2
  4216                           global __ptext965
  4217  06AD                     __ptext965:
  4218                           
  4219 ;; *************** function _Motor_Counterclockwise *****************
  4220 ;; Defined at:
  4221 ;;		line 32 in file "motor.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;		None
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;  tem             1    1[BANK0 ] unsigned char 
  4226 ;; Return value:  Size  Location     Type
  4227 ;;		None               void
  4228 ;; Registers used:
  4229 ;;		wreg, status,2, status,0
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMMON   BANK0   BANK1
  4235 ;;      Params:         0       0       0
  4236 ;;      Locals:         0       1       0
  4237 ;;      Temps:          0       1       0
  4238 ;;      Totals:         0       2       0
  4239 ;;Total ram usage:        2 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; Hardware stack levels required when called:    4
  4242 ;; This function calls:
  4243 ;;		Nothing
  4244 ;; This function is called by:
  4245 ;;		_ContrlSignal_Driver
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           psect	text965
  4249                           	file	"motor.c"
  4250                           	line	32
  4251                           	global	__size_of_Motor_Counterclockwise
  4252  000D                     	__size_of_Motor_Counterclockwise	equ	__end_of_Motor_Counterclockwise-_Motor_Countercloc
                                 kwise
  4253                           	
  4254  06AD                     _Motor_Counterclockwise:	
  4255                           	opt	stack 9
  4256                           ; Regs used in _Motor_Counterclockwise: [wreg+status,2+status,0]
  4257                           	line	41
  4258                           	
  4259  06AD                     l19203:	
  4260                           ;motor.c: 40: uint8_t tem;
  4261                           ;motor.c: 41: tem = PORTC;
  4262  06AD  0020               	movlb 0	; select bank0
  4263  06AE  080E               	movf	(14),w	;volatile
  4264  06AF  00C6               	movwf	(??_Motor_Counterclockwise+0)+0
  4265  06B0  0846               	movf	(??_Motor_Counterclockwise+0)+0,w
  4266  06B1  00C7               	movwf	(Motor_Counterclockwise@tem)
  4267                           	line	42
  4268                           	
  4269  06B2                     l19205:	
  4270                           ;motor.c: 42: tem &= ~(0x01 << 2);
  4271  06B2  30FB               	movlw	(0FBh)
  4272  06B3  00C6               	movwf	(??_Motor_Counterclockwise+0)+0
  4273  06B4  0846               	movf	(??_Motor_Counterclockwise+0)+0,w
  4274  06B5  05C7               	andwf	(Motor_Counterclockwise@tem),f
  4275                           	line	43
  4276                           	
  4277  06B6                     l19207:	
  4278                           ;motor.c: 43: tem |= (0x01 << 5);
  4279  06B6  16C7               	bsf	(Motor_Counterclockwise@tem)+(5/8),(5)&7
  4280                           	line	44
  4281                           	
  4282  06B7                     l19209:	
  4283                           ;motor.c: 44: PORTC = tem;
  4284  06B7  0847               	movf	(Motor_Counterclockwise@tem),w
  4285  06B8  008E               	movwf	(14)	;volatile
  4286                           	line	46
  4287                           	
  4288  06B9                     l6696:	
  4289  06B9  0008               	return
  4290                           	opt stack 0
  4291                           GLOBAL	__end_of_Motor_Counterclockwise
  4292  06BA                     	__end_of_Motor_Counterclockwise:
  4293 ;; =============== function _Motor_Counterclockwise ends ============
  4294                           
  4295                           	signat	_Motor_Counterclockwise,88
  4296                           	global	_Motor_GetStaus
  4297                           psect	text966,local,class=CODE,delta=2
  4298                           global __ptext966
  4299  06DE                     __ptext966:
  4300                           
  4301 ;; *************** function _Motor_GetStaus *****************
  4302 ;; Defined at:
  4303 ;;		line 97 in file "motor.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;		None
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      char 
  4310 ;; Registers used:
  4311 ;;		wreg
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1
  4317 ;;      Params:         0       0       0
  4318 ;;      Locals:         0       0       0
  4319 ;;      Temps:          0       0       0
  4320 ;;      Totals:         0       0       0
  4321 ;;Total ram usage:        0 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    4
  4324 ;; This function calls:
  4325 ;;		Nothing
  4326 ;; This function is called by:
  4327 ;;		_ContrlSignal_Driver
  4328 ;;		_Motor_Driver
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           psect	text966
  4332                           	file	"motor.c"
  4333                           	line	97
  4334                           	global	__size_of_Motor_GetStaus
  4335  000B                     	__size_of_Motor_GetStaus	equ	__end_of_Motor_GetStaus-_Motor_GetStaus
  4336                           	
  4337  06DE                     _Motor_GetStaus:	
  4338                           	opt	stack 9
  4339                           ; Regs used in _Motor_GetStaus: [wreg]
  4340                           	line	98
  4341                           	
  4342  06DE                     l19193:	
  4343                           ;motor.c: 98: if(RA4 == 0)
  4344  06DE  0020               	movlb 0	; select bank0
  4345  06DF  1A0C               	btfsc	(100/8),(100)&7
  4346  06E0  2EE2               	goto	u3051
  4347  06E1  2EE3               	goto	u3050
  4348  06E2                     u3051:
  4349  06E2  2EE6               	goto	l19199
  4350  06E3                     u3050:
  4351                           	line	100
  4352                           	
  4353  06E3                     l19195:	
  4354                           ;motor.c: 99: {
  4355                           ;motor.c: 100: return System_Closed;
  4356  06E3  3001               	movlw	(01h)
  4357  06E4  2EE8               	goto	l6709
  4358                           	
  4359  06E5                     l19197:	
  4360  06E5  2EE8               	goto	l6709
  4361                           	line	101
  4362                           	
  4363  06E6                     l6708:	
  4364                           	line	102
  4365                           	
  4366  06E6                     l19199:	
  4367                           ;motor.c: 101: }
  4368                           ;motor.c: 102: return System_Opened;
  4369  06E6  3000               	movlw	(0)
  4370  06E7  2EE8               	goto	l6709
  4371                           	
  4372  06E8                     l19201:	
  4373                           	line	103
  4374                           	
  4375  06E8                     l6709:	
  4376  06E8  0008               	return
  4377                           	opt stack 0
  4378                           GLOBAL	__end_of_Motor_GetStaus
  4379  06E9                     	__end_of_Motor_GetStaus:
  4380 ;; =============== function _Motor_GetStaus ends ============
  4381                           
  4382                           	signat	_Motor_GetStaus,89
  4383                           	global	_Uart_SendStr
  4384                           psect	text967,local,class=CODE,delta=2
  4385                           global __ptext967
  4386  0708                     __ptext967:
  4387                           
  4388 ;; *************** function _Uart_SendStr *****************
  4389 ;; Defined at:
  4390 ;;		line 56 in file "uart.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  str             1    wreg     PTR unsigned char 
  4393 ;;		 -> STR_10(17), STR_9(9), STR_8(22), STR_7(14), 
  4394 ;;		 -> STR_6(23), STR_5(15), STR_4(9), STR_3(9), 
  4395 ;;		 -> STR_2(14), STR_1(15), 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  str             1    0[COMMON] PTR unsigned char 
  4398 ;;		 -> STR_10(17), STR_9(9), STR_8(22), STR_7(14), 
  4399 ;;		 -> STR_6(23), STR_5(15), STR_4(9), STR_3(9), 
  4400 ;;		 -> STR_2(14), STR_1(15), 
  4401 ;; Return value:  Size  Location     Type
  4402 ;;		None               void
  4403 ;; Registers used:
  4404 ;;		wreg
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1
  4410 ;;      Params:         0       0       0
  4411 ;;      Locals:         0       0       0
  4412 ;;      Temps:          0       0       0
  4413 ;;      Totals:         0       0       0
  4414 ;;Total ram usage:        0 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    4
  4417 ;; This function calls:
  4418 ;;		Nothing
  4419 ;; This function is called by:
  4420 ;;		_ContrlSignal_Driver
  4421 ;;		_Motor_Driver
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           psect	text967
  4425                           	file	"uart.c"
  4426                           	line	56
  4427                           	global	__size_of_Uart_SendStr
  4428  0001                     	__size_of_Uart_SendStr	equ	__end_of_Uart_SendStr-_Uart_SendStr
  4429                           	
  4430  0708                     _Uart_SendStr:	
  4431                           	opt	stack 9
  4432                           ; Regs used in _Uart_SendStr: [wreg]
  4433                           	line	64
  4434                           	
  4435  0708                     l4007:	
  4436  0708  0008               	return
  4437                           	opt stack 0
  4438                           GLOBAL	__end_of_Uart_SendStr
  4439  0709                     	__end_of_Uart_SendStr:
  4440 ;; =============== function _Uart_SendStr ends ============
  4441                           
  4442                           	signat	_Uart_SendStr,4216
  4443                           	global	_Motor_LowPower
  4444                           psect	text968,local,class=CODE,delta=2
  4445                           global __ptext968
  4446  0665                     __ptext968:
  4447                           
  4448 ;; *************** function _Motor_LowPower *****************
  4449 ;; Defined at:
  4450 ;;		line 86 in file "motor.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  tem             1    1[BANK0 ] unsigned char 
  4455 ;; Return value:  Size  Location     Type
  4456 ;;		None               void
  4457 ;; Registers used:
  4458 ;;		wreg, status,2, status,0
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1
  4464 ;;      Params:         0       0       0
  4465 ;;      Locals:         0       1       0
  4466 ;;      Temps:          0       1       0
  4467 ;;      Totals:         0       2       0
  4468 ;;Total ram usage:        2 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    4
  4471 ;; This function calls:
  4472 ;;		Nothing
  4473 ;; This function is called by:
  4474 ;;		_main
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           psect	text968
  4478                           	file	"motor.c"
  4479                           	line	86
  4480                           	global	__size_of_Motor_LowPower
  4481  0010                     	__size_of_Motor_LowPower	equ	__end_of_Motor_LowPower-_Motor_LowPower
  4482                           	
  4483  0665                     _Motor_LowPower:	
  4484                           	opt	stack 11
  4485                           ; Regs used in _Motor_LowPower: [wreg+status,2+status,0]
  4486                           	line	88
  4487                           	
  4488  0665                     l19105:	
  4489                           ;motor.c: 87: uint8_t tem;
  4490                           ;motor.c: 88: tem = PORTC;
  4491  0665  0020               	movlb 0	; select bank0
  4492  0666  080E               	movf	(14),w	;volatile
  4493  0667  00C6               	movwf	(??_Motor_LowPower+0)+0
  4494  0668  0846               	movf	(??_Motor_LowPower+0)+0,w
  4495  0669  00C7               	movwf	(Motor_LowPower@tem)
  4496                           	line	89
  4497                           	
  4498  066A                     l19107:	
  4499                           ;motor.c: 89: tem &= ~(0x01 << 2);
  4500  066A  30FB               	movlw	(0FBh)
  4501  066B  00C6               	movwf	(??_Motor_LowPower+0)+0
  4502  066C  0846               	movf	(??_Motor_LowPower+0)+0,w
  4503  066D  05C7               	andwf	(Motor_LowPower@tem),f
  4504                           	line	90
  4505                           	
  4506  066E                     l19109:	
  4507                           ;motor.c: 90: tem &= ~(0x01 << 5);
  4508  066E  30DF               	movlw	(0DFh)
  4509  066F  00C6               	movwf	(??_Motor_LowPower+0)+0
  4510  0670  0846               	movf	(??_Motor_LowPower+0)+0,w
  4511  0671  05C7               	andwf	(Motor_LowPower@tem),f
  4512                           	line	91
  4513                           ;motor.c: 91: PORTC = tem;
  4514  0672  0847               	movf	(Motor_LowPower@tem),w
  4515  0673  008E               	movwf	(14)	;volatile
  4516                           	line	92
  4517                           	
  4518  0674                     l6705:	
  4519  0674  0008               	return
  4520                           	opt stack 0
  4521                           GLOBAL	__end_of_Motor_LowPower
  4522  0675                     	__end_of_Motor_LowPower:
  4523 ;; =============== function _Motor_LowPower ends ============
  4524                           
  4525                           	signat	_Motor_LowPower,88
  4526                           	global	_WatchDog_Reset
  4527                           psect	text969,local,class=CODE,delta=2
  4528                           global __ptext969
  4529  06F6                     __ptext969:
  4530                           
  4531 ;; *************** function _WatchDog_Reset *****************
  4532 ;; Defined at:
  4533 ;;		line 97 in file "system_init.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;		None
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;		None               void
  4540 ;; Registers used:
  4541 ;;		status,2
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMMON   BANK0   BANK1
  4547 ;;      Params:         0       0       0
  4548 ;;      Locals:         0       0       0
  4549 ;;      Temps:          0       0       0
  4550 ;;      Totals:         0       0       0
  4551 ;;Total ram usage:        0 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    4
  4554 ;; This function calls:
  4555 ;;		Nothing
  4556 ;; This function is called by:
  4557 ;;		_main
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           psect	text969
  4561                           	file	"system_init.c"
  4562                           	line	97
  4563                           	global	__size_of_WatchDog_Reset
  4564  0006                     	__size_of_WatchDog_Reset	equ	__end_of_WatchDog_Reset-_WatchDog_Reset
  4565                           	
  4566  06F6                     _WatchDog_Reset:	
  4567                           	opt	stack 11
  4568                           ; Regs used in _WatchDog_Reset: [status,2]
  4569                           	line	98
  4570                           	
  4571  06F6                     l19101:	
  4572                           ;system_init.c: 98: WDTCON = 0;
  4573  06F6  0021               	movlb 1	; select bank1
  4574  06F7  0197               	clrf	(151)^080h	;volatile
  4575                           	line	99
  4576                           	
  4577  06F8                     l19103:	
  4578                           ;system_init.c: 99: WDTCON |= 0x01;
  4579  06F8  1417               	bsf	(151)^080h+(0/8),(0)&7	;volatile
  4580  06F9  2EFA               	goto	l9365
  4581                           	line	100
  4582                           ;system_init.c: 100: while(1);
  4583                           	
  4584  06FA                     l9364:	
  4585                           	
  4586  06FA                     l9365:	
  4587  06FA  2EFA               	goto	l9365
  4588                           	
  4589  06FB                     l9366:	
  4590                           	line	101
  4591                           	
  4592  06FB                     l9367:	
  4593  06FB  0008               	return
  4594                           	opt stack 0
  4595                           GLOBAL	__end_of_WatchDog_Reset
  4596  06FC                     	__end_of_WatchDog_Reset:
  4597 ;; =============== function _WatchDog_Reset ends ============
  4598                           
  4599                           	signat	_WatchDog_Reset,88
  4600                           	global	_Feed_WatchDog
  4601                           psect	text970,local,class=CODE,delta=2
  4602                           global __ptext970
  4603  0706                     __ptext970:
  4604                           
  4605 ;; *************** function _Feed_WatchDog *****************
  4606 ;; Defined at:
  4607 ;;		line 104 in file "system_init.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;		None
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;		None
  4612 ;; Return value:  Size  Location     Type
  4613 ;;		None               void
  4614 ;; Registers used:
  4615 ;;		None
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMMON   BANK0   BANK1
  4621 ;;      Params:         0       0       0
  4622 ;;      Locals:         0       0       0
  4623 ;;      Temps:          0       0       0
  4624 ;;      Totals:         0       0       0
  4625 ;;Total ram usage:        0 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    4
  4628 ;; This function calls:
  4629 ;;		Nothing
  4630 ;; This function is called by:
  4631 ;;		_main
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           psect	text970
  4635                           	file	"system_init.c"
  4636                           	line	104
  4637                           	global	__size_of_Feed_WatchDog
  4638  0002                     	__size_of_Feed_WatchDog	equ	__end_of_Feed_WatchDog-_Feed_WatchDog
  4639                           	
  4640  0706                     _Feed_WatchDog:	
  4641                           	opt	stack 11
  4642                           ; Regs used in _Feed_WatchDog: []
  4643                           	line	105
  4644                           	
  4645  0706                     l19099:	
  4646                           # 105 "system_init.c"
  4647  0706  0064               clrwdt ;#
  4648                           psect	text970
  4649                           	line	106
  4650                           	
  4651  0707                     l9370:	
  4652  0707  0008               	return
  4653                           	opt stack 0
  4654                           GLOBAL	__end_of_Feed_WatchDog
  4655  0708                     	__end_of_Feed_WatchDog:
  4656 ;; =============== function _Feed_WatchDog ends ============
  4657                           
  4658                           	signat	_Feed_WatchDog,88
  4659                           	global	_WatchDog_Init
  4660                           psect	text971,local,class=CODE,delta=2
  4661                           global __ptext971
  4662  06FC                     __ptext971:
  4663                           
  4664 ;; *************** function _WatchDog_Init *****************
  4665 ;; Defined at:
  4666 ;;		line 92 in file "system_init.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;		None
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;		None               void
  4673 ;; Registers used:
  4674 ;;		wreg
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMMON   BANK0   BANK1
  4680 ;;      Params:         0       0       0
  4681 ;;      Locals:         0       0       0
  4682 ;;      Temps:          0       0       0
  4683 ;;      Totals:         0       0       0
  4684 ;;Total ram usage:        0 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:    4
  4687 ;; This function calls:
  4688 ;;		Nothing
  4689 ;; This function is called by:
  4690 ;;		_main
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           psect	text971
  4694                           	file	"system_init.c"
  4695                           	line	92
  4696                           	global	__size_of_WatchDog_Init
  4697  0004                     	__size_of_WatchDog_Init	equ	__end_of_WatchDog_Init-_WatchDog_Init
  4698                           	
  4699  06FC                     _WatchDog_Init:	
  4700                           	opt	stack 11
  4701                           ; Regs used in _WatchDog_Init: [wreg]
  4702                           	line	93
  4703                           	
  4704  06FC                     l19097:	
  4705                           ;system_init.c: 93: WDTCON = 0x1b;
  4706  06FC  301B               	movlw	(01Bh)
  4707  06FD  0021               	movlb 1	; select bank1
  4708  06FE  0097               	movwf	(151)^080h	;volatile
  4709                           	line	94
  4710                           	
  4711  06FF                     l9361:	
  4712  06FF  0008               	return
  4713                           	opt stack 0
  4714                           GLOBAL	__end_of_WatchDog_Init
  4715  0700                     	__end_of_WatchDog_Init:
  4716 ;; =============== function _WatchDog_Init ends ============
  4717                           
  4718                           	signat	_WatchDog_Init,88
  4719                           	global	_Delay_MS
  4720                           psect	text972,local,class=CODE,delta=2
  4721                           global __ptext972
  4722  0621                     __ptext972:
  4723                           
  4724 ;; *************** function _Delay_MS *****************
  4725 ;; Defined at:
  4726 ;;		line 6 in file "delay.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  ms              2    0[BANK0 ] unsigned int 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;		None
  4731 ;; Return value:  Size  Location     Type
  4732 ;;		None               void
  4733 ;; Registers used:
  4734 ;;		wreg, status,2, status,0
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMMON   BANK0   BANK1
  4740 ;;      Params:         0       2       0
  4741 ;;      Locals:         0       0       0
  4742 ;;      Temps:          0       0       0
  4743 ;;      Totals:         0       2       0
  4744 ;;Total ram usage:        2 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    4
  4747 ;; This function calls:
  4748 ;;		Nothing
  4749 ;; This function is called by:
  4750 ;;		_main
  4751 ;;		_ContrlSignal_Driver
  4752 ;;		_Motor_Driver
  4753 ;;		_Motor_Stop
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           psect	text972
  4757                           	file	"delay.c"
  4758                           	line	6
  4759                           	global	__size_of_Delay_MS
  4760  0011                     	__size_of_Delay_MS	equ	__end_of_Delay_MS-_Delay_MS
  4761                           	
  4762  0621                     _Delay_MS:	
  4763                           	opt	stack 8
  4764                           ; Regs used in _Delay_MS: [wreg+status,2+status,0]
  4765                           	line	7
  4766                           	
  4767  0621                     l19093:	
  4768                           ;delay.c: 7: delay_time = ms;
  4769  0621  0020               	movlb 0	; select bank0
  4770  0622  0847               	movf	(Delay_MS@ms+1),w
  4771  0623  01B1               	clrf	(_delay_time+1)
  4772  0624  07B1               	addwf	(_delay_time+1)
  4773  0625  0846               	movf	(Delay_MS@ms),w
  4774  0626  01B0               	clrf	(_delay_time)
  4775  0627  07B0               	addwf	(_delay_time)
  4776                           
  4777                           	line	8
  4778                           ;delay.c: 8: while(delay_time != 0);
  4779  0628  2E2A               	goto	l19095
  4780                           	
  4781  0629                     l10675:	
  4782  0629  2E2A               	goto	l19095
  4783                           	
  4784  062A                     l10674:	
  4785                           	
  4786  062A                     l19095:	
  4787  062A  0831               	movf	((_delay_time+1)),w
  4788  062B  0430               	iorwf	((_delay_time)),w
  4789  062C  1D03               	skipz
  4790  062D  2E2F               	goto	u2871
  4791  062E  2E30               	goto	u2870
  4792  062F                     u2871:
  4793  062F  2E2A               	goto	l19095
  4794  0630                     u2870:
  4795  0630  2E31               	goto	l10677
  4796                           	
  4797  0631                     l10676:	
  4798                           	line	9
  4799                           	
  4800  0631                     l10677:	
  4801  0631  0008               	return
  4802                           	opt stack 0
  4803                           GLOBAL	__end_of_Delay_MS
  4804  0632                     	__end_of_Delay_MS:
  4805 ;; =============== function _Delay_MS ends ============
  4806                           
  4807                           	signat	_Delay_MS,4216
  4808                           	global	_Motor_Init
  4809                           psect	text973,local,class=CODE,delta=2
  4810                           global __ptext973
  4811  04B2                     __ptext973:
  4812                           
  4813 ;; *************** function _Motor_Init *****************
  4814 ;; Defined at:
  4815 ;;		line 14 in file "motor.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;		None
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;		None
  4820 ;; Return value:  Size  Location     Type
  4821 ;;		None               void
  4822 ;; Registers used:
  4823 ;;		wreg, status,2, status,0
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMMON   BANK0   BANK1
  4829 ;;      Params:         0       0       0
  4830 ;;      Locals:         0       0       0
  4831 ;;      Temps:          0       1       0
  4832 ;;      Totals:         0       1       0
  4833 ;;Total ram usage:        1 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    4
  4836 ;; This function calls:
  4837 ;;		Nothing
  4838 ;; This function is called by:
  4839 ;;		_main
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           psect	text973
  4843                           	file	"motor.c"
  4844                           	line	14
  4845                           	global	__size_of_Motor_Init
  4846  002E                     	__size_of_Motor_Init	equ	__end_of_Motor_Init-_Motor_Init
  4847                           	
  4848  04B2                     _Motor_Init:	
  4849                           	opt	stack 11
  4850                           ; Regs used in _Motor_Init: [wreg+status,2+status,0]
  4851                           	line	17
  4852                           	
  4853  04B2                     l19085:	
  4854                           ;motor.c: 17: PORTC &= ~((0x01 << 2) | (0x01 << 5));
  4855  04B2  30DB               	movlw	(0DBh)
  4856  04B3  0020               	movlb 0	; select bank0
  4857  04B4  00C6               	movwf	(??_Motor_Init+0)+0
  4858  04B5  0846               	movf	(??_Motor_Init+0)+0,w
  4859  04B6  058E               	andwf	(14),f	;volatile
  4860                           	line	18
  4861                           ;motor.c: 18: TRISC &= ~((0x01 << 2) | (0x01 << 5));
  4862  04B7  30DB               	movlw	(0DBh)
  4863  04B8  00C6               	movwf	(??_Motor_Init+0)+0
  4864  04B9  0846               	movf	(??_Motor_Init+0)+0,w
  4865  04BA  0021               	movlb 1	; select bank1
  4866  04BB  058E               	andwf	(142)^080h,f	;volatile
  4867                           	line	19
  4868                           ;motor.c: 19: ANSELC &= ~(0x01 << 2);
  4869  04BC  30FB               	movlw	(0FBh)
  4870  04BD  0020               	movlb 0	; select bank0
  4871  04BE  00C6               	movwf	(??_Motor_Init+0)+0
  4872  04BF  0846               	movf	(??_Motor_Init+0)+0,w
  4873  04C0  0023               	movlb 3	; select bank3
  4874  04C1  058E               	andwf	(398)^0180h,f	;volatile
  4875                           	line	20
  4876                           ;motor.c: 20: ANSELC &= ~(0x01 << 5);
  4877  04C2  30DF               	movlw	(0DFh)
  4878  04C3  0020               	movlb 0	; select bank0
  4879  04C4  00C6               	movwf	(??_Motor_Init+0)+0
  4880  04C5  0846               	movf	(??_Motor_Init+0)+0,w
  4881  04C6  0023               	movlb 3	; select bank3
  4882  04C7  058E               	andwf	(398)^0180h,f	;volatile
  4883                           	line	21
  4884                           ;motor.c: 21: WPUC &= ~(0x01 << 2);
  4885  04C8  30FB               	movlw	(0FBh)
  4886  04C9  0020               	movlb 0	; select bank0
  4887  04CA  00C6               	movwf	(??_Motor_Init+0)+0
  4888  04CB  0846               	movf	(??_Motor_Init+0)+0,w
  4889  04CC  0024               	movlb 4	; select bank4
  4890  04CD  058E               	andwf	(526)^0200h,f	;volatile
  4891                           	line	22
  4892                           ;motor.c: 22: WPUC &= ~(0x01 << 5);
  4893  04CE  30DF               	movlw	(0DFh)
  4894  04CF  0020               	movlb 0	; select bank0
  4895  04D0  00C6               	movwf	(??_Motor_Init+0)+0
  4896  04D1  0846               	movf	(??_Motor_Init+0)+0,w
  4897  04D2  0024               	movlb 4	; select bank4
  4898  04D3  058E               	andwf	(526)^0200h,f	;volatile
  4899                           	line	25
  4900                           	
  4901  04D4                     l19087:	
  4902                           ;motor.c: 25: TRISA |= 0x01 << 4;
  4903  04D4  0021               	movlb 1	; select bank1
  4904  04D5  160C               	bsf	(140)^080h+(4/8),(4)&7	;volatile
  4905                           	line	26
  4906                           	
  4907  04D6                     l19089:	
  4908                           ;motor.c: 26: PORTA |= 0x01 << 4;
  4909  04D6  0020               	movlb 0	; select bank0
  4910  04D7  160C               	bsf	(12)+(4/8),(4)&7	;volatile
  4911                           	line	27
  4912                           ;motor.c: 27: ANSELA &= ~(0x01 << 4);
  4913  04D8  30EF               	movlw	(0EFh)
  4914  04D9  00C6               	movwf	(??_Motor_Init+0)+0
  4915  04DA  0846               	movf	(??_Motor_Init+0)+0,w
  4916  04DB  0023               	movlb 3	; select bank3
  4917  04DC  058C               	andwf	(396)^0180h,f	;volatile
  4918                           	line	28
  4919                           	
  4920  04DD                     l19091:	
  4921                           ;motor.c: 28: WPUA |= 0x01 << 4;
  4922  04DD  0024               	movlb 4	; select bank4
  4923  04DE  160C               	bsf	(524)^0200h+(4/8),(4)&7	;volatile
  4924                           	line	29
  4925                           	
  4926  04DF                     l6693:	
  4927  04DF  0008               	return
  4928                           	opt stack 0
  4929                           GLOBAL	__end_of_Motor_Init
  4930  04E0                     	__end_of_Motor_Init:
  4931 ;; =============== function _Motor_Init ends ============
  4932                           
  4933                           	signat	_Motor_Init,88
  4934                           	global	_PowerSwitch_Init
  4935                           psect	text974,local,class=CODE,delta=2
  4936                           global __ptext974
  4937  0632                     __ptext974:
  4938                           
  4939 ;; *************** function _PowerSwitch_Init *****************
  4940 ;; Defined at:
  4941 ;;		line 10 in file "lowpower.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;		None
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;		None
  4946 ;; Return value:  Size  Location     Type
  4947 ;;		None               void
  4948 ;; Registers used:
  4949 ;;		wreg, status,2, status,0
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMMON   BANK0   BANK1
  4955 ;;      Params:         0       0       0
  4956 ;;      Locals:         0       0       0
  4957 ;;      Temps:          0       1       0
  4958 ;;      Totals:         0       1       0
  4959 ;;Total ram usage:        1 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:    4
  4962 ;; This function calls:
  4963 ;;		Nothing
  4964 ;; This function is called by:
  4965 ;;		_main
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           psect	text974
  4969                           	file	"lowpower.c"
  4970                           	line	10
  4971                           	global	__size_of_PowerSwitch_Init
  4972  0011                     	__size_of_PowerSwitch_Init	equ	__end_of_PowerSwitch_Init-_PowerSwitch_Init
  4973                           	
  4974  0632                     _PowerSwitch_Init:	
  4975                           	opt	stack 11
  4976                           ; Regs used in _PowerSwitch_Init: [wreg+status,2+status,0]
  4977                           	line	11
  4978                           	
  4979  0632                     l19083:	
  4980                           ;lowpower.c: 11: TRISC &= ~(0x01 << 3);
  4981  0632  30F7               	movlw	(0F7h)
  4982  0633  0020               	movlb 0	; select bank0
  4983  0634  00C6               	movwf	(??_PowerSwitch_Init+0)+0
  4984  0635  0846               	movf	(??_PowerSwitch_Init+0)+0,w
  4985  0636  0021               	movlb 1	; select bank1
  4986  0637  058E               	andwf	(142)^080h,f	;volatile
  4987                           	line	12
  4988                           ;lowpower.c: 12: PORTC &= ~( 0x01 << 3);
  4989  0638  30F7               	movlw	(0F7h)
  4990  0639  0020               	movlb 0	; select bank0
  4991  063A  00C6               	movwf	(??_PowerSwitch_Init+0)+0
  4992  063B  0846               	movf	(??_PowerSwitch_Init+0)+0,w
  4993  063C  058E               	andwf	(14),f	;volatile
  4994                           	line	13
  4995                           ;lowpower.c: 13: ANSELC &= ~(0x01 << 3);
  4996  063D  30F7               	movlw	(0F7h)
  4997  063E  00C6               	movwf	(??_PowerSwitch_Init+0)+0
  4998  063F  0846               	movf	(??_PowerSwitch_Init+0)+0,w
  4999  0640  0023               	movlb 3	; select bank3
  5000  0641  058E               	andwf	(398)^0180h,f	;volatile
  5001                           	line	14
  5002                           	
  5003  0642                     l14625:	
  5004  0642  0008               	return
  5005                           	opt stack 0
  5006                           GLOBAL	__end_of_PowerSwitch_Init
  5007  0643                     	__end_of_PowerSwitch_Init:
  5008 ;; =============== function _PowerSwitch_Init ends ============
  5009                           
  5010                           	signat	_PowerSwitch_Init,88
  5011                           	global	_KeyInit
  5012                           psect	text975,local,class=CODE,delta=2
  5013                           global __ptext975
  5014  06C7                     __ptext975:
  5015                           
  5016 ;; *************** function _KeyInit *****************
  5017 ;; Defined at:
  5018 ;;		line 9 in file "keyboard.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;		None
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;		None
  5023 ;; Return value:  Size  Location     Type
  5024 ;;		None               void
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, status,0
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1
  5032 ;;      Params:         0       0       0
  5033 ;;      Locals:         0       0       0
  5034 ;;      Temps:          0       1       0
  5035 ;;      Totals:         0       1       0
  5036 ;;Total ram usage:        1 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    4
  5039 ;; This function calls:
  5040 ;;		Nothing
  5041 ;; This function is called by:
  5042 ;;		_main
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           psect	text975
  5046                           	file	"keyboard.c"
  5047                           	line	9
  5048                           	global	__size_of_KeyInit
  5049  000C                     	__size_of_KeyInit	equ	__end_of_KeyInit-_KeyInit
  5050                           	
  5051  06C7                     _KeyInit:	
  5052                           	opt	stack 11
  5053                           ; Regs used in _KeyInit: [wreg+status,2+status,0]
  5054                           	line	10
  5055                           	
  5056  06C7                     l19077:	
  5057                           ;keyboard.c: 10: TRISA |= 0x01 << 5;
  5058  06C7  0021               	movlb 1	; select bank1
  5059  06C8  168C               	bsf	(140)^080h+(5/8),(5)&7	;volatile
  5060                           	line	11
  5061                           ;keyboard.c: 11: PORTA |= 0x01 << 5;
  5062  06C9  0020               	movlb 0	; select bank0
  5063  06CA  168C               	bsf	(12)+(5/8),(5)&7	;volatile
  5064                           	line	12
  5065                           	
  5066  06CB                     l19079:	
  5067                           ;keyboard.c: 12: ANSELA &= ~(0x01 << 5);
  5068  06CB  30DF               	movlw	(0DFh)
  5069  06CC  00C6               	movwf	(??_KeyInit+0)+0
  5070  06CD  0846               	movf	(??_KeyInit+0)+0,w
  5071  06CE  0023               	movlb 3	; select bank3
  5072  06CF  058C               	andwf	(396)^0180h,f	;volatile
  5073                           	line	13
  5074                           	
  5075  06D0                     l19081:	
  5076                           ;keyboard.c: 13: WPUA |= 0x01 << 5;
  5077  06D0  0024               	movlb 4	; select bank4
  5078  06D1  168C               	bsf	(524)^0200h+(5/8),(5)&7	;volatile
  5079                           	line	14
  5080                           	
  5081  06D2                     l8020:	
  5082  06D2  0008               	return
  5083                           	opt stack 0
  5084                           GLOBAL	__end_of_KeyInit
  5085  06D3                     	__end_of_KeyInit:
  5086 ;; =============== function _KeyInit ends ============
  5087                           
  5088                           	signat	_KeyInit,88
  5089                           	global	_PIC_EnableInterrupt
  5090                           psect	text976,local,class=CODE,delta=2
  5091                           global __ptext976
  5092  0703                     __ptext976:
  5093                           
  5094 ;; *************** function _PIC_EnableInterrupt *****************
  5095 ;; Defined at:
  5096 ;;		line 11 in file "interrupt.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;		None
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;		None
  5101 ;; Return value:  Size  Location     Type
  5102 ;;		None               void
  5103 ;; Registers used:
  5104 ;;		None
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMMON   BANK0   BANK1
  5110 ;;      Params:         0       0       0
  5111 ;;      Locals:         0       0       0
  5112 ;;      Temps:          0       0       0
  5113 ;;      Totals:         0       0       0
  5114 ;;Total ram usage:        0 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    4
  5117 ;; This function calls:
  5118 ;;		Nothing
  5119 ;; This function is called by:
  5120 ;;		_main
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           psect	text976
  5124                           	file	"interrupt.c"
  5125                           	line	11
  5126                           	global	__size_of_PIC_EnableInterrupt
  5127  0003                     	__size_of_PIC_EnableInterrupt	equ	__end_of_PIC_EnableInterrupt-_PIC_EnableInterrupt
  5128                           	
  5129  0703                     _PIC_EnableInterrupt:	
  5130                           	opt	stack 11
  5131                           ; Regs used in _PIC_EnableInterrupt: []
  5132                           	line	13
  5133                           	
  5134  0703                     l19075:	
  5135                           ;interrupt.c: 13: INTCON |= (0x01 << 7);
  5136  0703  178B               	bsf	(11)+(7/8),(7)&7	;volatile
  5137                           	line	14
  5138                           ;interrupt.c: 14: INTCON |= (0x01 << 6);
  5139  0704  170B               	bsf	(11)+(6/8),(6)&7	;volatile
  5140                           	line	15
  5141                           	
  5142  0705                     l2687:	
  5143  0705  0008               	return
  5144                           	opt stack 0
  5145                           GLOBAL	__end_of_PIC_EnableInterrupt
  5146  0706                     	__end_of_PIC_EnableInterrupt:
  5147 ;; =============== function _PIC_EnableInterrupt ends ============
  5148                           
  5149                           	signat	_PIC_EnableInterrupt,88
  5150                           	global	_PIC_CofnigTimer0
  5151                           psect	text977,local,class=CODE,delta=2
  5152                           global __ptext977
  5153  0643                     __ptext977:
  5154                           
  5155 ;; *************** function _PIC_CofnigTimer0 *****************
  5156 ;; Defined at:
  5157 ;;		line 108 in file "system_init.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;		None
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;		None
  5162 ;; Return value:  Size  Location     Type
  5163 ;;		None               void
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMMON   BANK0   BANK1
  5171 ;;      Params:         0       0       0
  5172 ;;      Locals:         0       0       0
  5173 ;;      Temps:          0       1       0
  5174 ;;      Totals:         0       1       0
  5175 ;;Total ram usage:        1 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    4
  5178 ;; This function calls:
  5179 ;;		Nothing
  5180 ;; This function is called by:
  5181 ;;		_main
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           psect	text977
  5185                           	file	"system_init.c"
  5186                           	line	108
  5187                           	global	__size_of_PIC_CofnigTimer0
  5188  0011                     	__size_of_PIC_CofnigTimer0	equ	__end_of_PIC_CofnigTimer0-_PIC_CofnigTimer0
  5189                           	
  5190  0643                     _PIC_CofnigTimer0:	
  5191                           	opt	stack 11
  5192                           ; Regs used in _PIC_CofnigTimer0: [wreg+status,2+status,0]
  5193                           	line	117
  5194                           	
  5195  0643                     l19065:	
  5196                           ;system_init.c: 117: OPTION_REG |= (0x01 << 3);
  5197  0643  0021               	movlb 1	; select bank1
  5198  0644  1595               	bsf	(149)^080h+(3/8),(3)&7	;volatile
  5199                           	line	118
  5200                           	
  5201  0645                     l19067:	
  5202                           ;system_init.c: 118: OPTION_REG &= ~(0x01 << 5);
  5203  0645  30DF               	movlw	(0DFh)
  5204  0646  0020               	movlb 0	; select bank0
  5205  0647  00C6               	movwf	(??_PIC_CofnigTimer0+0)+0
  5206  0648  0846               	movf	(??_PIC_CofnigTimer0+0)+0,w
  5207  0649  0021               	movlb 1	; select bank1
  5208  064A  0595               	andwf	(149)^080h,f	;volatile
  5209                           	line	120
  5210                           	
  5211  064B                     l19069:	
  5212                           ;system_init.c: 120: TMR0 = 5;
  5213  064B  3005               	movlw	(05h)
  5214  064C  0020               	movlb 0	; select bank0
  5215  064D  0095               	movwf	(21)	;volatile
  5216                           	line	122
  5217                           	
  5218  064E                     l19071:	
  5219                           ;system_init.c: 122: INTCON &= ~(0x01 << 2);
  5220  064E  30FB               	movlw	(0FBh)
  5221  064F  00C6               	movwf	(??_PIC_CofnigTimer0+0)+0
  5222  0650  0846               	movf	(??_PIC_CofnigTimer0+0)+0,w
  5223  0651  058B               	andwf	(11),f	;volatile
  5224                           	line	123
  5225                           	
  5226  0652                     l19073:	
  5227                           ;system_init.c: 123: INTCON |= (0x01 << 5);
  5228  0652  168B               	bsf	(11)+(5/8),(5)&7	;volatile
  5229                           	line	124
  5230                           	
  5231  0653                     l9373:	
  5232  0653  0008               	return
  5233                           	opt stack 0
  5234                           GLOBAL	__end_of_PIC_CofnigTimer0
  5235  0654                     	__end_of_PIC_CofnigTimer0:
  5236 ;; =============== function _PIC_CofnigTimer0 ends ============
  5237                           
  5238                           	signat	_PIC_CofnigTimer0,88
  5239                           	global	_PIC_ConfigGPIO
  5240                           psect	text978,local,class=CODE,delta=2
  5241                           global __ptext978
  5242  0654                     __ptext978:
  5243                           
  5244 ;; *************** function _PIC_ConfigGPIO *****************
  5245 ;; Defined at:
  5246 ;;		line 25 in file "system_init.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;		None               void
  5253 ;; Registers used:
  5254 ;;		wreg, status,2, status,0
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMMON   BANK0   BANK1
  5260 ;;      Params:         0       0       0
  5261 ;;      Locals:         0       0       0
  5262 ;;      Temps:          0       1       0
  5263 ;;      Totals:         0       1       0
  5264 ;;Total ram usage:        1 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    4
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_main
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           psect	text978
  5274                           	file	"system_init.c"
  5275                           	line	25
  5276                           	global	__size_of_PIC_ConfigGPIO
  5277  0011                     	__size_of_PIC_ConfigGPIO	equ	__end_of_PIC_ConfigGPIO-_PIC_ConfigGPIO
  5278                           	
  5279  0654                     _PIC_ConfigGPIO:	
  5280                           	opt	stack 11
  5281                           ; Regs used in _PIC_ConfigGPIO: [wreg+status,2+status,0]
  5282                           	line	27
  5283                           	
  5284  0654                     l19059:	
  5285                           ;system_init.c: 27: TRISC |= 0x01 << 1;
  5286  0654  0021               	movlb 1	; select bank1
  5287  0655  148E               	bsf	(142)^080h+(1/8),(1)&7	;volatile
  5288                           	line	28
  5289                           	
  5290  0656                     l19061:	
  5291                           ;system_init.c: 28: ANSELC &= ~(0x01 << 1);
  5292  0656  30FD               	movlw	(0FDh)
  5293  0657  0020               	movlb 0	; select bank0
  5294  0658  00C6               	movwf	(??_PIC_ConfigGPIO+0)+0
  5295  0659  0846               	movf	(??_PIC_ConfigGPIO+0)+0,w
  5296  065A  0023               	movlb 3	; select bank3
  5297  065B  058E               	andwf	(398)^0180h,f	;volatile
  5298                           	line	37
  5299                           	
  5300  065C                     l19063:	
  5301                           ;system_init.c: 37: TRISA |= 0x01 << 2;
  5302  065C  0021               	movlb 1	; select bank1
  5303  065D  150C               	bsf	(140)^080h+(2/8),(2)&7	;volatile
  5304                           	line	38
  5305                           ;system_init.c: 38: ANSELA &= ~(0x01 << 2);
  5306  065E  30FB               	movlw	(0FBh)
  5307  065F  0020               	movlb 0	; select bank0
  5308  0660  00C6               	movwf	(??_PIC_ConfigGPIO+0)+0
  5309  0661  0846               	movf	(??_PIC_ConfigGPIO+0)+0,w
  5310  0662  0023               	movlb 3	; select bank3
  5311  0663  058C               	andwf	(396)^0180h,f	;volatile
  5312                           	line	39
  5313                           	
  5314  0664                     l9346:	
  5315  0664  0008               	return
  5316                           	opt stack 0
  5317                           GLOBAL	__end_of_PIC_ConfigGPIO
  5318  0665                     	__end_of_PIC_ConfigGPIO:
  5319 ;; =============== function _PIC_ConfigGPIO ends ============
  5320                           
  5321                           	signat	_PIC_ConfigGPIO,88
  5322                           	global	_PIC_ConfigOptionReg
  5323                           psect	text979,local,class=CODE,delta=2
  5324                           global __ptext979
  5325  050B                     __ptext979:
  5326                           
  5327 ;; *************** function _PIC_ConfigOptionReg *****************
  5328 ;; Defined at:
  5329 ;;		line 67 in file "system_init.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;		None
  5334 ;; Return value:  Size  Location     Type
  5335 ;;		None               void
  5336 ;; Registers used:
  5337 ;;		wreg, status,2, status,0
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1
  5343 ;;      Params:         0       0       0
  5344 ;;      Locals:         0       0       0
  5345 ;;      Temps:          0       1       0
  5346 ;;      Totals:         0       1       0
  5347 ;;Total ram usage:        1 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:    4
  5350 ;; This function calls:
  5351 ;;		Nothing
  5352 ;; This function is called by:
  5353 ;;		_main
  5354 ;;		_System_Init
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           psect	text979
  5358                           	file	"system_init.c"
  5359                           	line	67
  5360                           	global	__size_of_PIC_ConfigOptionReg
  5361  0022                     	__size_of_PIC_ConfigOptionReg	equ	__end_of_PIC_ConfigOptionReg-_PIC_ConfigOptionReg
  5362                           	
  5363  050B                     _PIC_ConfigOptionReg:	
  5364                           	opt	stack 11
  5365                           ; Regs used in _PIC_ConfigOptionReg: [wreg+status,2+status,0]
  5366                           	line	71
  5367                           	
  5368  050B                     l19053:	
  5369                           ;system_init.c: 71: OPTION_REG |= (0x01 << 7);
  5370  050B  0021               	movlb 1	; select bank1
  5371  050C  1795               	bsf	(149)^080h+(7/8),(7)&7	;volatile
  5372                           	line	73
  5373                           	
  5374  050D                     l19055:	
  5375                           ;system_init.c: 73: OPTION_REG &= ~(0x01 << 6);
  5376  050D  30BF               	movlw	(0BFh)
  5377  050E  0020               	movlb 0	; select bank0
  5378  050F  00C6               	movwf	(??_PIC_ConfigOptionReg+0)+0
  5379  0510  0846               	movf	(??_PIC_ConfigOptionReg+0)+0,w
  5380  0511  0021               	movlb 1	; select bank1
  5381  0512  0595               	andwf	(149)^080h,f	;volatile
  5382                           	line	74
  5383                           ;system_init.c: 74: OPTION_REG &= ~(0x01 << 5);
  5384  0513  30DF               	movlw	(0DFh)
  5385  0514  0020               	movlb 0	; select bank0
  5386  0515  00C6               	movwf	(??_PIC_ConfigOptionReg+0)+0
  5387  0516  0846               	movf	(??_PIC_ConfigOptionReg+0)+0,w
  5388  0517  0021               	movlb 1	; select bank1
  5389  0518  0595               	andwf	(149)^080h,f	;volatile
  5390                           	line	75
  5391                           ;system_init.c: 75: OPTION_REG &= ~(0x01 << 4);
  5392  0519  30EF               	movlw	(0EFh)
  5393  051A  0020               	movlb 0	; select bank0
  5394  051B  00C6               	movwf	(??_PIC_ConfigOptionReg+0)+0
  5395  051C  0846               	movf	(??_PIC_ConfigOptionReg+0)+0,w
  5396  051D  0021               	movlb 1	; select bank1
  5397  051E  0595               	andwf	(149)^080h,f	;volatile
  5398                           	line	76
  5399                           ;system_init.c: 76: OPTION_REG &= ~(0x01 << 3);
  5400  051F  30F7               	movlw	(0F7h)
  5401  0520  0020               	movlb 0	; select bank0
  5402  0521  00C6               	movwf	(??_PIC_ConfigOptionReg+0)+0
  5403  0522  0846               	movf	(??_PIC_ConfigOptionReg+0)+0,w
  5404  0523  0021               	movlb 1	; select bank1
  5405  0524  0595               	andwf	(149)^080h,f	;volatile
  5406                           	line	80
  5407                           ;system_init.c: 80: OPTION_REG &= ~(0x07 << 0);
  5408  0525  30F8               	movlw	(0F8h)
  5409  0526  0020               	movlb 0	; select bank0
  5410  0527  00C6               	movwf	(??_PIC_ConfigOptionReg+0)+0
  5411  0528  0846               	movf	(??_PIC_ConfigOptionReg+0)+0,w
  5412  0529  0021               	movlb 1	; select bank1
  5413  052A  0595               	andwf	(149)^080h,f	;volatile
  5414                           	line	81
  5415                           	
  5416  052B                     l19057:	
  5417                           ;system_init.c: 81: OPTION_REG |= (0x04 << 0);
  5418  052B  1515               	bsf	(149)^080h+(2/8),(2)&7	;volatile
  5419                           	line	83
  5420                           	
  5421  052C                     l9355:	
  5422  052C  0008               	return
  5423                           	opt stack 0
  5424                           GLOBAL	__end_of_PIC_ConfigOptionReg
  5425  052D                     	__end_of_PIC_ConfigOptionReg:
  5426 ;; =============== function _PIC_ConfigOptionReg ends ============
  5427                           
  5428                           	signat	_PIC_ConfigOptionReg,88
  5429                           	global	_PIC_ConfigClock
  5430                           psect	text980,local,class=CODE,delta=2
  5431                           global __ptext980
  5432  05D4                     __ptext980:
  5433                           
  5434 ;; *************** function _PIC_ConfigClock *****************
  5435 ;; Defined at:
  5436 ;;		line 42 in file "system_init.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;		None
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;		None
  5441 ;; Return value:  Size  Location     Type
  5442 ;;		None               void
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, status,0
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMMON   BANK0   BANK1
  5450 ;;      Params:         0       0       0
  5451 ;;      Locals:         0       0       0
  5452 ;;      Temps:          0       1       0
  5453 ;;      Totals:         0       1       0
  5454 ;;Total ram usage:        1 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:    4
  5457 ;; This function calls:
  5458 ;;		Nothing
  5459 ;; This function is called by:
  5460 ;;		_main
  5461 ;;		_System_Init
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           psect	text980
  5465                           	file	"system_init.c"
  5466                           	line	42
  5467                           	global	__size_of_PIC_ConfigClock
  5468  0015                     	__size_of_PIC_ConfigClock	equ	__end_of_PIC_ConfigClock-_PIC_ConfigClock
  5469                           	
  5470  05D4                     _PIC_ConfigClock:	
  5471                           	opt	stack 11
  5472                           ; Regs used in _PIC_ConfigClock: [wreg+status,2+status,0]
  5473                           	line	44
  5474                           	
  5475  05D4                     l19049:	
  5476                           ;system_init.c: 44: SPLLEN = 0;
  5477  05D4  0021               	movlb 1	; select bank1
  5478  05D5  1399               	bcf	(1231/8)^080h,(1231)&7
  5479                           	line	45
  5480                           	
  5481  05D6                     l19051:	
  5482                           ;system_init.c: 45: OSCCON &= ~(0x0f << 3);
  5483  05D6  3087               	movlw	(087h)
  5484  05D7  0020               	movlb 0	; select bank0
  5485  05D8  00C6               	movwf	(??_PIC_ConfigClock+0)+0
  5486  05D9  0846               	movf	(??_PIC_ConfigClock+0)+0,w
  5487  05DA  0021               	movlb 1	; select bank1
  5488  05DB  0599               	andwf	(153)^080h,f	;volatile
  5489                           	line	48
  5490                           ;system_init.c: 48: OSCCON |= (0x0b << 3);
  5491  05DC  3058               	movlw	(058h)
  5492  05DD  0020               	movlb 0	; select bank0
  5493  05DE  00C6               	movwf	(??_PIC_ConfigClock+0)+0
  5494  05DF  0846               	movf	(??_PIC_ConfigClock+0)+0,w
  5495  05E0  0021               	movlb 1	; select bank1
  5496  05E1  0499               	iorwf	(153)^080h,f	;volatile
  5497                           	line	51
  5498                           ;system_init.c: 51: OSCCON &= ~(0x03);
  5499  05E2  30FC               	movlw	(0FCh)
  5500  05E3  0020               	movlb 0	; select bank0
  5501  05E4  00C6               	movwf	(??_PIC_ConfigClock+0)+0
  5502  05E5  0846               	movf	(??_PIC_ConfigClock+0)+0,w
  5503  05E6  0021               	movlb 1	; select bank1
  5504  05E7  0599               	andwf	(153)^080h,f	;volatile
  5505                           	line	53
  5506                           	
  5507  05E8                     l9349:	
  5508  05E8  0008               	return
  5509                           	opt stack 0
  5510                           GLOBAL	__end_of_PIC_ConfigClock
  5511  05E9                     	__end_of_PIC_ConfigClock:
  5512 ;; =============== function _PIC_ConfigClock ends ============
  5513                           
  5514                           	signat	_PIC_ConfigClock,88
  5515                           	global	_ISR_Manger
  5516                           psect	intentry,class=CODE,delta=2
  5517                           global __pintentry
  5518  0004                     __pintentry:
  5519                           
  5520 ;; *************** function _ISR_Manger *****************
  5521 ;; Defined at:
  5522 ;;		line 36 in file "interrupt.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;		None
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;		None
  5527 ;; Return value:  Size  Location     Type
  5528 ;;		None               void
  5529 ;; Registers used:
  5530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 0/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMMON   BANK0   BANK1
  5536 ;;      Params:         0       0       0
  5537 ;;      Locals:         0       0       0
  5538 ;;      Temps:          2       0       0
  5539 ;;      Totals:         2       0       0
  5540 ;;Total ram usage:        2 bytes
  5541 ;; Hardware stack levels used:    1
  5542 ;; Hardware stack levels required when called:    3
  5543 ;; This function calls:
  5544 ;;		_InterruptTimer0
  5545 ;; This function is called by:
  5546 ;;		Interrupt level 1
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           psect	intentry
  5550                           	file	"interrupt.c"
  5551                           	line	36
  5552                           	global	__size_of_ISR_Manger
  5553  0014                     	__size_of_ISR_Manger	equ	__end_of_ISR_Manger-_ISR_Manger
  5554                           	
  5555  0004                     _ISR_Manger:	
  5556                           	opt	stack 7
  5557                           ; Regs used in _ISR_Manger: [allreg]
  5558                           psect	intentry
  5559  0004  3180               	pagesel	$
  5560  0005  0020               	movlb 0	; select bank0
  5561  0006  087F               	movf	btemp+1,w
  5562  0007  00FD               	movwf	(??_ISR_Manger+1)
  5563                           	line	37
  5564                           	
  5565  0008                     i1l19187:	
  5566                           ;interrupt.c: 37: if(INTCON & (0x01 << 2))
  5567  0008  1D0B               	btfss	(11),(2)&7
  5568  0009  280B               	goto	u304_21
  5569  000A  280C               	goto	u304_20
  5570  000B                     u304_21:
  5571  000B  2814               	goto	i1l2696
  5572  000C                     u304_20:
  5573                           	line	39
  5574                           	
  5575  000C                     i1l19189:	
  5576                           ;interrupt.c: 38: {
  5577                           ;interrupt.c: 39: InterruptTimer0();
  5578  000C  3186  2675  3180   	fcall	_InterruptTimer0
  5579                           	line	40
  5580                           	
  5581  000F                     i1l19191:	
  5582                           ;interrupt.c: 40: INTCON &= ~(0x01 << 2);
  5583  000F  30FB               	movlw	(0FBh)
  5584  0010  00FC               	movwf	(??_ISR_Manger+0)+0
  5585  0011  087C               	movf	(??_ISR_Manger+0)+0,w
  5586  0012  058B               	andwf	(11),f	;volatile
  5587  0013  2814               	goto	i1l2696
  5588                           	line	41
  5589                           	
  5590  0014                     i1l2695:	
  5591                           	line	42
  5592                           	
  5593  0014                     i1l2696:	
  5594  0014  087D               	movf	(??_ISR_Manger+1),w
  5595  0015  0020               	movlb 0	; select bank0
  5596  0016  00FF               	movwf	btemp+1
  5597  0017  0009               	retfie
  5598                           	opt stack 0
  5599                           GLOBAL	__end_of_ISR_Manger
  5600  0018                     	__end_of_ISR_Manger:
  5601 ;; =============== function _ISR_Manger ends ============
  5602                           
  5603                           	signat	_ISR_Manger,88
  5604                           	global	_InterruptTimer0
  5605                           psect	text982,local,class=CODE,delta=2
  5606                           global __ptext982
  5607  0675                     __ptext982:
  5608                           
  5609 ;; *************** function _InterruptTimer0 *****************
  5610 ;; Defined at:
  5611 ;;		line 20 in file "interrupt.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;		None               void
  5618 ;; Registers used:
  5619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMMON   BANK0   BANK1
  5625 ;;      Params:         0       0       0
  5626 ;;      Locals:         0       0       0
  5627 ;;      Temps:          0       0       0
  5628 ;;      Totals:         0       0       0
  5629 ;;Total ram usage:        0 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    2
  5632 ;; This function calls:
  5633 ;;		_KeyScan
  5634 ;;		_Contrl_Signal
  5635 ;;		_Motor_RunTimeCount
  5636 ;;		_Delay_Scan
  5637 ;; This function is called by:
  5638 ;;		_ISR_Manger
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           psect	text982
  5642                           	file	"interrupt.c"
  5643                           	line	20
  5644                           	global	__size_of_InterruptTimer0
  5645  0010                     	__size_of_InterruptTimer0	equ	__end_of_InterruptTimer0-_InterruptTimer0
  5646                           	
  5647  0675                     _InterruptTimer0:	
  5648                           	opt	stack 7
  5649                           ; Regs used in _InterruptTimer0: [allreg]
  5650                           	line	24
  5651                           	
  5652  0675                     i1l19111:	
  5653                           ;interrupt.c: 21: static unsigned long cnt = 0;
  5654                           ;interrupt.c: 24: TMR0 = 5;
  5655  0675  3005               	movlw	(05h)
  5656  0676  0020               	movlb 0	; select bank0
  5657  0677  0095               	movwf	(21)	;volatile
  5658                           	line	25
  5659                           	
  5660  0678                     i1l19113:	
  5661                           ;interrupt.c: 25: KeyScan();
  5662  0678  3185  2564  3186   	fcall	_KeyScan
  5663                           	line	26
  5664                           	
  5665  067B                     i1l19115:	
  5666                           ;interrupt.c: 26: Contrl_Signal();
  5667  067B  3183  2394  3186   	fcall	_Contrl_Signal
  5668                           	line	27
  5669                           	
  5670  067E                     i1l19117:	
  5671                           ;interrupt.c: 27: Motor_RunTimeCount();
  5672  067E  3185  254A  3186   	fcall	_Motor_RunTimeCount
  5673                           	line	28
  5674                           	
  5675  0681                     i1l19119:	
  5676                           ;interrupt.c: 28: Delay_Scan();
  5677  0681  3186  26BA  3186   	fcall	_Delay_Scan
  5678                           	line	31
  5679                           	
  5680  0684                     i1l2692:	
  5681  0684  0008               	return
  5682                           	opt stack 0
  5683                           GLOBAL	__end_of_InterruptTimer0
  5684  0685                     	__end_of_InterruptTimer0:
  5685 ;; =============== function _InterruptTimer0 ends ============
  5686                           
  5687                           	signat	_InterruptTimer0,88
  5688                           	global	_Contrl_Signal
  5689                           psect	text983,local,class=CODE,delta=2
  5690                           global __ptext983
  5691  0394                     __ptext983:
  5692                           
  5693 ;; *************** function _Contrl_Signal *****************
  5694 ;; Defined at:
  5695 ;;		line 33 in file "signal.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;		None
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  dis_tmp         2   10[COMMON] unsigned int 
  5700 ;;  tem             2    0        unsigned int 
  5701 ;; Return value:  Size  Location     Type
  5702 ;;		None               void
  5703 ;; Registers used:
  5704 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMMON   BANK0   BANK1
  5710 ;;      Params:         0       0       0
  5711 ;;      Locals:         2       0       0
  5712 ;;      Temps:          1       0       0
  5713 ;;      Totals:         3       0       0
  5714 ;;Total ram usage:        3 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    1
  5717 ;; This function calls:
  5718 ;;		_Get_ADCValue
  5719 ;; This function is called by:
  5720 ;;		_InterruptTimer0
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           psect	text983
  5724                           	file	"signal.c"
  5725                           	line	33
  5726                           	global	__size_of_Contrl_Signal
  5727  007D                     	__size_of_Contrl_Signal	equ	__end_of_Contrl_Signal-_Contrl_Signal
  5728                           	
  5729  0394                     _Contrl_Signal:	
  5730                           	opt	stack 7
  5731                           ; Regs used in _Contrl_Signal: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5732                           	line	40
  5733                           	
  5734  0394                     i1l19131:	
  5735                           ;signal.c: 34: static uint16_t period = 0;
  5736                           ;signal.c: 35: static uint16_t signal_cnt = 0;
  5737                           ;signal.c: 36: static uint8_t ctrBuf = 0;
  5738                           ;signal.c: 37: uint16_t tem;
  5739                           ;signal.c: 40: period++;
  5740  0394  3001               	movlw	low(01h)
  5741  0395  0020               	movlb 0	; select bank0
  5742  0396  07A8               	addwf	(Contrl_Signal@period),f
  5743  0397  3000               	movlw	high(01h)
  5744  0398  3DA9               	addwfc	(Contrl_Signal@period+1),f
  5745                           	line	44
  5746                           	
  5747  0399                     i1l19133:	
  5748                           ;signal.c: 44: if(RC1 == 1)
  5749  0399  1C8E               	btfss	(113/8),(113)&7
  5750  039A  2B9C               	goto	u290_21
  5751  039B  2B9D               	goto	u290_20
  5752  039C                     u290_21:
  5753  039C  2BA1               	goto	i1l12004
  5754  039D                     u290_20:
  5755                           	line	46
  5756                           	
  5757  039D                     i1l19135:	
  5758                           ;signal.c: 45: {
  5759                           ;signal.c: 46: signal_cnt++;
  5760  039D  3001               	movlw	low(01h)
  5761  039E  07AA               	addwf	(Contrl_Signal@signal_cnt),f
  5762  039F  3000               	movlw	high(01h)
  5763  03A0  3DAB               	addwfc	(Contrl_Signal@signal_cnt+1),f
  5764                           	line	47
  5765                           	
  5766  03A1                     i1l12004:	
  5767                           	line	48
  5768                           ;signal.c: 47: }
  5769                           ;signal.c: 48: if(period >= 80)
  5770  03A1  3000               	movlw	high(050h)
  5771  03A2  0229               	subwf	(Contrl_Signal@period+1),w
  5772  03A3  3050               	movlw	low(050h)
  5773  03A4  1903               	skipnz
  5774  03A5  0228               	subwf	(Contrl_Signal@period),w
  5775  03A6  1C03               	skipc
  5776  03A7  2BA9               	goto	u291_21
  5777  03A8  2BAA               	goto	u291_20
  5778  03A9                     u291_21:
  5779  03A9  2C10               	goto	i1l12014
  5780  03AA                     u291_20:
  5781                           	line	59
  5782                           	
  5783  03AA                     i1l19137:	
  5784                           ;signal.c: 49: {
  5785                           ;signal.c: 59: uint16_t dis_tmp = 0;
  5786  03AA  01FA               	clrf	(Contrl_Signal@dis_tmp)
  5787  03AB  01FB               	clrf	(Contrl_Signal@dis_tmp+1)
  5788                           	line	60
  5789                           	
  5790  03AC                     i1l19139:	
  5791                           ;signal.c: 60: numOf120ms++;
  5792  03AC  3001               	movlw	low(01h)
  5793  03AD  07B6               	addwf	(_numOf120ms),f
  5794  03AE  3000               	movlw	high(01h)
  5795  03AF  3DB7               	addwfc	(_numOf120ms+1),f
  5796                           	line	65
  5797                           	
  5798  03B0                     i1l19141:	
  5799                           ;signal.c: 65: gPhaseVoltage_CH1 = Get_ADCValue(eADC_AN4);
  5800  03B0  3004               	movlw	(04h)
  5801  03B1  3184  2481  3183   	fcall	_Get_ADCValue
  5802  03B4  0871               	movf	(1+(?_Get_ADCValue)),w
  5803  03B5  0020               	movlb 0	; select bank0
  5804  03B6  01B3               	clrf	(_gPhaseVoltage_CH1+1)
  5805  03B7  07B3               	addwf	(_gPhaseVoltage_CH1+1)
  5806  03B8  0870               	movf	(0+(?_Get_ADCValue)),w
  5807  03B9  01B2               	clrf	(_gPhaseVoltage_CH1)
  5808  03BA  07B2               	addwf	(_gPhaseVoltage_CH1)
  5809                           
  5810                           	line	75
  5811                           	
  5812  03BB                     i1l19143:	
  5813                           ;signal.c: 75: if(signal_cnt > 50)
  5814  03BB  3000               	movlw	high(033h)
  5815  03BC  022B               	subwf	(Contrl_Signal@signal_cnt+1),w
  5816  03BD  3033               	movlw	low(033h)
  5817  03BE  1903               	skipnz
  5818  03BF  022A               	subwf	(Contrl_Signal@signal_cnt),w
  5819  03C0  1C03               	skipc
  5820  03C1  2BC3               	goto	u292_21
  5821  03C2  2BC4               	goto	u292_20
  5822  03C3                     u292_21:
  5823  03C3  2BC7               	goto	i1l19147
  5824  03C4                     u292_20:
  5825                           	line	77
  5826                           	
  5827  03C4                     i1l19145:	
  5828                           ;signal.c: 76: {
  5829                           ;signal.c: 77: ctrBuf = (ctrBuf << 1) |0x01;
  5830  03C4  1403               	setc
  5831  03C5  0DB8               	rlf	(Contrl_Signal@ctrBuf),f
  5832                           	line	80
  5833                           ;signal.c: 80: }
  5834  03C6  2BCD               	goto	i1l19149
  5835                           	line	81
  5836                           	
  5837  03C7                     i1l12006:	
  5838                           	line	83
  5839                           	
  5840  03C7                     i1l19147:	
  5841                           ;signal.c: 81: else
  5842                           ;signal.c: 82: {
  5843                           ;signal.c: 83: ctrBuf = (ctrBuf << 1) |0x00;
  5844  03C7  0838               	movf	(Contrl_Signal@ctrBuf),w
  5845  03C8  0709               	addwf	wreg,w
  5846  03C9  00F9               	movwf	(??_Contrl_Signal+0)+0
  5847  03CA  0879               	movf	(??_Contrl_Signal+0)+0,w
  5848  03CB  00B8               	movwf	(Contrl_Signal@ctrBuf)
  5849  03CC  2BCD               	goto	i1l19149
  5850                           	line	86
  5851                           	
  5852  03CD                     i1l12007:	
  5853                           	line	88
  5854                           	
  5855  03CD                     i1l19149:	
  5856                           ;signal.c: 86: }
  5857                           ;signal.c: 88: if(ctrBuf == 0xff)
  5858  03CD  0838               	movf	(Contrl_Signal@ctrBuf),w
  5859  03CE  3AFF               	xorlw	0FFh&0ffh
  5860  03CF  1D03               	skipz
  5861  03D0  2BD2               	goto	u293_21
  5862  03D1  2BD3               	goto	u293_20
  5863  03D2                     u293_21:
  5864  03D2  2BD7               	goto	i1l19153
  5865  03D3                     u293_20:
  5866                           	line	90
  5867                           	
  5868  03D3                     i1l19151:	
  5869                           ;signal.c: 89: {
  5870                           ;signal.c: 90: Ctr_Signal = Ctrl_SignalValid;
  5871  03D3  01BA               	clrf	(_Ctr_Signal)
  5872  03D4  1403               	bsf	status,0
  5873  03D5  0DBA               	rlf	(_Ctr_Signal),f
  5874                           	line	91
  5875                           ;signal.c: 91: }
  5876  03D6  2BDF               	goto	i1l19157
  5877                           	line	92
  5878                           	
  5879  03D7                     i1l12008:	
  5880                           	
  5881  03D7                     i1l19153:	
  5882                           ;signal.c: 92: else if(ctrBuf == 0x00)
  5883  03D7  08B8               	movf	(Contrl_Signal@ctrBuf),f
  5884  03D8  1D03               	skipz
  5885  03D9  2BDB               	goto	u294_21
  5886  03DA  2BDC               	goto	u294_20
  5887  03DB                     u294_21:
  5888  03DB  2BDF               	goto	i1l19157
  5889  03DC                     u294_20:
  5890                           	line	94
  5891                           	
  5892  03DC                     i1l19155:	
  5893                           ;signal.c: 93: {
  5894                           ;signal.c: 94: Ctr_Signal = Ctrl_SignalInvalid;
  5895  03DC  01BA               	clrf	(_Ctr_Signal)
  5896  03DD  2BDF               	goto	i1l19157
  5897                           	line	95
  5898                           	
  5899  03DE                     i1l12010:	
  5900  03DE  2BDF               	goto	i1l19157
  5901                           	line	97
  5902                           	
  5903  03DF                     i1l12009:	
  5904                           	
  5905  03DF                     i1l19157:	
  5906                           ;signal.c: 95: }
  5907                           ;signal.c: 97: if((numOf120ms > 100) && (Ctr_Signal== Ctr_SignalBck) &&(Motor_RunSta==Mo
                                 tor_Stoped ||Motor_RunSta== Motor_Default) &&(RA2==1))
  5908  03DF  3000               	movlw	high(065h)
  5909  03E0  0237               	subwf	(_numOf120ms+1),w
  5910  03E1  3065               	movlw	low(065h)
  5911  03E2  1903               	skipnz
  5912  03E3  0236               	subwf	(_numOf120ms),w
  5913  03E4  1C03               	skipc
  5914  03E5  2BE7               	goto	u295_21
  5915  03E6  2BE8               	goto	u295_20
  5916  03E7                     u295_21:
  5917  03E7  2C03               	goto	i1l19169
  5918  03E8                     u295_20:
  5919                           	
  5920  03E8                     i1l19159:	
  5921  03E8  083A               	movf	(_Ctr_Signal),w
  5922  03E9  063B               	xorwf	(_Ctr_SignalBck),w
  5923  03EA  1D03               	skipz
  5924  03EB  2BED               	goto	u296_21
  5925  03EC  2BEE               	goto	u296_20
  5926  03ED                     u296_21:
  5927  03ED  2C03               	goto	i1l19169
  5928  03EE                     u296_20:
  5929                           	
  5930  03EE                     i1l19161:	
  5931  03EE  083C               	movf	(_Motor_RunSta),w
  5932  03EF  3A04               	xorlw	04h&0ffh
  5933  03F0  1903               	skipnz
  5934  03F1  2BF3               	goto	u297_21
  5935  03F2  2BF4               	goto	u297_20
  5936  03F3                     u297_21:
  5937  03F3  2BF9               	goto	i1l12013
  5938  03F4                     u297_20:
  5939                           	
  5940  03F4                     i1l19163:	
  5941  03F4  08BC               	movf	(_Motor_RunSta),f
  5942  03F5  1D03               	skipz
  5943  03F6  2BF8               	goto	u298_21
  5944  03F7  2BF9               	goto	u298_20
  5945  03F8                     u298_21:
  5946  03F8  2C03               	goto	i1l19169
  5947  03F9                     u298_20:
  5948                           	
  5949  03F9                     i1l12013:	
  5950  03F9  1D0C               	btfss	(98/8),(98)&7
  5951  03FA  2BFC               	goto	u299_21
  5952  03FB  2BFD               	goto	u299_20
  5953  03FC                     u299_21:
  5954  03FC  2C03               	goto	i1l19169
  5955  03FD                     u299_20:
  5956                           	line	99
  5957                           	
  5958  03FD                     i1l19165:	
  5959                           ;signal.c: 98: {
  5960                           ;signal.c: 99: numOf120ms = 0;
  5961  03FD  01B6               	clrf	(_numOf120ms)
  5962  03FE  01B7               	clrf	(_numOf120ms+1)
  5963                           	line	100
  5964                           	
  5965  03FF                     i1l19167:	
  5966                           ;signal.c: 100: isLowPower = 1;
  5967  03FF  01C2               	clrf	(_isLowPower)
  5968  0400  1403               	bsf	status,0
  5969  0401  0DC2               	rlf	(_isLowPower),f
  5970  0402  2C03               	goto	i1l19169
  5971                           	line	101
  5972                           	
  5973  0403                     i1l12011:	
  5974                           	line	102
  5975                           	
  5976  0403                     i1l19169:	
  5977                           ;signal.c: 101: }
  5978                           ;signal.c: 102: average = 0;
  5979  0403  3000               	movlw	0
  5980  0404  00A7               	movwf	(_average+3)
  5981  0405  3000               	movlw	0
  5982  0406  00A6               	movwf	(_average+2)
  5983  0407  3000               	movlw	0
  5984  0408  00A5               	movwf	(_average+1)
  5985  0409  3000               	movlw	0
  5986  040A  00A4               	movwf	(_average)
  5987                           
  5988                           	line	103
  5989                           	
  5990  040B                     i1l19171:	
  5991                           ;signal.c: 103: period = 0;
  5992  040B  01A8               	clrf	(Contrl_Signal@period)
  5993  040C  01A9               	clrf	(Contrl_Signal@period+1)
  5994                           	line	104
  5995                           	
  5996  040D                     i1l19173:	
  5997                           ;signal.c: 104: signal_cnt = 0;
  5998  040D  01AA               	clrf	(Contrl_Signal@signal_cnt)
  5999  040E  01AB               	clrf	(Contrl_Signal@signal_cnt+1)
  6000  040F  2C10               	goto	i1l12014
  6001                           	line	105
  6002                           	
  6003  0410                     i1l12005:	
  6004                           	line	107
  6005                           	
  6006  0410                     i1l12014:	
  6007  0410  0008               	return
  6008                           	opt stack 0
  6009                           GLOBAL	__end_of_Contrl_Signal
  6010  0411                     	__end_of_Contrl_Signal:
  6011 ;; =============== function _Contrl_Signal ends ============
  6012                           
  6013                           	signat	_Contrl_Signal,88
  6014                           	global	_Get_ADCValue
  6015                           psect	text984,local,class=CODE,delta=2
  6016                           global __ptext984
  6017  0481                     __ptext984:
  6018                           
  6019 ;; *************** function _Get_ADCValue *****************
  6020 ;; Defined at:
  6021 ;;		line 38 in file "adc.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;  channel         1    wreg     enum E2397
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  channel         1    6[COMMON] enum E2397
  6026 ;;  tem             2    7[COMMON] unsigned int 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  2    0[COMMON] unsigned int 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2, status,0, btemp+1
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1
  6036 ;;      Params:         2       0       0
  6037 ;;      Locals:         3       0       0
  6038 ;;      Temps:          4       0       0
  6039 ;;      Totals:         9       0       0
  6040 ;;Total ram usage:        9 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; This function calls:
  6043 ;;		Nothing
  6044 ;; This function is called by:
  6045 ;;		_Contrl_Signal
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           psect	text984
  6049                           	file	"adc.c"
  6050                           	line	38
  6051                           	global	__size_of_Get_ADCValue
  6052  0031                     	__size_of_Get_ADCValue	equ	__end_of_Get_ADCValue-_Get_ADCValue
  6053                           	
  6054  0481                     _Get_ADCValue:	
  6055                           	opt	stack 7
  6056                           ; Regs used in _Get_ADCValue: [wreg+status,2+status,0+btemp+1]
  6057                           ;Get_ADCValue@channel stored from wreg
  6058  0481  00F6               	movwf	(Get_ADCValue@channel)
  6059                           	line	39
  6060                           	
  6061  0482                     i1l19229:	
  6062                           ;adc.c: 39: uint16_t tem = 0;
  6063  0482  01F7               	clrf	(Get_ADCValue@tem)
  6064  0483  01F8               	clrf	(Get_ADCValue@tem+1)
  6065                           	line	40
  6066                           	
  6067  0484                     i1l19231:	
  6068                           ;adc.c: 40: ADCON0 &= ~(0x1f << 2);
  6069  0484  3083               	movlw	(083h)
  6070  0485  00F2               	movwf	(??_Get_ADCValue+0)+0
  6071  0486  0872               	movf	(??_Get_ADCValue+0)+0,w
  6072  0487  0021               	movlb 1	; select bank1
  6073  0488  059D               	andwf	(157)^080h,f	;volatile
  6074                           	line	41
  6075                           	
  6076  0489                     i1l19233:	
  6077                           ;adc.c: 41: ADCON0 |= (channel << 2);
  6078  0489  0876               	movf	(Get_ADCValue@channel),w
  6079  048A  00F2               	movwf	(??_Get_ADCValue+0)+0
  6080  048B  3001               	movlw	(02h)-1
  6081  048C                     u308_25:
  6082  048C  35F2               	lslf	(??_Get_ADCValue+0)+0,f
  6083  048D  3EFF               	addlw	-1
  6084  048E  1D03               	skipz
  6085  048F  2C8C               	goto	u308_25
  6086  0490  3572               	lslf	(??_Get_ADCValue+0)+0,w
  6087  0491  00F3               	movwf	(??_Get_ADCValue+1)+0
  6088  0492  0873               	movf	(??_Get_ADCValue+1)+0,w
  6089  0493  049D               	iorwf	(157)^080h,f	;volatile
  6090                           	line	42
  6091                           	
  6092  0494                     i1l19235:	
  6093                           ;adc.c: 42: ADCON0 |= 0x01 << 1;
  6094  0494  149D               	bsf	(157)^080h+(1/8),(1)&7	;volatile
  6095                           	line	44
  6096                           ;adc.c: 44: while(ADCON0 & 0x02 );
  6097  0495  2C96               	goto	i1l13319
  6098                           	
  6099  0496                     i1l13320:	
  6100                           	
  6101  0496                     i1l13319:	
  6102  0496  189D               	btfsc	(157)^080h,(1)&7
  6103  0497  2C99               	goto	u309_21
  6104  0498  2C9A               	goto	u309_20
  6105  0499                     u309_21:
  6106  0499  2C96               	goto	i1l13319
  6107  049A                     u309_20:
  6108  049A  2C9B               	goto	i1l19237
  6109                           	
  6110  049B                     i1l13321:	
  6111                           	line	46
  6112                           	
  6113  049B                     i1l19237:	
  6114                           ;adc.c: 46: tem = (ADRESH << 8) | ADRESL;
  6115  049B  081B               	movf	(155)^080h,w	;volatile
  6116  049C  00F2               	movwf	(??_Get_ADCValue+0)+0
  6117  049D  01F3               	clrf	(??_Get_ADCValue+0)+0+1
  6118  049E  081C               	movf	(156)^080h,w	;volatile
  6119  049F  00F4               	movwf	(??_Get_ADCValue+2)+0
  6120  04A0  01F5               	clrf	(??_Get_ADCValue+2)+0+1
  6121  04A1  0874               	movf	(??_Get_ADCValue+2)+0,w
  6122  04A2  00F5               	movwf	(??_Get_ADCValue+2)+1
  6123  04A3  01F4               	clrf	(??_Get_ADCValue+2)+0
  6124  04A4  0872               	movf	0+(??_Get_ADCValue+0)+0,w
  6125  04A5  0474               	iorwf	0+(??_Get_ADCValue+2)+0,w
  6126  04A6  00F7               	movwf	(Get_ADCValue@tem)
  6127  04A7  0873               	movf	1+(??_Get_ADCValue+0)+0,w
  6128  04A8  0475               	iorwf	1+(??_Get_ADCValue+2)+0,w
  6129  04A9  00F8               	movwf	1+(Get_ADCValue@tem)
  6130                           	line	47
  6131                           	
  6132  04AA                     i1l19239:	
  6133                           ;adc.c: 47: return tem;
  6134  04AA  0878               	movf	(Get_ADCValue@tem+1),w
  6135  04AB  01F1               	clrf	(?_Get_ADCValue+1)
  6136  04AC  07F1               	addwf	(?_Get_ADCValue+1)
  6137  04AD  0877               	movf	(Get_ADCValue@tem),w
  6138  04AE  01F0               	clrf	(?_Get_ADCValue)
  6139  04AF  07F0               	addwf	(?_Get_ADCValue)
  6140                           
  6141  04B0  2CB1               	goto	i1l13322
  6142                           	
  6143  04B1                     i1l19241:	
  6144                           	line	48
  6145                           	
  6146  04B1                     i1l13322:	
  6147  04B1  0008               	return
  6148                           	opt stack 0
  6149                           GLOBAL	__end_of_Get_ADCValue
  6150  04B2                     	__end_of_Get_ADCValue:
  6151 ;; =============== function _Get_ADCValue ends ============
  6152                           
  6153                           	signat	_Get_ADCValue,4218
  6154                           	global	_Delay_Scan
  6155                           psect	text985,local,class=CODE,delta=2
  6156                           global __ptext985
  6157  06BA                     __ptext985:
  6158                           
  6159 ;; *************** function _Delay_Scan *****************
  6160 ;; Defined at:
  6161 ;;		line 12 in file "delay.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;		None
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;		None
  6166 ;; Return value:  Size  Location     Type
  6167 ;;		None               void
  6168 ;; Registers used:
  6169 ;;		wreg
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMMON   BANK0   BANK1
  6175 ;;      Params:         0       0       0
  6176 ;;      Locals:         0       0       0
  6177 ;;      Temps:          0       0       0
  6178 ;;      Totals:         0       0       0
  6179 ;;Total ram usage:        0 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; This function calls:
  6182 ;;		Nothing
  6183 ;; This function is called by:
  6184 ;;		_InterruptTimer0
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           psect	text985
  6188                           	file	"delay.c"
  6189                           	line	12
  6190                           	global	__size_of_Delay_Scan
  6191  000D                     	__size_of_Delay_Scan	equ	__end_of_Delay_Scan-_Delay_Scan
  6192                           	
  6193  06BA                     _Delay_Scan:	
  6194                           	opt	stack 8
  6195                           ; Regs used in _Delay_Scan: [wreg]
  6196                           	line	13
  6197                           	
  6198  06BA                     i1l19183:	
  6199                           ;delay.c: 13: if(delay_time > 0)
  6200  06BA  0020               	movlb 0	; select bank0
  6201  06BB  0831               	movf	(_delay_time+1),w
  6202  06BC  0430               	iorwf	(_delay_time),w
  6203  06BD  1903               	skipnz
  6204  06BE  2EC0               	goto	u303_21
  6205  06BF  2EC1               	goto	u303_20
  6206  06C0                     u303_21:
  6207  06C0  2EC6               	goto	i1l10681
  6208  06C1                     u303_20:
  6209                           	line	15
  6210                           	
  6211  06C1                     i1l19185:	
  6212                           ;delay.c: 14: {
  6213                           ;delay.c: 15: delay_time--;
  6214  06C1  3001               	movlw	low(01h)
  6215  06C2  02B0               	subwf	(_delay_time),f
  6216  06C3  3000               	movlw	high(01h)
  6217  06C4  3BB1               	subwfb	(_delay_time+1),f
  6218  06C5  2EC6               	goto	i1l10681
  6219                           	line	16
  6220                           	
  6221  06C6                     i1l10680:	
  6222                           	line	17
  6223                           	
  6224  06C6                     i1l10681:	
  6225  06C6  0008               	return
  6226                           	opt stack 0
  6227                           GLOBAL	__end_of_Delay_Scan
  6228  06C7                     	__end_of_Delay_Scan:
  6229 ;; =============== function _Delay_Scan ends ============
  6230                           
  6231                           	signat	_Delay_Scan,88
  6232                           	global	_Motor_RunTimeCount
  6233                           psect	text986,local,class=CODE,delta=2
  6234                           global __ptext986
  6235  054A                     __ptext986:
  6236                           
  6237 ;; *************** function _Motor_RunTimeCount *****************
  6238 ;; Defined at:
  6239 ;;		line 106 in file "motor.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;		None
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;		None
  6244 ;; Return value:  Size  Location     Type
  6245 ;;		None               void
  6246 ;; Registers used:
  6247 ;;		wreg
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMMON   BANK0   BANK1
  6253 ;;      Params:         0       0       0
  6254 ;;      Locals:         0       0       0
  6255 ;;      Temps:          0       0       0
  6256 ;;      Totals:         0       0       0
  6257 ;;Total ram usage:        0 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; This function calls:
  6260 ;;		Nothing
  6261 ;; This function is called by:
  6262 ;;		_InterruptTimer0
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           psect	text986
  6266                           	file	"motor.c"
  6267                           	line	106
  6268                           	global	__size_of_Motor_RunTimeCount
  6269  001A                     	__size_of_Motor_RunTimeCount	equ	__end_of_Motor_RunTimeCount-_Motor_RunTimeCount
  6270                           	
  6271  054A                     _Motor_RunTimeCount:	
  6272                           	opt	stack 8
  6273                           ; Regs used in _Motor_RunTimeCount: [wreg]
  6274                           	line	108
  6275                           	
  6276  054A                     i1l19175:	
  6277                           ;motor.c: 108: if((Motor_RunSta == Motor_AutoClosing) ||(Motor_RunSta == Motor_ManualClo
                                 sing)||(Motor_RunSta == Motor_Opening) )
  6278  054A  0020               	movlb 0	; select bank0
  6279  054B  083C               	movf	(_Motor_RunSta),w
  6280  054C  3A01               	xorlw	01h&0ffh
  6281  054D  1903               	skipnz
  6282  054E  2D50               	goto	u300_21
  6283  054F  2D51               	goto	u300_20
  6284  0550                     u300_21:
  6285  0550  2D5E               	goto	i1l19181
  6286  0551                     u300_20:
  6287                           	
  6288  0551                     i1l19177:	
  6289  0551  083C               	movf	(_Motor_RunSta),w
  6290  0552  3A02               	xorlw	02h&0ffh
  6291  0553  1903               	skipnz
  6292  0554  2D56               	goto	u301_21
  6293  0555  2D57               	goto	u301_20
  6294  0556                     u301_21:
  6295  0556  2D5E               	goto	i1l19181
  6296  0557                     u301_20:
  6297                           	
  6298  0557                     i1l19179:	
  6299  0557  083C               	movf	(_Motor_RunSta),w
  6300  0558  3A03               	xorlw	03h&0ffh
  6301  0559  1D03               	skipz
  6302  055A  2D5C               	goto	u302_21
  6303  055B  2D5D               	goto	u302_20
  6304  055C                     u302_21:
  6305  055C  2D63               	goto	i1l6715
  6306  055D                     u302_20:
  6307  055D  2D5E               	goto	i1l19181
  6308                           	
  6309  055E                     i1l6714:	
  6310                           	line	110
  6311                           	
  6312  055E                     i1l19181:	
  6313                           ;motor.c: 109: {
  6314                           ;motor.c: 110: Motor_RunTime++;
  6315  055E  3001               	movlw	low(01h)
  6316  055F  07AC               	addwf	(_Motor_RunTime),f
  6317  0560  3000               	movlw	high(01h)
  6318  0561  3DAD               	addwfc	(_Motor_RunTime+1),f
  6319  0562  2D63               	goto	i1l6715
  6320                           	line	111
  6321                           	
  6322  0563                     i1l6712:	
  6323                           	line	112
  6324                           	
  6325  0563                     i1l6715:	
  6326  0563  0008               	return
  6327                           	opt stack 0
  6328                           GLOBAL	__end_of_Motor_RunTimeCount
  6329  0564                     	__end_of_Motor_RunTimeCount:
  6330 ;; =============== function _Motor_RunTimeCount ends ============
  6331                           
  6332                           	signat	_Motor_RunTimeCount,88
  6333                           	global	_KeyScan
  6334                           psect	text987,local,class=CODE,delta=2
  6335                           global __ptext987
  6336  0564                     __ptext987:
  6337                           
  6338 ;; *************** function _KeyScan *****************
  6339 ;; Defined at:
  6340 ;;		line 36 in file "keyboard.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;		None
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;		None
  6345 ;; Return value:  Size  Location     Type
  6346 ;;		None               void
  6347 ;; Registers used:
  6348 ;;		wreg, status,2, status,0
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1
  6354 ;;      Params:         0       0       0
  6355 ;;      Locals:         0       0       0
  6356 ;;      Temps:          0       0       0
  6357 ;;      Totals:         0       0       0
  6358 ;;Total ram usage:        0 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; This function calls:
  6361 ;;		Nothing
  6362 ;; This function is called by:
  6363 ;;		_InterruptTimer0
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366                           psect	text987
  6367                           	file	"keyboard.c"
  6368                           	line	36
  6369                           	global	__size_of_KeyScan
  6370  0018                     	__size_of_KeyScan	equ	__end_of_KeyScan-_KeyScan
  6371                           	
  6372  0564                     _KeyScan:	
  6373                           	opt	stack 8
  6374                           ; Regs used in _KeyScan: [wreg+status,2+status,0]
  6375                           	line	39
  6376                           	
  6377  0564                     i1l19121:	
  6378                           ;keyboard.c: 37: static unsigned char KeyBuf = 0xff;
  6379                           ;keyboard.c: 39: KeyBuf = (KeyBuf << 1) | RA5;
  6380  0564  1003               	clrc
  6381  0565  0020               	movlb 0	; select bank0
  6382  0566  1A8C               	btfsc	(101/8),(101)&7
  6383  0567  1403               	setc
  6384  0568  0DD8               	rlf	(KeyScan@KeyBuf),f
  6385                           	line	41
  6386                           	
  6387  0569                     i1l19123:	
  6388                           ;keyboard.c: 41: if(KeyBuf == 0xff)
  6389  0569  0858               	movf	(KeyScan@KeyBuf),w
  6390  056A  3AFF               	xorlw	0FFh&0ffh
  6391  056B  1D03               	skipz
  6392  056C  2D6E               	goto	u288_21
  6393  056D  2D6F               	goto	u288_20
  6394  056E                     u288_21:
  6395  056E  2D73               	goto	i1l19127
  6396  056F                     u288_20:
  6397                           	line	43
  6398                           	
  6399  056F                     i1l19125:	
  6400                           ;keyboard.c: 42: {
  6401                           ;keyboard.c: 43: KeySta = 0x01;
  6402  056F  01D9               	clrf	(_KeySta)
  6403  0570  1403               	bsf	status,0
  6404  0571  0DD9               	rlf	(_KeySta),f
  6405                           	line	44
  6406                           ;keyboard.c: 44: }
  6407  0572  2D7B               	goto	i1l8036
  6408                           	line	45
  6409                           	
  6410  0573                     i1l8033:	
  6411                           	
  6412  0573                     i1l19127:	
  6413                           ;keyboard.c: 45: else if(KeyBuf == 0x00)
  6414  0573  08D8               	movf	(KeyScan@KeyBuf),f
  6415  0574  1D03               	skipz
  6416  0575  2D77               	goto	u289_21
  6417  0576  2D78               	goto	u289_20
  6418  0577                     u289_21:
  6419  0577  2D7B               	goto	i1l8036
  6420  0578                     u289_20:
  6421                           	line	47
  6422                           	
  6423  0578                     i1l19129:	
  6424                           ;keyboard.c: 46: {
  6425                           ;keyboard.c: 47: KeySta = 0x00;
  6426  0578  01D9               	clrf	(_KeySta)
  6427  0579  2D7B               	goto	i1l8036
  6428                           	line	48
  6429                           	
  6430  057A                     i1l8035:	
  6431  057A  2D7B               	goto	i1l8036
  6432                           	line	50
  6433                           	
  6434  057B                     i1l8034:	
  6435                           	
  6436  057B                     i1l8036:	
  6437  057B  0008               	return
  6438                           	opt stack 0
  6439                           GLOBAL	__end_of_KeyScan
  6440  057C                     	__end_of_KeyScan:
  6441 ;; =============== function _KeyScan ends ============
  6442                           
  6443                           	signat	_KeyScan,88
  6444                           psect	text988,local,class=CODE,delta=2
  6445                           global __ptext988
  6446  0000                     __ptext988:
  6447                           	global	btemp
  6448  007E                     	btemp set 07Eh
  6449                           
  6450                           	DABS	1,126,2	;btemp
  6451                           	global	wtemp0
  6452  007E                     	wtemp0 set btemp


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Thu Aug 06 14:20:18 2020

        __end_of_ADC_AllPin_Init 06DE                ??_InterruptTimer0 007C                               _RD 0CA8  
        ?_Motor_Counterclockwise 0070                               _WR 0CA9          __size_of_Motor_GetStaus 000B  
             _Motor_RunTimeCount 054A                              _GIE 005F                              _RA2 0062  
                            _RA4 0064                              _RC1 0071                              _RA5 0065  
                            _RC2 0072                              _RC5 0075              internal_E2Read@addr 0049  
                            wreg 0009              ?_Motor_RunTimeCount 0070         __size_of_Motor_Clockwise 000D  
        __size_of_Motor_LowPower 0010                             l1351 004E                             l1360 00AC  
                           l1352 0069                             l1361 00AB                             l1353 0084  
                           l1362 0116                             l1370 00F0                             l1354 007E  
                           l1363 0115                             l1371 0109                             l1372 00FD  
                           l1364 00CE                             l1356 007C                             l1373 0104  
                           l1365 00D0                             l1357 0083                             l1374 0108  
                           l1366 00D0                             l1358 0088                             l4007 0708  
                           l1375 0117                             l1367 00DB                             l1359 0093  
                           l1376 0118                             l1368 00E3                             l1377 0118  
                           l1369 00E2                             l5350 028C                             l2687 0705  
                           l5360 0286                             l5352 01FE                             l5361 0286  
                           l5353 0258                             l5362 0271                             l5354 0229  
                           l5370 0148                             l5363 0285                             l5355 0257  
                           l5371 0160                             l8020 06D2                             l5364 0284  
                           l5356 0256                             l5380 01DB                             l5372 015F  
                           l5357 0240                             l5365 028C                             l5373 01EA  
                           l5381 01DA                             l5358 0255                             l5382 01DC  
                           l5374 0161                             l5359 0254                             l5375 018A  
                           l5383 01EA                             l8040 05D3                             l5368 01DE  
                           l5376 01A2                             l8041 05D2                             l8025 0549  
                           l5377 01A1                             l5369 0121                             l8042 05D3  
                           l8026 053E                             l5378 01A3                             l5386 06EF  
                           l8027 0543                             l5379 01C3                             l8028 0549  
                           l6702 05BE                             l8039 05CA                             l6705 0674  
                           l6708 06E6                             l6709 06E8                             l6693 04DF  
                           l6696 06B9                             l9352 069F                             l9361 06FF  
                           l9346 0664                             l9370 0707                             l9355 052C  
                           l6699 06AC                             l9364 06FA                             l9349 05E8  
                           l9373 0653                             l9365 06FA                             l9366 06FB  
                           l9367 06FB                             _CFGS 0CAE                             STR_1 033F  
                           STR_2 035D                             STR_3 0379                             STR_4 038B  
                           STR_5 034E                             STR_6 0301                             STR_7 036B  
                           STR_8 0318                             STR_9 0382                             u3100 0585  
                           u3101 0584                             u3110 0591                             u3111 0590  
                           u3200 04F8                             u3201 04F7                             u3050 06E3  
                           u3210 0534                             u3051 06E2                             u3211 0533  
                           u3060 05C6                             u3140 0456                             u3220 0539  
                           u3300 0234                             u3061 05C5                             u3141 0455  
                           u3221 0538                             u3301 0233                             u3070 05D0  
                           u3150 0469                             u3310 0247                             u3230 01F2  
                           u3071 05CF                             u3151 0468                             u3311 0246  
                           u3231 01F1                             u3160 047F                             u3320 025E  
                           u3240 01F8                             u3400 0194                             u3161 047E  
                           u3321 025D                             u3241 01F7                             u3401 0193  
                           u3170 041F                             u3330 0264                             u3250 01FD  
                           u3410 01A9                             u3171 041E                             u3331 0263  
                           u3251 01FC                             u3411 01A8                             u3180 0440  
                           u3340 0277                             u3260 0207                             u3420 01B2  
                           u3500 00A7                             u3181 043F                             u3341 0276  
                           u3261 0206                             u3421 01B1                             u3501 00A6  
                           u3190 044B                             u3270 021F                             u3430 01CD  
                           u3350 0127                             u3510 00B3                             u3191 044A  
                           u3271 021E                             u3431 01CC                             u3351 0126  
                           u3511 00B2                             _PIE1 0091                             u3280 0225  
                           u3360 0130                             u3520 00C9                             u3440 004C  
                           u3281 0224                             u3361 012F                             u3521 00C8  
                           u3441 004B                             u3290 022F                             u3370 0152  
                           u3530 00D5                             u3450 0068                             u3291 022E  
                           u3371 0151                             u3531 00D4                             u3451 0067  
                           u3380 0168                             u3540 00DF                             u3460 0070  
                           u3381 0167                             u3541 00DE                             u3461 006F  
                           u3445 0048                             u3390 0171                             u3550 00E9  
                           u3470 0076                             u3391 0170                             u3551 00E8  
                           u3471 0075                             u3455 0064                             u3560 00EE  
                           u3480 007C                             u3561 00ED                             u3481 007B  
                           u3570 00F5                             u3490 0099                             u3571 00F4  
                           u3491 0098                             u3580 00FB                             u3581 00FA  
                           u2870 0630                             u3590 0101                             u2871 062F  
                           u3591 0100                             _TMR0 0015                             _WREN 0CAA  
                           _WPUA 020C                             _WPUC 020E                             _main 001A  
                           fsr0h 0005                             fsr1h 0007                             fsr0l 0004  
                           indf0 0000                             indf1 0001                             fsr1l 0006  
                           btemp 007E                       _Delay_Scan 06BA                 __end_of_ADC_Init 05FD  
          ??_internal_E2promInit 004B                             start 0018                       _e2SavePara 05FD  
           ??_Motor_RunTimeCount 0070                  __end_of_KeyInit 06D3                  __end_of_KeyScan 057C  
 __end_of_Motor_Counterclockwise 06BA       __size_of_PowerSwitch_Delay 0017                      ?_ISR_Manger 0070  
                          l13313 06DD                            l10674 062A                            l10675 0629  
                          l10676 0631                            l13316 05FC                            l10677 0631  
                          l14630 0592                            l14625 0642                            l14633 0620  
                          l14628 0587                            l14636 0692                            l14629 0592  
                          l19101 06F6                            l19103 06F8                            l19105 0665  
                          l19201 06E8                            l19051 05D6                            l19107 066A  
                          l19203 06AD                            l19211 06A0                            l19053 050B  
                          l19061 0656                            l19109 066E                            l19205 06B2  
                          l19213 06A5                            l19221 05C6                            l19301 0424  
                          l15950 050A                            l19055 050D                            l19063 065C  
                          l19071 064E                            l19207 06B6                            l19215 06A6  
                          l19223 05CA                            l19311 0438                            l19303 0429  
                          l15951 050A                            l15960 0465                            l19049 05D4  
                          l19057 052B                            l19073 0652                            l19065 0643  
                          l19081 06D0                            l19209 06B7                            l19217 06AA  
                          l19225 05D0                            l15961 046A                            l19313 043A  
                          l19305 042F                            l19321 05EE                            l19401 01EB  
                          l15962 0480                            l15954 0477                            l15970 0420  
                          l19059 0654                            l19067 0645                            l19075 0703  
                          l19083 0632                            l19091 04DD                            l19219 05C1  
                          l19243 06D3                            l19251 0586                            l15963 0480  
                          l15955 0450                            l15971 043C                            l19307 0434  
                          l19315 0442                            l19323 05F4                            l19331 04E2  
                          l19411 0212                            l19403 01F2                            l15956 0451  
                          l15972 043C                            l19069 064B                            l19077 06C7  
                          l19085 04B2                            l19093 0621                            l19245 06D7  
                          l19253 0587                            l15957 0451                            l15973 0440  
                          l19309 0436                            l19325 05F5                            l19317 05E9  
                          l19341 04FD                            l19333 04E4                            l19421 022F  
                          l19413 0219                            l19405 01F8                            l19501 01A9  
                          l15958 0457                            l15974 044B                            l15966 0442  
                          l19079 06CB                            l19087 04D4                            l19095 062A  
                          l19255 058B                            l19247 057C                            l15959 0465  
                          l15975 044C                            l15967 0419                            l19327 05FB  
                          l19319 05EC                            l19335 04F1                            l19351 0543  
                          l19343 052D                            l19431 0247                            l19423 0234  
                          l19415 021F                            l19407 01FE                            l19503 01B2  
                          l19511 01C3                            l15968 041A                            l19089 04D6  
                          l19097 06FC                            l19193 06DE                            l19249 057F  
                          l19281 0457                            l15969 041A                            l19337 04F8  
                          l19329 04E0                            l19345 0534                            l19361 069D  
                          l19353 0693                            l19441 0264                            l19433 024B  
                          l19425 0238                            l19417 0225                            l19409 0207  
                          l19513 01CD                            l19505 01B6                            l19521 01DE  
                          l19601 00D5                            l15978 060F                            l19099 0706  
                          l19195 06E3                            l19291 0472                            l19283 0460  
                          l19339 04F9                            l19347 0539                            l19363 069E  
                          l19355 0699                            l19371 061A                            l19451 027B  
                          l19443 0268                            l19435 0250                            l19427 023C  
                          l19419 0229                            l19515 01D1                            l19507 01BB  
                          l19523 06E9                            l19611 00F0                            l19603 00DF  
                          l19531 0028                            l19197 06E5                            l19285 0462  
                          l19293 0477                            l19349 053E                            l19357 069A  
                          l19373 061E                            l19365 0610                            l19381 0687  
                          l19453 0280                            l19445 026D                            l19429 0240  
                          l19437 0258                            l19517 01D6                            l19509 01BE  
                          l19461 0130                            l19525 06EC                            l19621 010C  
                          l19613 00F5                            l19605 00E3                            l19541 0037  
                          l19533 002B                            l19199 06E6                            l19287 0463  
                          l19279 044F                            l19295 0413                            l19359 069B  
                          l19367 0612                            l19375 05FF                            l19383 068A  
                          l19391 05AE                            l19447 0271                            l19439 025E  
                          l19519 01DD                            l19463 0134                            l19471 0148  
                          l19455 0119                            l19623 010F                            l19615 00FC  
                          l19607 00E9                            l19551 004D                            l19543 003A  
                          l19535 002E                            l19527 001A                            l19289 046A  
                          l19297 0414                            l19369 0615                            l19377 0603  
                          l19385 068F                            l19393 05AF                            l19449 0277  
                          l19481 0168                            l19473 0152                            l19465 0139  
                          l19457 0121                            l19625 0111                            l19617 0101  
                          l19609 00EF                            l19561 0070                            l19553 004E  
                          l19545 003C                            l19537 0031                            l19529 001C  
                          l19299 0420                            l19387 0690                            l19379 0685  
                          l19395 05B2                            l19483 0171                            l19491 018A  
                          l19475 0156                            l19467 0140                            l19459 0127  
                          l19619 010A                            l19571 008B                            l19563 0076  
                          l19555 0056                            l19547 003D                            l19539 0034  
                          l19397 05B4                            l19389 05A9                            l19493 0194  
                          l19485 017D                            l19477 015B                            l19469 0143  
                          l19581 009C                            l19573 008E                            l19565 007E  
                          l19557 005B                            l19549 003F                            l19399 05BB  
                          l19495 0198                            l19487 0182                            l19479 0161  
                          l19591 00B3                            l19583 009F                            l19575 0090  
                          l19567 0084                            l19559 0069                            l19497 019D  
                          l19489 0185                            l19593 00BC                            l19585 00A2  
                          l19577 0093                            l19569 0088                            l19499 01A3  
                          l19595 00BF                            l19587 00A7                            l19579 0099  
                          l19597 00C2                            l19589 00AC                            l19599 00C9  
                          ?_main 004F                            _EEADR 0191                            STR_10 032E  
                          _CARRY 0018                            _EEPGD 0CAF                            _RCSTA 019D  
                          _PORTA 000C                            _PORTC 000E                            _TRISA 008C  
                          _TRISC 008E                            _TXREG 019A                            _TXSTA 019E  
        __size_of_WatchDog_Reset 0006              internal_E2Write@dat 0046              internal_E2Write@len 0047  
            internal_E2Write@reg 0049            _PowerSwitch_EnableCnt 003D                  ??_Contrl_Signal 0079  
                     _Ctr_Signal 003A                            main@i 0054                            status 0003  
                          wtemp0 007E                 __end_of_Delay_MS 0632                Motor_LowPower@tem 0047  
               ?_ADC_AllPin_Init 0070                 __end_of_MainLoop 06F0                     __end_of_main 0119  
                  KeyScan@KeyBuf 0058      __size_of_PowerSwitch_Enable 0011                           ??_main 0053  
   __size_of_ContrlSignal_Driver 00A2                 _AutoOrManualMode 0039                           _ADCON0 009D  
             __size_of_KeyAction 0015                           _ADCON1 009E                           _ADRESH 009C  
                         _ADRESL 009B                           _EEADRL 0191                           _EEDATA 0193  
                         _EEDATL 0193                           _EECON1 0195                           _EECON2 0196  
          __size_of_Get_ADCValue 0031                           _APFCON 011D            __end_of_WatchDog_Init 0700  
                         _ANSELA 018C                           _ANSELC 018E               __size_of_KeyDriver 001D  
                         i1l2692 0684                           i1l2695 0014                           u300_20 0551  
                         i1l2696 0014                           u300_21 0550                           u301_20 0557  
                         i1l8033 0573                           u301_21 0556                           i1l8034 057B  
                         i1l8035 057A                           i1l8036 057B                           i1l6712 0563  
                         u302_20 055D                           u302_21 055C                           i1l6714 055E  
                         i1l6715 0563                           u303_20 06C1                           u303_21 06C0  
                         u304_20 000C                           u304_21 000B                           _INTCON 000B  
                         u308_25 048C                           u309_20 049A                           u309_21 0499  
            _PIC_EnableInterrupt 0703                           u290_20 039D                           u290_21 039C  
                         u291_20 03AA                           u291_21 03A9                           u292_20 03C4  
                         u292_21 03C3                           u293_20 03D3                           u293_21 03D2  
                         u294_20 03DC                           u294_21 03DB                           u295_20 03E8  
                         u295_21 03E7                           u288_20 056F                           u296_20 03EE  
                         u288_21 056E                           u296_21 03ED                           u289_20 0578  
                         u297_20 03F4                           u289_21 0577                           u297_21 03F3  
                         u298_20 03F9                           _OSCCON 0099                           u298_21 03F8  
                         u299_20 03FD                           u299_21 03FC              __size_of_ISR_Manger 0014  
                         _SPBRGH 019C                           _SPBRGL 019B                           _WDTCON 0097  
                         _SPLLEN 04CF                ??_Motor_Clockwise 0046                      ?_Delay_Scan 0070  
                      ??_KeyInit 0046                        ??_KeyScan 0070                           _KeySta 0059  
           internal_E2Write@addr 004A                      ?_e2SavePara 0070      __end_of_PIC_ConfigOptionReg 052D  
                     _Motor_Init 04B2                       _Motor_Stop 05A9             ?_PIC_EnableInterrupt 0070  
                 _Motor_GetStaus 06DE                  _PowerSwitch_Cnt 002E                           clrloop 06F1  
                   _Get_ADCValue 0481                        ?_ADC_Init 0070                   _Motor_LowPower 0665  
      __size_of_PIC_CofnigTimer0 0011     __end_of_PIC_ConfigClock32Khz 06A0                 ??_PIC_ConfigGPIO 0046  
            Contrl_Signal@ctrBuf 0038        __size_of_PowerSwitch_Init 0011              Contrl_Signal@period 0028  
                _InterruptTimer0 0675                   __pcstackCOMMON 0070                     __pidataBANK0 0700  
              __end_of_KeyAction 05D4           __end_of_Motor_GetStaus 06E9            ??_PIC_EnableInterrupt 0046  
              __end_of_KeyDriver 054A           __size_of_Feed_WatchDog 0002        __size_of_internal_E2Write 003C  
        internal_E2promInit@addr 004D     __size_of_PowerSwitch_Disable 000E              __size_of_Delay_Scan 000D  
                 _WatchDog_Reset 06F6                       ??_ADC_Init 0047                       _System_Sta 003F  
         __end_of_Motor_LowPower 0675                        ?_Delay_MS 0046              __size_of_e2SavePara 0013  
                      ?_MainLoop 0070                       __pbssBANK0 0020                    e2SavePara@val 004D  
                     _delay_time 0030                       __pmaintext 001A                      ?_Motor_Init 0070  
                    ?_Motor_Stop 0070                    ?_Uart_SendStr 0070         __size_of_PIC_ConfigClock 0015  
                  ?_Motor_Driver 0070                  ?_Motor_GetStaus 0070                       __pintentry 0004  
                   ??_ISR_Manger 007C            PowerSwitch_Enable@tmp 0049                          _BAUDCON 019F  
       __size_of_internal_E2Read 0034           __end_of_WatchDog_Reset 06FC                          i1l12010 03DE  
                        i1l12011 0403                          i1l12004 03A1                          i1l12005 0410  
                        i1l12013 03F9                          i1l12006 03C7                          i1l12014 0410  
                        i1l12007 03CD                          i1l12008 03D7                          i1l12009 03DF  
                        i1l10680 06C6                          i1l13320 0496                          i1l10681 06C6  
                        i1l13321 049B                          i1l13322 04B1                          i1l13319 0496  
                        i1l19111 0675                          i1l19121 0564                          i1l19113 0678  
                        i1l19123 0569                          i1l19131 0394                          i1l19115 067B  
                        i1l19125 056F                          i1l19141 03B0                          i1l19133 0399  
                        i1l19117 067E                          i1l19127 0573                          i1l19231 0484  
                        i1l19151 03D3                          i1l19143 03BB                          i1l19135 039D  
                        i1l19119 0681                          i1l19129 0578                          i1l19241 04B1  
                        i1l19233 0489                          i1l19161 03EE                          i1l19153 03D7  
                        i1l19145 03C4                          i1l19137 03AA                          i1l19235 0494  
                        i1l19171 040B                          i1l19163 03F4                          i1l19155 03DC  
                        i1l19147 03C7                          i1l19139 03AC                          i1l19181 055E  
                        i1l19237 049B                          i1l19229 0482                          i1l19173 040D  
                        i1l19165 03FD                          i1l19157 03DF                          i1l19149 03CD  
                        i1l19175 054A                          i1l19183 06BA                          i1l19239 04AA  
                        i1l19167 03FF                          i1l19159 03E8                          i1l19191 000F  
                        i1l19177 0551                          i1l19185 06C1                          i1l19169 0403  
                        i1l19179 0557                          i1l19187 0008                          i1l19189 000C  
                     ??_Delay_MS 0048                  ?_Motor_LowPower 0070                    _System_StaBck 0040  
        __end_of_InterruptTimer0 0685      __end_of_internal_E2promInit 050B                       _isLowPower 0042  
                     ??_MainLoop 004F                       __stringtab 0300                    _Feed_WatchDog 0706  
             __end_of_ISR_Manger 0018                          _KeyInit 06C7                          _KeyScan 0564  
            _ContrlSignal_Driver 01EB                   ??_Uart_SendStr 0046                   ??_Motor_Driver 004E  
    __size_of_Motor_RunTimeCount 001A             _PIC_ConfigClock32Khz 0693                  ?_WatchDog_Reset 0070  
                        _average 0024             ?_ContrlSignal_Driver 0070                       _numOf120ms 0036  
                _Motor_Clockwise 06A0                 _PIC_CofnigTimer0 0643              __size_of_Motor_Init 002E  
            __size_of_Motor_Stop 0016                 _PowerSwitch_Init 0632            __end_of_Contrl_Signal 0411  
           end_of_initialization 05A7                   ?_Feed_WatchDog 0070                  KeyDriver@backup 0057  
                   _gE2promState 0043                     ??_Delay_Scan 0070                     ??_e2SavePara 004B  
     __end_of_PowerSwitch_Enable 0621            ?_PIC_ConfigClock32Khz 0070             Contrl_Signal@dis_tmp 007A  
              ??_PIC_ConfigClock 0046                 _internal_E2Write 0411         __size_of_ADC_AllPin_Init 000B  
          ??_ContrlSignal_Driver 004C               __end_of_Delay_Scan 06C7                ??_internal_E2Read 0048  
               ?_InterruptTimer0 0070                __size_of_ADC_Init 0014               __end_of_e2SavePara 0610  
             internal_E2Read@dat 0046               internal_E2Read@len 0047         ??_Motor_Counterclockwise 0046  
                  Motor_Stop@tem 004B              _PowerSwitch_Disable 0685                       main@tmpbuf 0056  
         __size_of_WatchDog_Init 0004          __end_of_Motor_Clockwise 06AD     __size_of_PIC_ConfigOptionReg 0022  
                      _KeyAction 05BF               Motor_Clockwise@tem 0047                        _KeyDriver 052D  
           ?_PowerSwitch_Disable 0070              start_initialization 0593             __end_of_Uart_SendStr 0709  
                ??_Feed_WatchDog 0046             __end_of_Motor_Driver 01EB                __size_of_Delay_MS 0011  
              _gPhaseVoltage_CH1 0032                _gPhaseVoltage_CH2 0034                __size_of_MainLoop 0007  
               ??_Motor_GetStaus 0046      __end_of_PIC_EnableInterrupt 0706                     ??_Motor_Init 0046  
                   ??_Motor_Stop 004A           ??_PIC_ConfigClock32Khz 0046                      __pdataBANK0 0057  
                      _RunMode_t 003E                 ??_Motor_LowPower 0046                       ?_KeyAction 0070  
          ??_PowerSwitch_Disable 0048                       ?_KeyDriver 0070                    _Motor_RunTime 002C  
                  __pcstackBANK0 0046                ??_ADC_AllPin_Init 0046               InterruptTimer0@cnt 0020  
             __end_of_Motor_Init 04E0           PowerSwitch_Delay@delay 0047               __end_of_Motor_Stop 05BF  
                  _WatchDog_Init 06FC                         ?_KeyInit 0070                         ?_KeyScan 0070  
__size_of_Motor_Counterclockwise 000D          __size_of_PIC_ConfigGPIO 0011                  Get_ADCValue@tem 0077  
               ??_WatchDog_Reset 0046         __end_of_PIC_CofnigTimer0 0654                 KeyAction@KeyCode 0046  
                      __ptext950 01EB                        __ptext951 05A9                        __ptext960 044D  
                      __ptext952 0685                        __ptext961 057C                        __ptext953 05FD  
                      __ptext970 0706                        __ptext962 06D3                        __ptext954 0610  
                      __ptext971 06FC                        __ptext963 05BF                        __ptext955 0693  
                      __ptext980 05D4                        __ptext972 0621                        __ptext964 06A0  
                      __ptext956 052D                        __ptext948 06E9                        __ptext973 04B2  
                      __ptext965 06AD                        __ptext957 04E0                        __ptext949 0119  
                      __ptext982 0675                        __ptext974 0632                        __ptext966 06DE  
                      __ptext958 05E9                        __ptext983 0394                        __ptext975 06C7  
                      __ptext967 0708                        __ptext959 0411                        __ptext984 0481  
                      __ptext976 0703                        __ptext968 0665                        __ptext985 06BA  
                      __ptext977 0643                        __ptext969 06F6                        __ptext986 054A  
                      __ptext978 0654                        __ptext987 0564                        __ptext979 050B  
                      __ptext988 0000                        _flag_uart 0041         __end_of_PowerSwitch_Init 0643  
                      __pstrings 0300                 ?_Motor_Clockwise 0070              Get_ADCValue@channel 0076  
                       _ADC_Init 05E9           PowerSwitch_Disable@tmp 0049                   ?_WatchDog_Init 0070  
       __end_of_internal_E2Write 044D     __size_of_internal_E2promInit 002B       __end_of_Motor_RunTimeCount 0564  
                _PIC_ConfigClock 05D4                  _internal_E2Read 044D                      ??_KeyAction 0046  
          __size_of_Uart_SendStr 0001                    ?_Get_ADCValue 0070           _Motor_Counterclockwise 06AD  
          __size_of_Motor_Driver 00D2                      ??_KeyDriver 0047               _PowerSwitch_Enable 0610  
                       _Delay_MS 0621                         _MainLoop 06E9              ?_PowerSwitch_Enable 0070  
            _PIC_ConfigOptionReg 050B                 __size_of_KeyInit 000C                 __size_of_KeyScan 0018  
                   _Uart_SendStr 0708                     _Motor_Driver 0119      __end_of_ContrlSignal_Driver 028D  
           ??_PowerSwitch_Enable 0048                     _Motor_RunSta 003C           __size_of_Contrl_Signal 007D  
           ?_PIC_ConfigOptionReg 0070                   ??_Get_ADCValue 0072                  ??_WatchDog_Init 0046  
        __end_of_PIC_ConfigClock 05E9                    __size_of_main 00FF                    _Ctr_SignalBck 003B  
       __size_of_InterruptTimer0 0010          __end_of_internal_E2Read 0481                         clear_ram 06F0  
                 _PIC_ConfigGPIO 0654                         main@argc 004F                         main@argv 0051  
          ??_PIC_ConfigOptionReg 0046                _PowerSwitch_Delay 057C                  _ADC_AllPin_Init 06D3  
             ?_PowerSwitch_Delay 0070                       Delay_MS@ms 0046              ??_PowerSwitch_Delay 0046  
          __end_of_Feed_WatchDog 0708                         intlevel1 0000                    _Contrl_Signal 0394  
         __end_of_PIC_ConfigGPIO 0665        Motor_Counterclockwise@tem 0047        __end_of_PowerSwitch_Delay 0593  
    __end_of_PowerSwitch_Disable 0693                ?_PIC_CofnigTimer0 0070    __size_of_PIC_ConfigClock32Khz 000D  
              ?_PowerSwitch_Init 0070                       _ISR_Manger 0004     __size_of_PIC_EnableInterrupt 0003  
             ??_PIC_CofnigTimer0 0046               ??_PowerSwitch_Init 0046                       _OPTION_REG 0095  
            _internal_E2promInit 04E0                  Uart_SendStr@str 0070          Contrl_Signal@signal_cnt 002A  
                 ?_Contrl_Signal 0070                 ?_PIC_ConfigClock 0070                  ?_PIC_ConfigGPIO 0070  
           __end_of_Get_ADCValue 04B2             ?_internal_E2promInit 0070                ?_internal_E2Write 0046  
               ?_internal_E2Read 0046               ??_internal_E2Write 0048  
