

HI-TECH Software PIC LITE Macro Assembler V9.82 build 9453 
                                                                                               Fri Jul 24 14:20:13 2020

HI-TECH Software Omniscient Code Generator (Lite mode) build 9453
     1  0000                     opt subtitle "HI-TECH Software Omniscient Code Generator (Lite mode) build 9453"
     2                           
     3                           opt pagewidth 120
     4                           
     5                           	opt lm
     6                           
     7                           	processor	16LF1823
     8                           clrc	macro
     9                           	bcf	3,0
    10  0000                     	endm
    11                           clrz	macro
    12                           	bcf	3,2
    13  0000                     	endm
    14                           setc	macro
    15                           	bsf	3,0
    16  0000                     	endm
    17                           setz	macro
    18                           	bsf	3,2
    19  0000                     	endm
    20                           skipc	macro
    21                           	btfss	3,0
    22  0000                     	endm
    23                           skipz	macro
    24                           	btfss	3,2
    25  0000                     	endm
    26                           skipnc	macro
    27                           	btfsc	3,0
    28  0000                     	endm
    29                           skipnz	macro
    30                           	btfsc	3,2
    31  0000                     	endm
    32  0000                     indf	equ	0
    33  0000                     indf0	equ	0
    34  0001                     indf1	equ	1
    35  0002                     pc	equ	2
    36  0002                     pcl	equ	2
    37  0003                     status	equ	3
    38  0004                     fsr0l	equ	4
    39  0005                     fsr0h	equ	5
    40  0006                     fsr1l	equ	6
    41  0007                     fsr1h	equ	7
    42  0008                     bsr	equ	8
    43  0009                     wreg	equ	9
    44  000B                     intcon	equ	11
    45  0001                     c	equ	1
    46  0000                     z	equ	0
    47  000A                     pclath	equ	10
    48                           # 22 "main.c"
    49                           	psect config,class=CONFIG,delta=2 ;#
    50                           # 22 "main.c"
    51  8007  FF6C               	dw 0xFFFC & 0xFFEF & 0xFFFF & 0xFFFF & 0xFF7F & 0xFFFF & 0xFFFF & 0xFFFF & 0xFFFF & 0xF
                                 FFF ;#
    52                           # 23 "main.c"
    53                           	psect config,class=CONFIG,delta=2 ;#
    54                           # 23 "main.c"
    55  8008  DCFF               	dw 0xFFFF&0xFEFF&0xDFFF&0xFDFF&0xFFFF&0xFFFF ;#
    56                           	FNCALL	_main,_PIC_ConfigClock
    57                           	FNCALL	_main,_PIC_ConfigOptionReg
    58                           	FNCALL	_main,_PIC_ConfigGPIO
    59                           	FNCALL	_main,_PIC_CofnigTimer0
    60                           	FNCALL	_main,_PIC_EnableInterrupt
    61                           	FNCALL	_main,_KeyInit
    62                           	FNCALL	_main,_PowerSwitch_Init
    63                           	FNCALL	_main,_Motor_Init
    64                           	FNCALL	_main,_ADC_Init
    65                           	FNCALL	_main,_internal_E2promInit
    66                           	FNCALL	_main,_Delay_MS
    67                           	FNCALL	_main,_Motor_Stop
    68                           	FNCALL	_main,_WatchDog_Init
    69                           	FNCALL	_main,_Feed_WatchDog
    70                           	FNCALL	_main,_KeyDriver
    71                           	FNCALL	_main,_MainLoop
    72                           	FNCALL	_main,_WatchDog_Reset
    73                           	FNCALL	_main,_Motor_LowPower
    74                           	FNCALL	_main,_PIC_ConfigClock32Khz
    75                           	FNCALL	_MainLoop,_ContrlSignal_Driver
    76                           	FNCALL	_MainLoop,_Motor_Driver
    77                           	FNCALL	_Motor_Driver,_Motor_GetStaus
    78                           	FNCALL	_Motor_Driver,_Uart_SendStr
    79                           	FNCALL	_Motor_Driver,_Motor_Stop
    80                           	FNCALL	_Motor_Driver,_e2SavePara
    81                           	FNCALL	_Motor_Driver,_Delay_MS
    82                           	FNCALL	_ContrlSignal_Driver,_PowerSwitch_Enable
    83                           	FNCALL	_ContrlSignal_Driver,_Delay_MS
    84                           	FNCALL	_ContrlSignal_Driver,_Motor_GetStaus
    85                           	FNCALL	_ContrlSignal_Driver,_Motor_Stop
    86                           	FNCALL	_ContrlSignal_Driver,_Uart_SendStr
    87                           	FNCALL	_ContrlSignal_Driver,_Motor_Counterclockwise
    88                           	FNCALL	_ContrlSignal_Driver,_Motor_Clockwise
    89                           	FNCALL	_Motor_Stop,_Delay_MS
    90                           	FNCALL	_Motor_Stop,_PowerSwitch_Disable
    91                           	FNCALL	_PowerSwitch_Disable,_PowerSwitch_Delay
    92                           	FNCALL	_e2SavePara,_internal_E2Write
    93                           	FNCALL	_PowerSwitch_Enable,_PowerSwitch_Delay
    94                           	FNCALL	_KeyDriver,_KeyAction
    95                           	FNCALL	_internal_E2promInit,_internal_E2Read
    96                           	FNCALL	_internal_E2promInit,_internal_E2Write
    97                           	FNCALL	_ADC_Init,_ADC_AllPin_Init
    98                           	FNROOT	_main
    99                           	FNCALL	_ISR_Manger,_InterruptTimer0
   100                           	FNCALL	_InterruptTimer0,_KeyScan
   101                           	FNCALL	_InterruptTimer0,_Contrl_Signal
   102                           	FNCALL	_InterruptTimer0,_Motor_RunTimeCount
   103                           	FNCALL	_InterruptTimer0,_Delay_Scan
   104                           	FNCALL	_Contrl_Signal,_Get_ADCValue
   105                           	FNCALL	intlevel1,_ISR_Manger
   106                           	global	intlevel1
   107                           	FNROOT	intlevel1
   108                           	global	KeyDriver@backup
   109                           	global	KeyScan@KeyBuf
   110                           	global	_KeySta
   111                           psect	idataBANK0,class=CODE,space=0,delta=2
   112                           global __pidataBANK0
   113  0700                     __pidataBANK0:
   114                           	file	"keyboard.c"
   115                           	line	18
   116                           
   117                           ;initializer for KeyDriver@backup
   118  0700  3401               	retlw	01h
   119                           	line	37
   120                           
   121                           ;initializer for KeyScan@KeyBuf
   122  0701  34FF               	retlw	0FFh
   123                           	line	3
   124                           
   125                           ;initializer for _KeySta
   126  0702  3401               	retlw	01h
   127                           	global	InterruptTimer0@cnt
   128                           	global	_average
   129                           	global	Contrl_Signal@period
   130                           	global	Contrl_Signal@signal_cnt
   131                           	global	_Motor_RunTime
   132                           	global	_PowerSwitch_Cnt
   133                           	global	_delay_time
   134                           	global	_gPhaseVoltage_CH1
   135                           	global	_gPhaseVoltage_CH2
   136                           	global	_numOf120ms
   137                           	global	Contrl_Signal@ctrBuf
   138                           	global	_AutoOrManualMode
   139                           	global	_Ctr_Signal
   140                           	global	_Ctr_SignalBck
   141                           	global	_Motor_RunSta
   142                           	global	_PowerSwitch_EnableCnt
   143                           	global	_RunMode_t
   144                           	global	_System_Sta
   145                           	global	_System_StaBck
   146                           	global	_flag_uart
   147                           	global	_isLowPower
   148                           	global	_gE2promState
   149                           	global	_INTCON
   150  000B                     _INTCON	set	11
   151                           	global	_PORTA
   152  000C                     _PORTA	set	12
   153                           	global	_PORTC
   154  000E                     _PORTC	set	14
   155                           	global	_TMR0
   156  0015                     _TMR0	set	21
   157                           	global	_CARRY
   158  0018                     _CARRY	set	24
   159                           	global	_GIE
   160  005F                     _GIE	set	95
   161                           	global	_RA2
   162  0062                     _RA2	set	98
   163                           	global	_RA4
   164  0064                     _RA4	set	100
   165                           	global	_RA5
   166  0065                     _RA5	set	101
   167                           	global	_RC1
   168  0071                     _RC1	set	113
   169                           	global	_RC2
   170  0072                     _RC2	set	114
   171                           	global	_RC5
   172  0075                     _RC5	set	117
   173                           	global	_ADCON0
   174  009D                     _ADCON0	set	157
   175                           	global	_ADCON1
   176  009E                     _ADCON1	set	158
   177                           	global	_ADRESH
   178  009C                     _ADRESH	set	156
   179                           	global	_ADRESL
   180  009B                     _ADRESL	set	155
   181                           	global	_OPTION_REG
   182  0095                     _OPTION_REG	set	149
   183                           	global	_OSCCON
   184  0099                     _OSCCON	set	153
   185                           	global	_PIE1
   186  0091                     _PIE1	set	145
   187                           	global	_TRISA
   188  008C                     _TRISA	set	140
   189                           	global	_TRISC
   190  008E                     _TRISC	set	142
   191                           	global	_WDTCON
   192  0097                     _WDTCON	set	151
   193                           	global	_SPLLEN
   194  04CF                     _SPLLEN	set	1231
   195                           	global	_APFCON
   196  011D                     _APFCON	set	285
   197                           	global	_EEADR
   198  0191                     _EEADR	set	401
   199                           	global	_ANSELA
   200  018C                     _ANSELA	set	396
   201                           	global	_ANSELC
   202  018E                     _ANSELC	set	398
   203                           	global	_BAUDCON
   204  019F                     _BAUDCON	set	415
   205                           	global	_EEADRL
   206  0191                     _EEADRL	set	401
   207                           	global	_EECON1
   208  0195                     _EECON1	set	405
   209                           	global	_EECON2
   210  0196                     _EECON2	set	406
   211                           	global	_EEDATA
   212  0193                     _EEDATA	set	403
   213                           	global	_EEDATL
   214  0193                     _EEDATL	set	403
   215                           	global	_RCSTA
   216  019D                     _RCSTA	set	413
   217                           	global	_SPBRGH
   218  019C                     _SPBRGH	set	412
   219                           	global	_SPBRGL
   220  019B                     _SPBRGL	set	411
   221                           	global	_TXREG
   222  019A                     _TXREG	set	410
   223                           	global	_TXSTA
   224  019E                     _TXSTA	set	414
   225                           	global	_CFGS
   226  0CAE                     _CFGS	set	3246
   227                           	global	_EEPGD
   228  0CAF                     _EEPGD	set	3247
   229                           	global	_RD
   230  0CA8                     _RD	set	3240
   231                           	global	_WR
   232  0CA9                     _WR	set	3241
   233                           	global	_WREN
   234  0CAA                     _WREN	set	3242
   235                           	global	_WPUA
   236  020C                     _WPUA	set	524
   237                           	global	_WPUC
   238  020E                     _WPUC	set	526
   239                           psect	strings,class=STRING,delta=2
   240                           global __pstrings
   241  0300                     __pstrings:
   242                           	global    __stringtab
   243  0300                     __stringtab:
   244  0300  3400               	retlw	0
   245                           psect	strings
   246                           	
   247  0301                     STR_6:	
   248  0301  344D               	retlw	77	;'M'
   249  0302  3420               	retlw	32	;' '
   250  0303  3461               	retlw	97	;'a'
   251  0304  3475               	retlw	117	;'u'
   252  0305  3474               	retlw	116	;'t'
   253  0306  346F               	retlw	111	;'o'
   254  0307  3420               	retlw	32	;' '
   255  0308  3463               	retlw	99	;'c'
   256  0309  346C               	retlw	108	;'l'
   257  030A  346F               	retlw	111	;'o'
   258  030B  3473               	retlw	115	;'s'
   259  030C  3465               	retlw	101	;'e'
   260  030D  3420               	retlw	32	;' '
   261  030E  3474               	retlw	116	;'t'
   262  030F  3469               	retlw	105	;'i'
   263  0310  346D               	retlw	109	;'m'
   264  0311  3465               	retlw	101	;'e'
   265  0312  346F               	retlw	111	;'o'
   266  0313  3475               	retlw	117	;'u'
   267  0314  3474               	retlw	116	;'t'
   268  0315  340D               	retlw	13
   269  0316  340A               	retlw	10
   270  0317  3400               	retlw	0
   271                           psect	strings
   272                           	
   273  0318                     STR_8:	
   274  0318  344D               	retlw	77	;'M'
   275  0319  3420               	retlw	32	;' '
   276  031A  346D               	retlw	109	;'m'
   277  031B  3461               	retlw	97	;'a'
   278  031C  346E               	retlw	110	;'n'
   279  031D  3420               	retlw	32	;' '
   280  031E  3463               	retlw	99	;'c'
   281  031F  346C               	retlw	108	;'l'
   282  0320  346F               	retlw	111	;'o'
   283  0321  3473               	retlw	115	;'s'
   284  0322  3465               	retlw	101	;'e'
   285  0323  3420               	retlw	32	;' '
   286  0324  3474               	retlw	116	;'t'
   287  0325  3469               	retlw	105	;'i'
   288  0326  346D               	retlw	109	;'m'
   289  0327  3465               	retlw	101	;'e'
   290  0328  346F               	retlw	111	;'o'
   291  0329  3475               	retlw	117	;'u'
   292  032A  3474               	retlw	116	;'t'
   293  032B  340D               	retlw	13
   294  032C  340A               	retlw	10
   295  032D  3400               	retlw	0
   296                           psect	strings
   297                           	
   298  032E                     STR_10:	
   299  032E  344D               	retlw	77	;'M'
   300  032F  3420               	retlw	32	;' '
   301  0330  346F               	retlw	111	;'o'
   302  0331  3470               	retlw	112	;'p'
   303  0332  3465               	retlw	101	;'e'
   304  0333  346E               	retlw	110	;'n'
   305  0334  3420               	retlw	32	;' '
   306  0335  3474               	retlw	116	;'t'
   307  0336  3469               	retlw	105	;'i'
   308  0337  346D               	retlw	109	;'m'
   309  0338  3465               	retlw	101	;'e'
   310  0339  346F               	retlw	111	;'o'
   311  033A  3475               	retlw	117	;'u'
   312  033B  3474               	retlw	116	;'t'
   313  033C  340D               	retlw	13
   314  033D  340A               	retlw	10
   315  033E  3400               	retlw	0
   316                           psect	strings
   317                           	
   318  033F                     STR_1:	
   319  033F  3443               	retlw	67	;'C'
   320  0340  3420               	retlw	32	;' '
   321  0341  3461               	retlw	97	;'a'
   322  0342  3475               	retlw	117	;'u'
   323  0343  3474               	retlw	116	;'t'
   324  0344  346F               	retlw	111	;'o'
   325  0345  3420               	retlw	32	;' '
   326  0346  3463               	retlw	99	;'c'
   327  0347  346C               	retlw	108	;'l'
   328  0348  346F               	retlw	111	;'o'
   329  0349  3473               	retlw	115	;'s'
   330  034A  3465               	retlw	101	;'e'
   331  034B  340D               	retlw	13
   332  034C  340A               	retlw	10
   333  034D  3400               	retlw	0
   334                           psect	strings
   335                           	
   336  034E                     STR_5:	
   337  034E  344D               	retlw	77	;'M'
   338  034F  3420               	retlw	32	;' '
   339  0350  3461               	retlw	97	;'a'
   340  0351  3475               	retlw	117	;'u'
   341  0352  3474               	retlw	116	;'t'
   342  0353  346F               	retlw	111	;'o'
   343  0354  3420               	retlw	32	;' '
   344  0355  3463               	retlw	99	;'c'
   345  0356  346C               	retlw	108	;'l'
   346  0357  346F               	retlw	111	;'o'
   347  0358  3473               	retlw	115	;'s'
   348  0359  3465               	retlw	101	;'e'
   349  035A  340D               	retlw	13
   350  035B  340A               	retlw	10
   351  035C  3400               	retlw	0
   352                           psect	strings
   353                           	
   354  035D                     STR_2:	
   355  035D  3443               	retlw	67	;'C'
   356  035E  3420               	retlw	32	;' '
   357  035F  346D               	retlw	109	;'m'
   358  0360  3461               	retlw	97	;'a'
   359  0361  346E               	retlw	110	;'n'
   360  0362  3420               	retlw	32	;' '
   361  0363  3463               	retlw	99	;'c'
   362  0364  346C               	retlw	108	;'l'
   363  0365  346F               	retlw	111	;'o'
   364  0366  3473               	retlw	115	;'s'
   365  0367  3465               	retlw	101	;'e'
   366  0368  340D               	retlw	13
   367  0369  340A               	retlw	10
   368  036A  3400               	retlw	0
   369                           psect	strings
   370                           	
   371  036B                     STR_7:	
   372  036B  344D               	retlw	77	;'M'
   373  036C  3420               	retlw	32	;' '
   374  036D  346D               	retlw	109	;'m'
   375  036E  3461               	retlw	97	;'a'
   376  036F  346E               	retlw	110	;'n'
   377  0370  3420               	retlw	32	;' '
   378  0371  3463               	retlw	99	;'c'
   379  0372  346C               	retlw	108	;'l'
   380  0373  346F               	retlw	111	;'o'
   381  0374  3473               	retlw	115	;'s'
   382  0375  3465               	retlw	101	;'e'
   383  0376  340D               	retlw	13
   384  0377  340A               	retlw	10
   385  0378  3400               	retlw	0
   386                           psect	strings
   387                           	
   388  0379                     STR_3:	
   389  0379  3443               	retlw	67	;'C'
   390  037A  3420               	retlw	32	;' '
   391  037B  346F               	retlw	111	;'o'
   392  037C  3470               	retlw	112	;'p'
   393  037D  3465               	retlw	101	;'e'
   394  037E  346E               	retlw	110	;'n'
   395  037F  340D               	retlw	13
   396  0380  340A               	retlw	10
   397  0381  3400               	retlw	0
   398                           psect	strings
   399                           	
   400  0382                     STR_9:	
   401  0382  344D               	retlw	77	;'M'
   402  0383  3420               	retlw	32	;' '
   403  0384  346F               	retlw	111	;'o'
   404  0385  3470               	retlw	112	;'p'
   405  0386  3465               	retlw	101	;'e'
   406  0387  346E               	retlw	110	;'n'
   407  0388  340D               	retlw	13
   408  0389  340A               	retlw	10
   409  038A  3400               	retlw	0
   410                           psect	strings
   411                           	
   412  038B                     STR_4:	
   413  038B  3443               	retlw	67	;'C'
   414  038C  3420               	retlw	32	;' '
   415  038D  3473               	retlw	115	;'s'
   416  038E  3474               	retlw	116	;'t'
   417  038F  346F               	retlw	111	;'o'
   418  0390  3470               	retlw	112	;'p'
   419  0391  340D               	retlw	13
   420  0392  340A               	retlw	10
   421  0393  3400               	retlw	0
   422                           psect	strings
   423                           	file	"C:\Users\sunxi\AppData\Local\Temp\s95g."
   424                           	line	#
   425                           psect cinit,class=CODE,delta=2
   426                           global start_initialization
   427  0593                     start_initialization:
   428                           
   429                           psect	bssBANK0,class=BANK0,space=1
   430                           global __pbssBANK0
   431  0020                     __pbssBANK0:
   432  0020                     InterruptTimer0@cnt:
   433  0020                            ds      4
   434                           
   435  0024                     _average:
   436  0024                            ds      4
   437                           
   438  0028                     Contrl_Signal@period:
   439  0028                            ds      2
   440                           
   441  002A                     Contrl_Signal@signal_cnt:
   442  002A                            ds      2
   443                           
   444  002C                     _Motor_RunTime:
   445  002C                            ds      2
   446                           
   447  002E                     _PowerSwitch_Cnt:
   448  002E                            ds      2
   449                           
   450  0030                     _delay_time:
   451  0030                            ds      2
   452                           
   453  0032                     _gPhaseVoltage_CH1:
   454  0032                            ds      2
   455                           
   456  0034                     _gPhaseVoltage_CH2:
   457  0034                            ds      2
   458                           
   459  0036                     _numOf120ms:
   460  0036                            ds      2
   461                           
   462  0038                     Contrl_Signal@ctrBuf:
   463  0038                            ds      1
   464                           
   465  0039                     _AutoOrManualMode:
   466  0039                            ds      1
   467                           
   468  003A                     _Ctr_Signal:
   469  003A                            ds      1
   470                           
   471  003B                     _Ctr_SignalBck:
   472  003B                            ds      1
   473                           
   474  003C                     _Motor_RunSta:
   475  003C                            ds      1
   476                           
   477  003D                     _PowerSwitch_EnableCnt:
   478  003D                            ds      1
   479                           
   480  003E                     _RunMode_t:
   481  003E                            ds      1
   482                           
   483  003F                     _System_Sta:
   484  003F                            ds      1
   485                           
   486  0040                     _System_StaBck:
   487  0040                            ds      1
   488                           
   489  0041                     _flag_uart:
   490  0041                            ds      1
   491                           
   492  0042                     _isLowPower:
   493  0042                            ds      1
   494                           
   495  0043                     _gE2promState:
   496  0043                            ds      3
   497                           
   498                           psect	dataBANK0,class=BANK0,space=1
   499                           global __pdataBANK0
   500  0057                     __pdataBANK0:
   501                           	file	"keyboard.c"
   502                           	line	18
   503  0057                     KeyDriver@backup:
   504  0057                            ds      1
   505                           
   506                           psect	dataBANK0
   507                           	file	"keyboard.c"
   508                           	line	37
   509  0058                     KeyScan@KeyBuf:
   510  0058                            ds      1
   511                           
   512                           psect	dataBANK0
   513                           	file	"keyboard.c"
   514                           	line	3
   515  0059                     _KeySta:
   516  0059                            ds      1
   517                           
   518                           psect clrtext,class=CODE,delta=2
   519                           global clear_ram
   520                           ;	Called with FSR0 containing the base address, and
   521                           ;	WREG with the size to clear
   522  06F0                     clear_ram:
   523  06F0  0064               	clrwdt			;clear the watchdog before getting into this loop
   524  06F1                     clrloop:
   525  06F1  0180               	clrf	indf0		;clear RAM location pointed to by FSR
   526  06F2  3101               	addfsr	0,1
   527  06F3  0B89               	decfsz wreg		;Have we reached the end of clearing yet?
   528  06F4  2EF1               	goto clrloop	;have we reached the end yet?
   529  06F5  3400               	retlw	0		;all done for this memory range, return
   530                           ; Clear objects allocated to BANK0
   531                           psect cinit,class=CODE,delta=2
   532                           	global __pbssBANK0
   533  0593  3020               	movlw	low(__pbssBANK0)
   534  0594  0084               	movwf	fsr0l
   535  0595  3000               	movlw	high(__pbssBANK0)
   536  0596  0085               	movwf	fsr0h
   537  0597  3026               	movlw	026h
   538  0598  3186  26F0  3185   	fcall	clear_ram
   539                           ; Initialize objects allocated to BANK0
   540                           	global __pidataBANK0,__pdataBANK0
   541                           psect cinit,class=CODE,delta=2
   542  059B  3187  2700  3185   	fcall	__pidataBANK0+0		;fetch initializer
   543  059E  00D7               	movwf	__pdataBANK0+0&07fh		
   544  059F  3187  2701  3185   	fcall	__pidataBANK0+1		;fetch initializer
   545  05A2  00D8               	movwf	__pdataBANK0+1&07fh		
   546  05A3  3187  2702  3185   	fcall	__pidataBANK0+2		;fetch initializer
   547  05A6  00D9               	movwf	__pdataBANK0+2&07fh		
   548                           psect cinit,class=CODE,delta=2
   549                           global end_of_initialization
   550                           
   551                           ;End of C runtime variable initialization code
   552                           
   553  05A7                     end_of_initialization:
   554  05A7  0020               movlb 0
   555  05A8  281A               ljmp _main	;jump to C main() function
   556                           psect	cstackCOMMON,class=COMMON,space=1
   557                           global __pcstackCOMMON
   558  0070                     __pcstackCOMMON:
   559                           	global	?_PIC_ConfigClock
   560  0070                     ?_PIC_ConfigClock:	; 0 bytes @ 0x0
   561                           	global	?_PIC_ConfigOptionReg
   562  0070                     ?_PIC_ConfigOptionReg:	; 0 bytes @ 0x0
   563                           	global	?_PIC_ConfigGPIO
   564  0070                     ?_PIC_ConfigGPIO:	; 0 bytes @ 0x0
   565                           	global	?_PIC_CofnigTimer0
   566  0070                     ?_PIC_CofnigTimer0:	; 0 bytes @ 0x0
   567                           	global	?_PIC_EnableInterrupt
   568  0070                     ?_PIC_EnableInterrupt:	; 0 bytes @ 0x0
   569                           	global	?_KeyInit
   570  0070                     ?_KeyInit:	; 0 bytes @ 0x0
   571                           	global	?_PowerSwitch_Init
   572  0070                     ?_PowerSwitch_Init:	; 0 bytes @ 0x0
   573                           	global	?_Motor_Init
   574  0070                     ?_Motor_Init:	; 0 bytes @ 0x0
   575                           	global	?_ADC_Init
   576  0070                     ?_ADC_Init:	; 0 bytes @ 0x0
   577                           	global	?_internal_E2promInit
   578  0070                     ?_internal_E2promInit:	; 0 bytes @ 0x0
   579                           	global	?_Motor_Stop
   580  0070                     ?_Motor_Stop:	; 0 bytes @ 0x0
   581                           	global	?_WatchDog_Init
   582  0070                     ?_WatchDog_Init:	; 0 bytes @ 0x0
   583                           	global	?_Feed_WatchDog
   584  0070                     ?_Feed_WatchDog:	; 0 bytes @ 0x0
   585                           	global	?_KeyDriver
   586  0070                     ?_KeyDriver:	; 0 bytes @ 0x0
   587                           	global	?_MainLoop
   588  0070                     ?_MainLoop:	; 0 bytes @ 0x0
   589                           	global	?_WatchDog_Reset
   590  0070                     ?_WatchDog_Reset:	; 0 bytes @ 0x0
   591                           	global	?_Motor_LowPower
   592  0070                     ?_Motor_LowPower:	; 0 bytes @ 0x0
   593                           	global	?_PIC_ConfigClock32Khz
   594  0070                     ?_PIC_ConfigClock32Khz:	; 0 bytes @ 0x0
   595                           	global	?_KeyScan
   596  0070                     ?_KeyScan:	; 0 bytes @ 0x0
   597                           	global	??_KeyScan
   598  0070                     ??_KeyScan:	; 0 bytes @ 0x0
   599                           	global	?_Contrl_Signal
   600  0070                     ?_Contrl_Signal:	; 0 bytes @ 0x0
   601                           	global	?_Motor_RunTimeCount
   602  0070                     ?_Motor_RunTimeCount:	; 0 bytes @ 0x0
   603                           	global	??_Motor_RunTimeCount
   604  0070                     ??_Motor_RunTimeCount:	; 0 bytes @ 0x0
   605                           	global	?_Delay_Scan
   606  0070                     ?_Delay_Scan:	; 0 bytes @ 0x0
   607                           	global	??_Delay_Scan
   608  0070                     ??_Delay_Scan:	; 0 bytes @ 0x0
   609                           	global	?_PowerSwitch_Enable
   610  0070                     ?_PowerSwitch_Enable:	; 0 bytes @ 0x0
   611                           	global	?_Motor_Counterclockwise
   612  0070                     ?_Motor_Counterclockwise:	; 0 bytes @ 0x0
   613                           	global	?_Motor_Clockwise
   614  0070                     ?_Motor_Clockwise:	; 0 bytes @ 0x0
   615                           	global	?_e2SavePara
   616  0070                     ?_e2SavePara:	; 0 bytes @ 0x0
   617                           	global	?_PowerSwitch_Disable
   618  0070                     ?_PowerSwitch_Disable:	; 0 bytes @ 0x0
   619                           	global	?_KeyAction
   620  0070                     ?_KeyAction:	; 0 bytes @ 0x0
   621                           	global	?_InterruptTimer0
   622  0070                     ?_InterruptTimer0:	; 0 bytes @ 0x0
   623                           	global	?_ISR_Manger
   624  0070                     ?_ISR_Manger:	; 0 bytes @ 0x0
   625                           	global	?_Uart_SendStr
   626  0070                     ?_Uart_SendStr:	; 0 bytes @ 0x0
   627                           	global	?_ContrlSignal_Driver
   628  0070                     ?_ContrlSignal_Driver:	; 0 bytes @ 0x0
   629                           	global	?_Motor_Driver
   630  0070                     ?_Motor_Driver:	; 0 bytes @ 0x0
   631                           	global	?_ADC_AllPin_Init
   632  0070                     ?_ADC_AllPin_Init:	; 0 bytes @ 0x0
   633                           	global	?_PowerSwitch_Delay
   634  0070                     ?_PowerSwitch_Delay:	; 0 bytes @ 0x0
   635                           	global	?_Motor_GetStaus
   636  0070                     ?_Motor_GetStaus:	; 1 bytes @ 0x0
   637                           	global	?_Get_ADCValue
   638  0070                     ?_Get_ADCValue:	; 2 bytes @ 0x0
   639                           	global	Uart_SendStr@str
   640  0070                     Uart_SendStr@str:	; 1 bytes @ 0x0
   641  0070                     	ds	2
   642                           	global	??_Get_ADCValue
   643  0072                     ??_Get_ADCValue:	; 0 bytes @ 0x2
   644  0072                     	ds	4
   645                           	global	Get_ADCValue@channel
   646  0076                     Get_ADCValue@channel:	; 1 bytes @ 0x6
   647  0076                     	ds	1
   648                           	global	Get_ADCValue@tem
   649  0077                     Get_ADCValue@tem:	; 2 bytes @ 0x7
   650  0077                     	ds	2
   651                           	global	??_Contrl_Signal
   652  0079                     ??_Contrl_Signal:	; 0 bytes @ 0x9
   653  0079                     	ds	1
   654                           	global	Contrl_Signal@dis_tmp
   655  007A                     Contrl_Signal@dis_tmp:	; 2 bytes @ 0xA
   656  007A                     	ds	2
   657                           	global	??_InterruptTimer0
   658  007C                     ??_InterruptTimer0:	; 0 bytes @ 0xC
   659                           	global	??_ISR_Manger
   660  007C                     ??_ISR_Manger:	; 0 bytes @ 0xC
   661  007C                     	ds	2
   662                           psect	cstackBANK0,class=BANK0,space=1
   663                           global __pcstackBANK0
   664  0046                     __pcstackBANK0:
   665                           	global	??_PIC_ConfigClock
   666  0046                     ??_PIC_ConfigClock:	; 0 bytes @ 0x0
   667                           	global	??_PIC_ConfigOptionReg
   668  0046                     ??_PIC_ConfigOptionReg:	; 0 bytes @ 0x0
   669                           	global	??_PIC_ConfigGPIO
   670  0046                     ??_PIC_ConfigGPIO:	; 0 bytes @ 0x0
   671                           	global	??_PIC_CofnigTimer0
   672  0046                     ??_PIC_CofnigTimer0:	; 0 bytes @ 0x0
   673                           	global	??_PIC_EnableInterrupt
   674  0046                     ??_PIC_EnableInterrupt:	; 0 bytes @ 0x0
   675                           	global	??_KeyInit
   676  0046                     ??_KeyInit:	; 0 bytes @ 0x0
   677                           	global	??_PowerSwitch_Init
   678  0046                     ??_PowerSwitch_Init:	; 0 bytes @ 0x0
   679                           	global	??_Motor_Init
   680  0046                     ??_Motor_Init:	; 0 bytes @ 0x0
   681                           	global	?_Delay_MS
   682  0046                     ?_Delay_MS:	; 0 bytes @ 0x0
   683                           	global	??_WatchDog_Init
   684  0046                     ??_WatchDog_Init:	; 0 bytes @ 0x0
   685                           	global	??_Feed_WatchDog
   686  0046                     ??_Feed_WatchDog:	; 0 bytes @ 0x0
   687                           	global	??_WatchDog_Reset
   688  0046                     ??_WatchDog_Reset:	; 0 bytes @ 0x0
   689                           	global	??_Motor_LowPower
   690  0046                     ??_Motor_LowPower:	; 0 bytes @ 0x0
   691                           	global	??_PIC_ConfigClock32Khz
   692  0046                     ??_PIC_ConfigClock32Khz:	; 0 bytes @ 0x0
   693                           	global	??_Motor_GetStaus
   694  0046                     ??_Motor_GetStaus:	; 0 bytes @ 0x0
   695                           	global	??_Motor_Counterclockwise
   696  0046                     ??_Motor_Counterclockwise:	; 0 bytes @ 0x0
   697                           	global	??_Motor_Clockwise
   698  0046                     ??_Motor_Clockwise:	; 0 bytes @ 0x0
   699                           	global	??_KeyAction
   700  0046                     ??_KeyAction:	; 0 bytes @ 0x0
   701                           	global	?_internal_E2Read
   702  0046                     ?_internal_E2Read:	; 0 bytes @ 0x0
   703                           	global	?_internal_E2Write
   704  0046                     ?_internal_E2Write:	; 0 bytes @ 0x0
   705                           	global	??_Uart_SendStr
   706  0046                     ??_Uart_SendStr:	; 0 bytes @ 0x0
   707                           	global	??_ADC_AllPin_Init
   708  0046                     ??_ADC_AllPin_Init:	; 0 bytes @ 0x0
   709                           	global	??_PowerSwitch_Delay
   710  0046                     ??_PowerSwitch_Delay:	; 0 bytes @ 0x0
   711                           	global	KeyAction@KeyCode
   712  0046                     KeyAction@KeyCode:	; 1 bytes @ 0x0
   713                           	global	internal_E2Read@dat
   714  0046                     internal_E2Read@dat:	; 1 bytes @ 0x0
   715                           	global	internal_E2Write@dat
   716  0046                     internal_E2Write@dat:	; 1 bytes @ 0x0
   717                           	global	Delay_MS@ms
   718  0046                     Delay_MS@ms:	; 2 bytes @ 0x0
   719  0046                     	ds	1
   720                           	global	??_ADC_Init
   721  0047                     ??_ADC_Init:	; 0 bytes @ 0x1
   722                           	global	??_KeyDriver
   723  0047                     ??_KeyDriver:	; 0 bytes @ 0x1
   724                           	global	Motor_Counterclockwise@tem
   725  0047                     Motor_Counterclockwise@tem:	; 1 bytes @ 0x1
   726                           	global	Motor_Clockwise@tem
   727  0047                     Motor_Clockwise@tem:	; 1 bytes @ 0x1
   728                           	global	Motor_LowPower@tem
   729  0047                     Motor_LowPower@tem:	; 1 bytes @ 0x1
   730                           	global	PowerSwitch_Delay@delay
   731  0047                     PowerSwitch_Delay@delay:	; 1 bytes @ 0x1
   732                           	global	internal_E2Read@len
   733  0047                     internal_E2Read@len:	; 1 bytes @ 0x1
   734                           	global	internal_E2Write@len
   735  0047                     internal_E2Write@len:	; 1 bytes @ 0x1
   736  0047                     	ds	1
   737                           	global	??_Delay_MS
   738  0048                     ??_Delay_MS:	; 0 bytes @ 0x2
   739                           	global	??_PowerSwitch_Enable
   740  0048                     ??_PowerSwitch_Enable:	; 0 bytes @ 0x2
   741                           	global	??_PowerSwitch_Disable
   742  0048                     ??_PowerSwitch_Disable:	; 0 bytes @ 0x2
   743                           	global	??_internal_E2Read
   744  0048                     ??_internal_E2Read:	; 0 bytes @ 0x2
   745                           	global	??_internal_E2Write
   746  0048                     ??_internal_E2Write:	; 0 bytes @ 0x2
   747  0048                     	ds	1
   748                           	global	PowerSwitch_Enable@tmp
   749  0049                     PowerSwitch_Enable@tmp:	; 1 bytes @ 0x3
   750                           	global	PowerSwitch_Disable@tmp
   751  0049                     PowerSwitch_Disable@tmp:	; 1 bytes @ 0x3
   752                           	global	internal_E2Read@addr
   753  0049                     internal_E2Read@addr:	; 1 bytes @ 0x3
   754                           	global	internal_E2Write@reg
   755  0049                     internal_E2Write@reg:	; 1 bytes @ 0x3
   756  0049                     	ds	1
   757                           	global	??_Motor_Stop
   758  004A                     ??_Motor_Stop:	; 0 bytes @ 0x4
   759                           	global	internal_E2Write@addr
   760  004A                     internal_E2Write@addr:	; 1 bytes @ 0x4
   761  004A                     	ds	1
   762                           	global	??_internal_E2promInit
   763  004B                     ??_internal_E2promInit:	; 0 bytes @ 0x5
   764                           	global	??_e2SavePara
   765  004B                     ??_e2SavePara:	; 0 bytes @ 0x5
   766                           	global	Motor_Stop@tem
   767  004B                     Motor_Stop@tem:	; 1 bytes @ 0x5
   768  004B                     	ds	1
   769                           	global	??_ContrlSignal_Driver
   770  004C                     ??_ContrlSignal_Driver:	; 0 bytes @ 0x6
   771  004C                     	ds	1
   772                           	global	internal_E2promInit@addr
   773  004D                     internal_E2promInit@addr:	; 1 bytes @ 0x7
   774                           	global	e2SavePara@val
   775  004D                     e2SavePara@val:	; 1 bytes @ 0x7
   776  004D                     	ds	1
   777                           	global	??_Motor_Driver
   778  004E                     ??_Motor_Driver:	; 0 bytes @ 0x8
   779  004E                     	ds	1
   780                           	global	??_MainLoop
   781  004F                     ??_MainLoop:	; 0 bytes @ 0x9
   782                           	global	?_main
   783  004F                     ?_main:	; 2 bytes @ 0x9
   784                           	global	main@argc
   785  004F                     main@argc:	; 2 bytes @ 0x9
   786  004F                     	ds	2
   787                           	global	main@argv
   788  0051                     main@argv:	; 2 bytes @ 0xB
   789  0051                     	ds	2
   790                           	global	??_main
   791  0053                     ??_main:	; 0 bytes @ 0xD
   792  0053                     	ds	1
   793                           	global	main@i
   794  0054                     main@i:	; 2 bytes @ 0xE
   795  0054                     	ds	2
   796                           	global	main@tmpbuf
   797  0056                     main@tmpbuf:	; 1 bytes @ 0x10
   798  0056                     	ds	1
   799 ;;Data sizes: Strings 147, constant 0, data 3, bss 38, persistent 0 stack 0
   800 ;;Auto spaces:   Size  Autos    Used
   801 ;; COMMON          14     14      14
   802 ;; BANK0           80     17      58
   803 ;; BANK1           32      0       0
   804                           
   805 ;;
   806 ;; Pointer list with targets:
   807                           
   808 ;; ?_Get_ADCValue	unsigned int  size(1) Largest target is 0
   809 ;;
   810 ;; Uart_SendStr@str	PTR unsigned char  size(1) Largest target is 23
   811 ;;		 -> STR_10(CODE[17]), STR_9(CODE[9]), STR_8(CODE[22]), STR_7(CODE[14]), 
   812 ;;		 -> STR_6(CODE[23]), STR_5(CODE[15]), STR_4(CODE[9]), STR_3(CODE[9]), 
   813 ;;		 -> STR_2(CODE[14]), STR_1(CODE[15]), 
   814 ;;
   815 ;; internal_E2Write@dat	PTR unsigned char  size(1) Largest target is 3
   816 ;;		 -> gE2promState(BANK0[3]), 
   817 ;;
   818 ;; internal_E2Read@dat	PTR unsigned char  size(1) Largest target is 3
   819 ;;		 -> gE2promState(BANK0[3]), 
   820 ;;
   821                           
   822                           
   823 ;;
   824 ;; Critical Paths under _main in COMMON
   825 ;;
   826 ;;   None.
   827 ;;
   828 ;; Critical Paths under _ISR_Manger in COMMON
   829 ;;
   830 ;;   _InterruptTimer0->_Contrl_Signal
   831 ;;   _Contrl_Signal->_Get_ADCValue
   832 ;;
   833 ;; Critical Paths under _main in BANK0
   834 ;;
   835 ;;   _MainLoop->_Motor_Driver
   836 ;;   _Motor_Driver->_e2SavePara
   837 ;;   _ContrlSignal_Driver->_Motor_Stop
   838 ;;   _Motor_Stop->_PowerSwitch_Disable
   839 ;;   _PowerSwitch_Disable->_PowerSwitch_Delay
   840 ;;   _e2SavePara->_internal_E2Write
   841 ;;   _PowerSwitch_Enable->_PowerSwitch_Delay
   842 ;;   _KeyDriver->_KeyAction
   843 ;;   _internal_E2promInit->_internal_E2Write
   844 ;;   _ADC_Init->_ADC_AllPin_Init
   845 ;;
   846 ;; Critical Paths under _ISR_Manger in BANK0
   847 ;;
   848 ;;   None.
   849 ;;
   850 ;; Critical Paths under _main in BANK1
   851 ;;
   852 ;;   None.
   853 ;;
   854 ;; Critical Paths under _ISR_Manger in BANK1
   855 ;;
   856 ;;   None.
   857                           
   858 ;;
   859 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   860 ;;
   861                           
   862 ;;
   863 ;;Call Graph Tables:
   864 ;;
   865 ;; ---------------------------------------------------------------------------------
   866 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   867 ;; ---------------------------------------------------------------------------------
   868 ;; (0) _main                                                 8     4      4     982
   869 ;;                                              9 BANK0      8     4      4
   870 ;;                    _PIC_ConfigClock
   871 ;;                _PIC_ConfigOptionReg
   872 ;;                     _PIC_ConfigGPIO
   873 ;;                   _PIC_CofnigTimer0
   874 ;;                _PIC_EnableInterrupt
   875 ;;                            _KeyInit
   876 ;;                   _PowerSwitch_Init
   877 ;;                         _Motor_Init
   878 ;;                           _ADC_Init
   879 ;;                _internal_E2promInit
   880 ;;                           _Delay_MS
   881 ;;                         _Motor_Stop
   882 ;;                      _WatchDog_Init
   883 ;;                      _Feed_WatchDog
   884 ;;                          _KeyDriver
   885 ;;                           _MainLoop
   886 ;;                     _WatchDog_Reset
   887 ;;                     _Motor_LowPower
   888 ;;               _PIC_ConfigClock32Khz
   889 ;; ---------------------------------------------------------------------------------
   890 ;; (1) _MainLoop                                             0     0      0     495
   891 ;;                _ContrlSignal_Driver
   892 ;;                       _Motor_Driver
   893 ;; ---------------------------------------------------------------------------------
   894 ;; (2) _Motor_Driver                                         1     1      0     232
   895 ;;                                              8 BANK0      1     1      0
   896 ;;                     _Motor_GetStaus
   897 ;;                       _Uart_SendStr
   898 ;;                         _Motor_Stop
   899 ;;                         _e2SavePara
   900 ;;                           _Delay_MS
   901 ;; ---------------------------------------------------------------------------------
   902 ;; (2) _ContrlSignal_Driver                                  1     1      0     263
   903 ;;                                              6 BANK0      1     1      0
   904 ;;                 _PowerSwitch_Enable
   905 ;;                           _Delay_MS
   906 ;;                     _Motor_GetStaus
   907 ;;                         _Motor_Stop
   908 ;;                       _Uart_SendStr
   909 ;;             _Motor_Counterclockwise
   910 ;;                    _Motor_Clockwise
   911 ;; ---------------------------------------------------------------------------------
   912 ;; (3) _Motor_Stop                                           2     2      0     119
   913 ;;                                              4 BANK0      2     2      0
   914 ;;                           _Delay_MS
   915 ;;                _PowerSwitch_Disable
   916 ;; ---------------------------------------------------------------------------------
   917 ;; (4) _PowerSwitch_Disable                                  2     2      0      72
   918 ;;                                              2 BANK0      2     2      0
   919 ;;                  _PowerSwitch_Delay
   920 ;; ---------------------------------------------------------------------------------
   921 ;; (3) _e2SavePara                                           3     3      0      91
   922 ;;                                              5 BANK0      3     3      0
   923 ;;                   _internal_E2Write
   924 ;; ---------------------------------------------------------------------------------
   925 ;; (3) _PowerSwitch_Enable                                   2     2      0      72
   926 ;;                                              2 BANK0      2     2      0
   927 ;;                  _PowerSwitch_Delay
   928 ;; ---------------------------------------------------------------------------------
   929 ;; (1) _PIC_ConfigClock32Khz                                 1     1      0       0
   930 ;;                                              0 BANK0      1     1      0
   931 ;; ---------------------------------------------------------------------------------
   932 ;; (1) _KeyDriver                                            1     1      0      44
   933 ;;                                              1 BANK0      1     1      0
   934 ;;                          _KeyAction
   935 ;; ---------------------------------------------------------------------------------
   936 ;; (1) _internal_E2promInit                                  3     3      0     138
   937 ;;                                              5 BANK0      3     3      0
   938 ;;                    _internal_E2Read
   939 ;;                   _internal_E2Write
   940 ;; ---------------------------------------------------------------------------------
   941 ;; (1) _ADC_Init                                             1     1      0       0
   942 ;;                                              1 BANK0      1     1      0
   943 ;;                    _ADC_AllPin_Init
   944 ;; ---------------------------------------------------------------------------------
   945 ;; (4) _internal_E2Write                                     5     3      2      69
   946 ;;                                              0 BANK0      5     3      2
   947 ;; ---------------------------------------------------------------------------------
   948 ;; (2) _internal_E2Read                                      4     2      2      68
   949 ;;                                              0 BANK0      4     2      2
   950 ;; ---------------------------------------------------------------------------------
   951 ;; (5) _PowerSwitch_Delay                                    2     2      0      47
   952 ;;                                              0 BANK0      2     2      0
   953 ;; ---------------------------------------------------------------------------------
   954 ;; (2) _ADC_AllPin_Init                                      1     1      0       0
   955 ;;                                              0 BANK0      1     1      0
   956 ;; ---------------------------------------------------------------------------------
   957 ;; (2) _KeyAction                                            1     1      0      44
   958 ;;                                              0 BANK0      1     1      0
   959 ;; ---------------------------------------------------------------------------------
   960 ;; (3) _Motor_Clockwise                                      2     2      0      25
   961 ;;                                              0 BANK0      2     2      0
   962 ;; ---------------------------------------------------------------------------------
   963 ;; (3) _Motor_Counterclockwise                               2     2      0      25
   964 ;;                                              0 BANK0      2     2      0
   965 ;; ---------------------------------------------------------------------------------
   966 ;; (3) _Motor_GetStaus                                       0     0      0       0
   967 ;; ---------------------------------------------------------------------------------
   968 ;; (3) _Uart_SendStr                                         1     1      0       0
   969 ;; ---------------------------------------------------------------------------------
   970 ;; (1) _Motor_LowPower                                       2     2      0      25
   971 ;;                                              0 BANK0      2     2      0
   972 ;; ---------------------------------------------------------------------------------
   973 ;; (1) _WatchDog_Reset                                       0     0      0       0
   974 ;; ---------------------------------------------------------------------------------
   975 ;; (1) _Feed_WatchDog                                        0     0      0       0
   976 ;; ---------------------------------------------------------------------------------
   977 ;; (1) _WatchDog_Init                                        0     0      0       0
   978 ;; ---------------------------------------------------------------------------------
   979 ;; (3) _Delay_MS                                             2     0      2      22
   980 ;;                                              0 BANK0      2     0      2
   981 ;; ---------------------------------------------------------------------------------
   982 ;; (1) _Motor_Init                                           1     1      0       0
   983 ;;                                              0 BANK0      1     1      0
   984 ;; ---------------------------------------------------------------------------------
   985 ;; (1) _PowerSwitch_Init                                     1     1      0       0
   986 ;;                                              0 BANK0      1     1      0
   987 ;; ---------------------------------------------------------------------------------
   988 ;; (1) _KeyInit                                              1     1      0       0
   989 ;;                                              0 BANK0      1     1      0
   990 ;; ---------------------------------------------------------------------------------
   991 ;; (1) _PIC_EnableInterrupt                                  0     0      0       0
   992 ;; ---------------------------------------------------------------------------------
   993 ;; (1) _PIC_CofnigTimer0                                     1     1      0       0
   994 ;;                                              0 BANK0      1     1      0
   995 ;; ---------------------------------------------------------------------------------
   996 ;; (1) _PIC_ConfigGPIO                                       1     1      0       0
   997 ;;                                              0 BANK0      1     1      0
   998 ;; ---------------------------------------------------------------------------------
   999 ;; (1) _PIC_ConfigOptionReg                                  1     1      0       0
  1000 ;;                                              0 BANK0      1     1      0
  1001 ;; ---------------------------------------------------------------------------------
  1002 ;; (1) _PIC_ConfigClock                                      1     1      0       0
  1003 ;;                                              0 BANK0      1     1      0
  1004 ;; ---------------------------------------------------------------------------------
  1005 ;; Estimated maximum stack depth 5
  1006 ;; ---------------------------------------------------------------------------------
  1007 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1008 ;; ---------------------------------------------------------------------------------
  1009 ;; (6) _ISR_Manger                                           2     2      0      47
  1010 ;;                                             12 COMMON     2     2      0
  1011 ;;                    _InterruptTimer0
  1012 ;; ---------------------------------------------------------------------------------
  1013 ;; (7) _InterruptTimer0                                      0     0      0      47
  1014 ;;                            _KeyScan
  1015 ;;                      _Contrl_Signal
  1016 ;;                 _Motor_RunTimeCount
  1017 ;;                         _Delay_Scan
  1018 ;; ---------------------------------------------------------------------------------
  1019 ;; (8) _Contrl_Signal                                        5     5      0      47
  1020 ;;                                              9 COMMON     3     3      0
  1021 ;;                       _Get_ADCValue
  1022 ;; ---------------------------------------------------------------------------------
  1023 ;; (9) _Get_ADCValue                                         9     7      2      46
  1024 ;;                                              0 COMMON     9     7      2
  1025 ;; ---------------------------------------------------------------------------------
  1026 ;; (8) _Delay_Scan                                           0     0      0       0
  1027 ;; ---------------------------------------------------------------------------------
  1028 ;; (8) _Motor_RunTimeCount                                   0     0      0       0
  1029 ;; ---------------------------------------------------------------------------------
  1030 ;; (8) _KeyScan                                              0     0      0       0
  1031 ;; ---------------------------------------------------------------------------------
  1032 ;; Estimated maximum stack depth 9
  1033 ;; ---------------------------------------------------------------------------------
  1034                           
  1035 ;; Call Graph Graphs:
  1036                           
  1037 ;; _main (ROOT)
  1038 ;;   _PIC_ConfigClock
  1039 ;;   _PIC_ConfigOptionReg
  1040 ;;   _PIC_ConfigGPIO
  1041 ;;   _PIC_CofnigTimer0
  1042 ;;   _PIC_EnableInterrupt
  1043 ;;   _KeyInit
  1044 ;;   _PowerSwitch_Init
  1045 ;;   _Motor_Init
  1046 ;;   _ADC_Init
  1047 ;;     _ADC_AllPin_Init
  1048 ;;   _internal_E2promInit
  1049 ;;     _internal_E2Read
  1050 ;;     _internal_E2Write
  1051 ;;   _Delay_MS
  1052 ;;   _Motor_Stop
  1053 ;;     _Delay_MS
  1054 ;;     _PowerSwitch_Disable
  1055 ;;       _PowerSwitch_Delay
  1056 ;;   _WatchDog_Init
  1057 ;;   _Feed_WatchDog
  1058 ;;   _KeyDriver
  1059 ;;     _KeyAction
  1060 ;;   _MainLoop
  1061 ;;     _ContrlSignal_Driver
  1062 ;;       _PowerSwitch_Enable
  1063 ;;         _PowerSwitch_Delay
  1064 ;;       _Delay_MS
  1065 ;;       _Motor_GetStaus
  1066 ;;       _Motor_Stop
  1067 ;;         _Delay_MS
  1068 ;;         _PowerSwitch_Disable
  1069 ;;           _PowerSwitch_Delay
  1070 ;;       _Uart_SendStr
  1071 ;;       _Motor_Counterclockwise
  1072 ;;       _Motor_Clockwise
  1073 ;;     _Motor_Driver
  1074 ;;       _Motor_GetStaus
  1075 ;;       _Uart_SendStr
  1076 ;;       _Motor_Stop
  1077 ;;         _Delay_MS
  1078 ;;         _PowerSwitch_Disable
  1079 ;;           _PowerSwitch_Delay
  1080 ;;       _e2SavePara
  1081 ;;         _internal_E2Write
  1082 ;;       _Delay_MS
  1083 ;;   _WatchDog_Reset
  1084 ;;   _Motor_LowPower
  1085 ;;   _PIC_ConfigClock32Khz
  1086 ;;
  1087 ;; _ISR_Manger (ROOT)
  1088 ;;   _InterruptTimer0
  1089 ;;     _KeyScan
  1090 ;;     _Contrl_Signal
  1091 ;;       _Get_ADCValue
  1092 ;;     _Motor_RunTimeCount
  1093 ;;     _Delay_Scan
  1094 ;;
  1095                           
  1096 ;; Address spaces:
  1097                           
  1098 ;;Name               Size   Autos  Total    Cost      Usage
  1099 ;;BIGRAM              70      0       0       0        0.0%
  1100 ;;EEDATA             100      0       0       0        0.0%
  1101 ;;NULL                 0      0       0       0        0.0%
  1102 ;;CODE                 0      0       0       0        0.0%
  1103 ;;BITCOMMON            E      0       0       1        0.0%
  1104 ;;BITSFR0              0      0       0       1        0.0%
  1105 ;;SFR0                 0      0       0       1        0.0%
  1106 ;;COMMON               E      E       E       2      100.0%
  1107 ;;BITSFR1              0      0       0       2        0.0%
  1108 ;;SFR1                 0      0       0       2        0.0%
  1109 ;;BITSFR2              0      0       0       3        0.0%
  1110 ;;SFR2                 0      0       0       3        0.0%
  1111 ;;STACK                0      0       D       3        0.0%
  1112 ;;BITSFR3              0      0       0       4        0.0%
  1113 ;;SFR3                 0      0       0       4        0.0%
  1114 ;;ABS                  0      0      48       4        0.0%
  1115 ;;BITBANK0            50      0       0       5        0.0%
  1116 ;;BITSFR4              0      0       0       5        0.0%
  1117 ;;SFR4                 0      0       0       5        0.0%
  1118 ;;BANK0               50     11      3A       6       72.5%
  1119 ;;BITSFR5              0      0       0       6        0.0%
  1120 ;;SFR5                 0      0       0       6        0.0%
  1121 ;;BITBANK1            20      0       0       7        0.0%
  1122 ;;BITSFR6              0      0       0       7        0.0%
  1123 ;;SFR6                 0      0       0       7        0.0%
  1124 ;;BANK1               20      0       0       8        0.0%
  1125 ;;BITSFR7              0      0       0       8        0.0%
  1126 ;;SFR7                 0      0       0       8        0.0%
  1127 ;;BITSFR8              0      0       0       9        0.0%
  1128 ;;SFR8                 0      0       0       9        0.0%
  1129 ;;DATA                 0      0      55       9        0.0%
  1130 ;;BITSFR9              0      0       0      10        0.0%
  1131 ;;SFR9                 0      0       0      10        0.0%
  1132 ;;BITSFR10             0      0       0      11        0.0%
  1133 ;;SFR10                0      0       0      11        0.0%
  1134 ;;BITSFR11             0      0       0      12        0.0%
  1135 ;;SFR11                0      0       0      12        0.0%
  1136 ;;BITSFR12             0      0       0      13        0.0%
  1137 ;;SFR12                0      0       0      13        0.0%
  1138 ;;BITSFR13             0      0       0      14        0.0%
  1139 ;;SFR13                0      0       0      14        0.0%
  1140 ;;BITSFR14             0      0       0      15        0.0%
  1141 ;;SFR14                0      0       0      15        0.0%
  1142 ;;BITSFR15             0      0       0      16        0.0%
  1143 ;;SFR15                0      0       0      16        0.0%
  1144 ;;BITSFR16             0      0       0      17        0.0%
  1145 ;;SFR16                0      0       0      17        0.0%
  1146 ;;BITSFR17             0      0       0      18        0.0%
  1147 ;;SFR17                0      0       0      18        0.0%
  1148 ;;BITSFR18             0      0       0      19        0.0%
  1149 ;;SFR18                0      0       0      19        0.0%
  1150 ;;BITSFR19             0      0       0      20        0.0%
  1151 ;;SFR19                0      0       0      20        0.0%
  1152 ;;BITSFR20             0      0       0      21        0.0%
  1153 ;;SFR20                0      0       0      21        0.0%
  1154 ;;BITSFR21             0      0       0      22        0.0%
  1155 ;;SFR21                0      0       0      22        0.0%
  1156 ;;BITSFR22             0      0       0      23        0.0%
  1157 ;;SFR22                0      0       0      23        0.0%
  1158 ;;BITSFR23             0      0       0      24        0.0%
  1159 ;;SFR23                0      0       0      24        0.0%
  1160 ;;BITSFR24             0      0       0      25        0.0%
  1161 ;;SFR24                0      0       0      25        0.0%
  1162 ;;BITSFR25             0      0       0      26        0.0%
  1163 ;;SFR25                0      0       0      26        0.0%
  1164 ;;BITSFR26             0      0       0      27        0.0%
  1165 ;;SFR26                0      0       0      27        0.0%
  1166 ;;BITSFR27             0      0       0      28        0.0%
  1167 ;;SFR27                0      0       0      28        0.0%
  1168 ;;BITSFR28             0      0       0      29        0.0%
  1169 ;;SFR28                0      0       0      29        0.0%
  1170 ;;BITSFR29             0      0       0      30        0.0%
  1171 ;;SFR29                0      0       0      30        0.0%
  1172 ;;BITSFR30             0      0       0      31        0.0%
  1173 ;;SFR30                0      0       0      31        0.0%
  1174 ;;BITSFR31             0      0       0      32        0.0%
  1175 ;;SFR31                0      0       0      32        0.0%
  1176                           
  1177                           	global	_main
  1178                           psect	maintext,global,class=CODE,delta=2
  1179                           global __pmaintext
  1180  001A                     __pmaintext:
  1181                           
  1182 ;; *************** function _main *****************
  1183 ;; Defined at:
  1184 ;;		line 58 in file "main.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  argc            2    9[BANK0 ] int 
  1187 ;;  argv            2   11[BANK0 ] PTR PTR unsigned char 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;  i               2   14[BANK0 ] int 
  1190 ;;  tmpbuf          1   16[BANK0 ] unsigned char 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  2    9[BANK0 ] int 
  1193 ;; Registers used:
  1194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1195 ;; Tracked objects:
  1196 ;;		On entry : 17F/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMMON   BANK0   BANK1
  1200 ;;      Params:         0       4       0
  1201 ;;      Locals:         0       3       0
  1202 ;;      Temps:          0       1       0
  1203 ;;      Totals:         0       8       0
  1204 ;;Total ram usage:        8 bytes
  1205 ;; Hardware stack levels required when called:    9
  1206 ;; This function calls:
  1207 ;;		_PIC_ConfigClock
  1208 ;;		_PIC_ConfigOptionReg
  1209 ;;		_PIC_ConfigGPIO
  1210 ;;		_PIC_CofnigTimer0
  1211 ;;		_PIC_EnableInterrupt
  1212 ;;		_KeyInit
  1213 ;;		_PowerSwitch_Init
  1214 ;;		_Motor_Init
  1215 ;;		_ADC_Init
  1216 ;;		_internal_E2promInit
  1217 ;;		_Delay_MS
  1218 ;;		_Motor_Stop
  1219 ;;		_WatchDog_Init
  1220 ;;		_Feed_WatchDog
  1221 ;;		_KeyDriver
  1222 ;;		_MainLoop
  1223 ;;		_WatchDog_Reset
  1224 ;;		_Motor_LowPower
  1225 ;;		_PIC_ConfigClock32Khz
  1226 ;; This function is called by:
  1227 ;;		Startup code after reset
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           psect	maintext
  1231                           	file	"main.c"
  1232                           	line	58
  1233                           	global	__size_of_main
  1234  00FF                     	__size_of_main	equ	__end_of_main-_main
  1235                           	
  1236  001A                     _main:	
  1237                           	opt	stack 7
  1238                           ; Regs used in _main: [allreg]
  1239                           	line	62
  1240                           	
  1241  001A                     l19523:	
  1242                           ;main.c: 62: uint8_t tmpbuf = 0;
  1243  001A  0020               	movlb 0	; select bank0
  1244  001B  01D6               	clrf	(main@tmpbuf)
  1245                           	line	64
  1246                           	
  1247  001C                     l19525:	
  1248                           ;main.c: 64: PIC_ConfigClock();
  1249  001C  3185  25D4  3180   	fcall	_PIC_ConfigClock
  1250                           	line	66
  1251                           ;main.c: 66: PIC_ConfigOptionReg();
  1252  001F  3185  250B  3180   	fcall	_PIC_ConfigOptionReg
  1253                           	line	67
  1254                           ;main.c: 67: PIC_ConfigGPIO();
  1255  0022  3186  2654  3180   	fcall	_PIC_ConfigGPIO
  1256                           	line	69
  1257                           ;main.c: 69: PIC_CofnigTimer0();
  1258  0025  3186  2643  3180   	fcall	_PIC_CofnigTimer0
  1259                           	line	70
  1260                           	
  1261  0028                     l19527:	
  1262                           ;main.c: 70: PIC_EnableInterrupt();
  1263  0028  3187  2703  3180   	fcall	_PIC_EnableInterrupt
  1264                           	line	71
  1265                           	
  1266  002B                     l19529:	
  1267                           ;main.c: 71: KeyInit();
  1268  002B  3186  26C7  3180   	fcall	_KeyInit
  1269                           	line	72
  1270                           	
  1271  002E                     l19531:	
  1272                           ;main.c: 72: PowerSwitch_Init();
  1273  002E  3186  2632  3180   	fcall	_PowerSwitch_Init
  1274                           	line	73
  1275                           	
  1276  0031                     l19533:	
  1277                           ;main.c: 73: Motor_Init();
  1278  0031  3184  24B2  3180   	fcall	_Motor_Init
  1279                           	line	74
  1280                           	
  1281  0034                     l19535:	
  1282                           ;main.c: 74: ADC_Init();
  1283  0034  3185  25E9  3180   	fcall	_ADC_Init
  1284                           	line	79
  1285                           	
  1286  0037                     l19537:	
  1287                           ;main.c: 79: internal_E2promInit();
  1288  0037  3184  24E0  3180   	fcall	_internal_E2promInit
  1289                           	line	82
  1290                           	
  1291  003A                     l19539:	
  1292                           ;main.c: 82: RC2 = 1;
  1293  003A  0020               	movlb 0	; select bank0
  1294  003B  150E               	bsf	(114/8),(114)&7
  1295                           	line	83
  1296                           	
  1297  003C                     l19541:	
  1298                           ;main.c: 83: RC5 = 1;
  1299  003C  168E               	bsf	(117/8),(117)&7
  1300                           	line	85
  1301                           	
  1302  003D                     l19543:	
  1303                           ;main.c: 85: for(int i=0;i<6;i++)
  1304  003D  01D4               	clrf	(main@i)
  1305  003E  01D5               	clrf	(main@i+1)
  1306                           	
  1307  003F                     l19545:	
  1308  003F  0855               	movf	(main@i+1),w
  1309  0040  3A80               	xorlw	80h
  1310  0041  00FF               	movwf	btemp+1
  1311  0042  3080               	movlw	(high(06h))^80h
  1312  0043  027F               	subwf	btemp+1,w
  1313  0044  1D03               	skipz
  1314  0045  2848               	goto	u3445
  1315  0046  3006               	movlw	low(06h)
  1316  0047  0254               	subwf	(main@i),w
  1317  0048                     u3445:
  1318                           
  1319  0048  1C03               	skipc
  1320  0049  284B               	goto	u3441
  1321  004A  284C               	goto	u3440
  1322  004B                     u3441:
  1323  004B  284E               	goto	l19549
  1324  004C                     u3440:
  1325  004C  2869               	goto	l19555
  1326                           	
  1327  004D                     l19547:	
  1328  004D  2869               	goto	l19555
  1329                           	line	86
  1330                           	
  1331  004E                     l1351:	
  1332                           	line	93
  1333                           	
  1334  004E                     l19549:	
  1335                           ;main.c: 86: {
  1336                           ;main.c: 93: Delay_MS(1250);
  1337  004E  30E2               	movlw	low(04E2h)
  1338  004F  0020               	movlb 0	; select bank0
  1339  0050  00C6               	movwf	(?_Delay_MS)
  1340  0051  3004               	movlw	high(04E2h)
  1341  0052  00C7               	movwf	((?_Delay_MS))+1
  1342  0053  3186  2621  3180   	fcall	_Delay_MS
  1343                           	line	85
  1344                           	
  1345  0056                     l19551:	
  1346  0056  3001               	movlw	low(01h)
  1347  0057  0020               	movlb 0	; select bank0
  1348  0058  07D4               	addwf	(main@i),f
  1349  0059  3000               	movlw	high(01h)
  1350  005A  3DD5               	addwfc	(main@i+1),f
  1351                           	
  1352  005B                     l19553:	
  1353  005B  0855               	movf	(main@i+1),w
  1354  005C  3A80               	xorlw	80h
  1355  005D  00FF               	movwf	btemp+1
  1356  005E  3080               	movlw	(high(06h))^80h
  1357  005F  027F               	subwf	btemp+1,w
  1358  0060  1D03               	skipz
  1359  0061  2864               	goto	u3455
  1360  0062  3006               	movlw	low(06h)
  1361  0063  0254               	subwf	(main@i),w
  1362  0064                     u3455:
  1363                           
  1364  0064  1C03               	skipc
  1365  0065  2867               	goto	u3451
  1366  0066  2868               	goto	u3450
  1367  0067                     u3451:
  1368  0067  284E               	goto	l19549
  1369  0068                     u3450:
  1370  0068  2869               	goto	l19555
  1371                           	
  1372  0069                     l1352:	
  1373                           	line	96
  1374                           	
  1375  0069                     l19555:	
  1376                           ;main.c: 94: }
  1377                           ;main.c: 96: if(Ctr_Signal == Ctrl_SignalValid)
  1378  0069  0020               	movlb 0	; select bank0
  1379  006A  083A               	movf	(_Ctr_Signal),w
  1380  006B  3A01               	xorlw	01h&0ffh
  1381  006C  1D03               	skipz
  1382  006D  286F               	goto	u3461
  1383  006E  2870               	goto	u3460
  1384  006F                     u3461:
  1385  006F  2884               	goto	l19563
  1386  0070                     u3460:
  1387                           	line	99
  1388                           	
  1389  0070                     l19557:	
  1390                           ;main.c: 97: {
  1391                           ;main.c: 99: if((gE2promState.systemState ==eE2State_AutoOpen ) || (gE2promState.systemS
                                 tate ==eE2State_AutoOpen ))
  1392  0070  0844               	movf	0+(_gE2promState)+01h,w
  1393  0071  3A01               	xorlw	01h&0ffh
  1394  0072  1903               	skipnz
  1395  0073  2875               	goto	u3471
  1396  0074  2876               	goto	u3470
  1397  0075                     u3471:
  1398  0075  287C               	goto	l1356
  1399  0076                     u3470:
  1400                           	
  1401  0076                     l19559:	
  1402  0076  0844               	movf	0+(_gE2promState)+01h,w
  1403  0077  3A01               	xorlw	01h&0ffh
  1404  0078  1D03               	skipz
  1405  0079  287B               	goto	u3481
  1406  007A  287C               	goto	u3480
  1407  007B                     u3481:
  1408  007B  287E               	goto	l19561
  1409  007C                     u3480:
  1410                           	
  1411  007C                     l1356:	
  1412                           	line	101
  1413                           ;main.c: 100: {
  1414                           ;main.c: 101: Ctr_SignalBck = Ctrl_SignalInvalid;
  1415  007C  01BB               	clrf	(_Ctr_SignalBck)
  1416                           	line	102
  1417                           ;main.c: 102: }
  1418  007D  2888               	goto	l19565
  1419                           	line	103
  1420                           	
  1421  007E                     l1354:	
  1422                           	line	105
  1423                           	
  1424  007E                     l19561:	
  1425                           ;main.c: 103: else
  1426                           ;main.c: 105: Ctr_SignalBck = Ctr_Signal;
  1427  007E  083A               	movf	(_Ctr_Signal),w
  1428  007F  00D3               	movwf	(??_main+0)+0
  1429  0080  0853               	movf	(??_main+0)+0,w
  1430  0081  00BB               	movwf	(_Ctr_SignalBck)
  1431  0082  2888               	goto	l19565
  1432                           	
  1433  0083                     l1357:	
  1434                           	line	107
  1435                           ;main.c: 107: }
  1436  0083  2888               	goto	l19565
  1437                           	line	108
  1438                           	
  1439  0084                     l1353:	
  1440                           	line	110
  1441                           	
  1442  0084                     l19563:	
  1443                           ;main.c: 108: else
  1444                           ;main.c: 109: {
  1445                           ;main.c: 110: Ctr_SignalBck = Ctrl_SignalValid;
  1446  0084  01BB               	clrf	(_Ctr_SignalBck)
  1447  0085  1403               	bsf	status,0
  1448  0086  0DBB               	rlf	(_Ctr_SignalBck),f
  1449  0087  2888               	goto	l19565
  1450                           	line	112
  1451                           	
  1452  0088                     l1358:	
  1453                           	line	113
  1454                           	
  1455  0088                     l19565:	
  1456                           ;main.c: 112: }
  1457                           ;main.c: 113: Motor_Stop();
  1458  0088  3185  25A9  3180   	fcall	_Motor_Stop
  1459                           	line	115
  1460                           	
  1461  008B                     l19567:	
  1462                           ;main.c: 115: WatchDog_Init();
  1463  008B  3186  26FC  3180   	fcall	_WatchDog_Init
  1464                           	line	116
  1465                           	
  1466  008E                     l19569:	
  1467                           ;main.c: 116: isLowPower = NormalMode;
  1468  008E  0020               	movlb 0	; select bank0
  1469  008F  01C2               	clrf	(_isLowPower)
  1470                           	line	117
  1471                           	
  1472  0090                     l19571:	
  1473                           ;main.c: 117: numOf120ms = 0;
  1474  0090  01B6               	clrf	(_numOf120ms)
  1475  0091  01B7               	clrf	(_numOf120ms+1)
  1476  0092  2893               	goto	l19573
  1477                           	line	119
  1478                           ;main.c: 119: while(1)
  1479                           	
  1480  0093                     l1359:	
  1481                           	line	121
  1482                           	
  1483  0093                     l19573:	
  1484                           ;main.c: 120: {
  1485                           ;main.c: 121: if(isLowPower == NormalMode)
  1486  0093  0020               	movlb 0	; select bank0
  1487  0094  08C2               	movf	(_isLowPower),f
  1488  0095  1D03               	skipz
  1489  0096  2898               	goto	u3491
  1490  0097  2899               	goto	u3490
  1491  0098                     u3491:
  1492  0098  28AC               	goto	l19585
  1493  0099                     u3490:
  1494                           	line	123
  1495                           	
  1496  0099                     l19575:	
  1497                           ;main.c: 122: {
  1498                           ;main.c: 123: Feed_WatchDog();
  1499  0099  3187  2706  3180   	fcall	_Feed_WatchDog
  1500                           	line	124
  1501                           	
  1502  009C                     l19577:	
  1503                           ;main.c: 124: KeyDriver();
  1504  009C  3185  252D  3180   	fcall	_KeyDriver
  1505                           	line	125
  1506                           	
  1507  009F                     l19579:	
  1508                           ;main.c: 125: MainLoop();
  1509  009F  3186  26E9  3180   	fcall	_MainLoop
  1510                           	line	126
  1511                           	
  1512  00A2                     l19581:	
  1513                           ;main.c: 126: if(RA2 == 0)
  1514  00A2  0020               	movlb 0	; select bank0
  1515  00A3  190C               	btfsc	(98/8),(98)&7
  1516  00A4  28A6               	goto	u3501
  1517  00A5  28A7               	goto	u3500
  1518  00A6                     u3501:
  1519  00A6  2893               	goto	l19573
  1520  00A7                     u3500:
  1521                           	line	128
  1522                           	
  1523  00A7                     l19583:	
  1524                           ;main.c: 127: {
  1525                           ;main.c: 128: WatchDog_Reset();
  1526  00A7  3186  26F6  3180   	fcall	_WatchDog_Reset
  1527  00AA  2893               	goto	l19573
  1528                           	line	129
  1529                           	
  1530  00AB                     l1361:	
  1531                           	line	130
  1532                           ;main.c: 129: }
  1533                           ;main.c: 130: }
  1534  00AB  2893               	goto	l19573
  1535                           	line	131
  1536                           	
  1537  00AC                     l1360:	
  1538                           	
  1539  00AC                     l19585:	
  1540                           ;main.c: 131: else if(isLowPower == LowPowerMode)
  1541  00AC  0020               	movlb 0	; select bank0
  1542  00AD  0842               	movf	(_isLowPower),w
  1543  00AE  3A01               	xorlw	01h&0ffh
  1544  00AF  1D03               	skipz
  1545  00B0  28B2               	goto	u3511
  1546  00B1  28B3               	goto	u3510
  1547  00B2                     u3511:
  1548  00B2  2893               	goto	l19573
  1549  00B3                     u3510:
  1550                           	line	133
  1551                           	
  1552  00B3                     l19587:	
  1553                           ;main.c: 132: {
  1554                           ;main.c: 133: INTCON &= ~(0x01 << 7);
  1555  00B3  307F               	movlw	(07Fh)
  1556  00B4  00D3               	movwf	(??_main+0)+0
  1557  00B5  0853               	movf	(??_main+0)+0,w
  1558  00B6  058B               	andwf	(11),f	;volatile
  1559                           	line	134
  1560                           ;main.c: 134: ADCON0 &= ~0x01;
  1561  00B7  30FE               	movlw	(0FEh)
  1562  00B8  00D3               	movwf	(??_main+0)+0
  1563  00B9  0853               	movf	(??_main+0)+0,w
  1564  00BA  0021               	movlb 1	; select bank1
  1565  00BB  059D               	andwf	(157)^080h,f	;volatile
  1566                           	line	135
  1567                           	
  1568  00BC                     l19589:	
  1569                           ;main.c: 135: Motor_LowPower();
  1570  00BC  3186  2665  3180   	fcall	_Motor_LowPower
  1571                           	line	136
  1572                           	
  1573  00BF                     l19591:	
  1574                           ;main.c: 136: PIC_ConfigClock32Khz();
  1575  00BF  3186  2693  3180   	fcall	_PIC_ConfigClock32Khz
  1576                           	line	137
  1577                           	
  1578  00C2                     l19593:	
  1579                           ;main.c: 137: if(Ctr_Signal == Ctrl_SignalValid)
  1580  00C2  0020               	movlb 0	; select bank0
  1581  00C3  083A               	movf	(_Ctr_Signal),w
  1582  00C4  3A01               	xorlw	01h&0ffh
  1583  00C5  1D03               	skipz
  1584  00C6  28C8               	goto	u3521
  1585  00C7  28C9               	goto	u3520
  1586  00C8                     u3521:
  1587  00C8  28CE               	goto	l1364
  1588  00C9                     u3520:
  1589                           	line	139
  1590                           	
  1591  00C9                     l19595:	
  1592                           ;main.c: 138: {
  1593                           ;main.c: 139: tmpbuf = 0xff;
  1594  00C9  30FF               	movlw	(0FFh)
  1595  00CA  00D3               	movwf	(??_main+0)+0
  1596  00CB  0853               	movf	(??_main+0)+0,w
  1597  00CC  00D6               	movwf	(main@tmpbuf)
  1598                           	line	140
  1599                           ;main.c: 140: }
  1600  00CD  28D0               	goto	l1366
  1601                           	line	141
  1602                           	
  1603  00CE                     l1364:	
  1604                           	line	143
  1605                           ;main.c: 141: else
  1606                           ;main.c: 142: {
  1607                           ;main.c: 143: tmpbuf = 0x00;
  1608  00CE  01D6               	clrf	(main@tmpbuf)
  1609  00CF  28D0               	goto	l1366
  1610                           	line	144
  1611                           	
  1612  00D0                     l1365:	
  1613                           	line	145
  1614                           ;main.c: 144: }
  1615                           ;main.c: 145: while(1)
  1616                           	
  1617  00D0                     l1366:	
  1618                           	line	147
  1619                           ;main.c: 146: {
  1620                           ;main.c: 147: if(RC1 == 0)
  1621  00D0  0020               	movlb 0	; select bank0
  1622  00D1  188E               	btfsc	(113/8),(113)&7
  1623  00D2  28D4               	goto	u3531
  1624  00D3  28D5               	goto	u3530
  1625  00D4                     u3531:
  1626  00D4  28DB               	goto	l1367
  1627  00D5                     u3530:
  1628                           	line	149
  1629                           	
  1630  00D5                     l19597:	
  1631                           ;main.c: 148: {
  1632                           ;main.c: 149: tmpbuf = (tmpbuf << 1) | 0;
  1633  00D5  0856               	movf	(main@tmpbuf),w
  1634  00D6  0709               	addwf	wreg,w
  1635  00D7  00D3               	movwf	(??_main+0)+0
  1636  00D8  0853               	movf	(??_main+0)+0,w
  1637  00D9  00D6               	movwf	(main@tmpbuf)
  1638                           	line	150
  1639                           ;main.c: 150: }
  1640  00DA  28E3               	goto	l19601
  1641                           	line	151
  1642                           	
  1643  00DB                     l1367:	
  1644                           ;main.c: 151: else if(RC1 == 1)
  1645  00DB  1C8E               	btfss	(113/8),(113)&7
  1646  00DC  28DE               	goto	u3541
  1647  00DD  28DF               	goto	u3540
  1648  00DE                     u3541:
  1649  00DE  28E3               	goto	l19601
  1650  00DF                     u3540:
  1651                           	line	153
  1652                           	
  1653  00DF                     l19599:	
  1654                           ;main.c: 152: {
  1655                           ;main.c: 153: tmpbuf = (tmpbuf << 1) | 1;
  1656  00DF  1403               	setc
  1657  00E0  0DD6               	rlf	(main@tmpbuf),f
  1658  00E1  28E3               	goto	l19601
  1659                           	line	154
  1660                           	
  1661  00E2                     l1369:	
  1662  00E2  28E3               	goto	l19601
  1663                           	line	155
  1664                           	
  1665  00E3                     l1368:	
  1666                           	
  1667  00E3                     l19601:	
  1668                           ;main.c: 154: }
  1669                           ;main.c: 155: if((tmpbuf==0xff) && Ctr_Signal == Ctrl_SignalInvalid)
  1670  00E3  0856               	movf	(main@tmpbuf),w
  1671  00E4  3AFF               	xorlw	0FFh&0ffh
  1672  00E5  1D03               	skipz
  1673  00E6  28E8               	goto	u3551
  1674  00E7  28E9               	goto	u3550
  1675  00E8                     u3551:
  1676  00E8  28F0               	goto	l19607
  1677  00E9                     u3550:
  1678                           	
  1679  00E9                     l19603:	
  1680  00E9  08BA               	movf	(_Ctr_Signal),f
  1681  00EA  1D03               	skipz
  1682  00EB  28ED               	goto	u3561
  1683  00EC  28EE               	goto	u3560
  1684  00ED                     u3561:
  1685  00ED  28F0               	goto	l19607
  1686  00EE                     u3560:
  1687  00EE  2909               	goto	l1371
  1688                           	line	157
  1689                           	
  1690  00EF                     l19605:	
  1691                           ;main.c: 156: {
  1692                           ;main.c: 157: break;
  1693  00EF  2909               	goto	l1371
  1694                           	line	158
  1695                           	
  1696  00F0                     l1370:	
  1697                           	line	160
  1698                           	
  1699  00F0                     l19607:	
  1700                           ;main.c: 158: }
  1701                           ;main.c: 160: if((tmpbuf==0x00) && Ctr_Signal == Ctrl_SignalValid)
  1702  00F0  08D6               	movf	(main@tmpbuf),f
  1703  00F1  1D03               	skipz
  1704  00F2  28F4               	goto	u3571
  1705  00F3  28F5               	goto	u3570
  1706  00F4                     u3571:
  1707  00F4  28FD               	goto	l1372
  1708  00F5                     u3570:
  1709                           	
  1710  00F5                     l19609:	
  1711  00F5  083A               	movf	(_Ctr_Signal),w
  1712  00F6  3A01               	xorlw	01h&0ffh
  1713  00F7  1D03               	skipz
  1714  00F8  28FA               	goto	u3581
  1715  00F9  28FB               	goto	u3580
  1716  00FA                     u3581:
  1717  00FA  28FD               	goto	l1372
  1718  00FB                     u3580:
  1719  00FB  2909               	goto	l1371
  1720                           	line	162
  1721                           	
  1722  00FC                     l19611:	
  1723                           ;main.c: 161: {
  1724                           ;main.c: 162: break;
  1725  00FC  2909               	goto	l1371
  1726                           	line	163
  1727                           	
  1728  00FD                     l1372:	
  1729                           	line	164
  1730                           ;main.c: 163: }
  1731                           ;main.c: 164: if(RA2 == 0)
  1732  00FD  190C               	btfsc	(98/8),(98)&7
  1733  00FE  2900               	goto	u3591
  1734  00FF  2901               	goto	u3590
  1735  0100                     u3591:
  1736  0100  2904               	goto	l1373
  1737  0101                     u3590:
  1738                           	line	166
  1739                           	
  1740  0101                     l19613:	
  1741                           ;main.c: 165: {
  1742                           ;main.c: 166: WatchDog_Reset();
  1743  0101  3186  26F6  3180   	fcall	_WatchDog_Reset
  1744                           	line	167
  1745                           	
  1746  0104                     l1373:	
  1747                           	line	168
  1748                           ;main.c: 167: }
  1749                           ;main.c: 168: Feed_WatchDog();
  1750  0104  3187  2706  3180   	fcall	_Feed_WatchDog
  1751  0107  28D0               	goto	l1366
  1752                           	line	169
  1753                           	
  1754  0108                     l1374:	
  1755                           	line	145
  1756  0108  28D0               	goto	l1366
  1757                           	
  1758  0109                     l1371:	
  1759                           	line	170
  1760                           ;main.c: 169: }
  1761                           ;main.c: 170: isLowPower = NormalMode;
  1762  0109  01C2               	clrf	(_isLowPower)
  1763                           	line	171
  1764                           	
  1765  010A                     l19615:	
  1766                           ;main.c: 171: numOf120ms = 0;
  1767  010A  01B6               	clrf	(_numOf120ms)
  1768  010B  01B7               	clrf	(_numOf120ms+1)
  1769                           	line	172
  1770                           	
  1771  010C                     l19617:	
  1772                           ;main.c: 172: PIC_ConfigClock();
  1773  010C  3185  25D4  3180   	fcall	_PIC_ConfigClock
  1774                           	line	173
  1775                           	
  1776  010F                     l19619:	
  1777                           ;main.c: 173: ADCON0 |= 0x01;
  1778  010F  0021               	movlb 1	; select bank1
  1779  0110  141D               	bsf	(157)^080h+(0/8),(0)&7	;volatile
  1780                           	line	174
  1781                           	
  1782  0111                     l19621:	
  1783                           ;main.c: 174: PIC_EnableInterrupt();
  1784  0111  3187  2703  3180   	fcall	_PIC_EnableInterrupt
  1785  0114  2893               	goto	l19573
  1786                           	line	175
  1787                           	
  1788  0115                     l1363:	
  1789  0115  2893               	goto	l19573
  1790                           	line	176
  1791                           	
  1792  0116                     l1362:	
  1793  0116  2893               	goto	l19573
  1794                           	
  1795  0117                     l1375:	
  1796                           	line	119
  1797  0117  2893               	goto	l19573
  1798                           	
  1799  0118                     l1376:	
  1800                           	line	178
  1801                           ;main.c: 175: }
  1802                           ;main.c: 176: }
  1803                           ;main.c: 177: return (0);
  1804                           ;	Return value of _main is never used
  1805                           	
  1806  0118                     l1377:	
  1807                           	global	start
  1808  0118  2818               	ljmp	start
  1809                           	opt stack 0
  1810                           GLOBAL	__end_of_main
  1811  0119                     	__end_of_main:
  1812 ;; =============== function _main ends ============
  1813                           
  1814                           	signat	_main,8314
  1815                           	global	_MainLoop
  1816                           psect	text948,local,class=CODE,delta=2
  1817                           global __ptext948
  1818  06E9                     __ptext948:
  1819                           
  1820 ;; *************** function _MainLoop *****************
  1821 ;; Defined at:
  1822 ;;		line 152 in file "logic_control.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;		None               void
  1829 ;; Registers used:
  1830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMMON   BANK0   BANK1
  1836 ;;      Params:         0       0       0
  1837 ;;      Locals:         0       0       0
  1838 ;;      Temps:          0       0       0
  1839 ;;      Totals:         0       0       0
  1840 ;;Total ram usage:        0 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    8
  1843 ;; This function calls:
  1844 ;;		_ContrlSignal_Driver
  1845 ;;		_Motor_Driver
  1846 ;; This function is called by:
  1847 ;;		_main
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           psect	text948
  1851                           	file	"logic_control.c"
  1852                           	line	152
  1853                           	global	__size_of_MainLoop
  1854  0007                     	__size_of_MainLoop	equ	__end_of_MainLoop-_MainLoop
  1855                           	
  1856  06E9                     _MainLoop:	
  1857                           	opt	stack 7
  1858                           ; Regs used in _MainLoop: [wreg-status,0+pclath+cstack]
  1859                           	line	153
  1860                           	
  1861  06E9                     l19519:	
  1862                           ;logic_control.c: 153: ContrlSignal_Driver();
  1863  06E9  3181  21E4  3186   	fcall	_ContrlSignal_Driver
  1864                           	line	154
  1865                           	
  1866  06EC                     l19521:	
  1867                           ;logic_control.c: 154: Motor_Driver();
  1868  06EC  3181  2119  3186   	fcall	_Motor_Driver
  1869                           	line	155
  1870                           	
  1871  06EF                     l5386:	
  1872  06EF  0008               	return
  1873                           	opt stack 0
  1874                           GLOBAL	__end_of_MainLoop
  1875  06F0                     	__end_of_MainLoop:
  1876 ;; =============== function _MainLoop ends ============
  1877                           
  1878                           	signat	_MainLoop,88
  1879                           	global	_Motor_Driver
  1880                           psect	text949,local,class=CODE,delta=2
  1881                           global __ptext949
  1882  0119                     __ptext949:
  1883                           
  1884 ;; *************** function _Motor_Driver *****************
  1885 ;; Defined at:
  1886 ;;		line 90 in file "logic_control.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;		None               void
  1893 ;; Registers used:
  1894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMMON   BANK0   BANK1
  1900 ;;      Params:         0       0       0
  1901 ;;      Locals:         0       0       0
  1902 ;;      Temps:          0       1       0
  1903 ;;      Totals:         0       1       0
  1904 ;;Total ram usage:        1 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    7
  1907 ;; This function calls:
  1908 ;;		_Motor_GetStaus
  1909 ;;		_Uart_SendStr
  1910 ;;		_Motor_Stop
  1911 ;;		_e2SavePara
  1912 ;;		_Delay_MS
  1913 ;; This function is called by:
  1914 ;;		_MainLoop
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           psect	text949
  1918                           	file	"logic_control.c"
  1919                           	line	90
  1920                           	global	__size_of_Motor_Driver
  1921  00CB                     	__size_of_Motor_Driver	equ	__end_of_Motor_Driver-_Motor_Driver
  1922                           	
  1923  0119                     _Motor_Driver:	
  1924                           	opt	stack 7
  1925                           ; Regs used in _Motor_Driver: [wreg-status,0+pclath+cstack]
  1926                           	line	91
  1927                           	
  1928  0119                     l19453:	
  1929                           ;logic_control.c: 91: System_Sta = Motor_GetStaus();
  1930  0119  3186  26DE  3181   	fcall	_Motor_GetStaus
  1931  011C  0020               	movlb 0	; select bank0
  1932  011D  00CE               	movwf	(??_Motor_Driver+0)+0
  1933  011E  084E               	movf	(??_Motor_Driver+0)+0,w
  1934  011F  00BF               	movwf	(_System_Sta)
  1935                           	line	93
  1936                           ;logic_control.c: 93: switch(Motor_RunSta)
  1937  0120  29D7               	goto	l19517
  1938                           	line	95
  1939                           ;logic_control.c: 94: {
  1940                           ;logic_control.c: 95: case Motor_AutoClosing:
  1941                           	
  1942  0121                     l5369:	
  1943                           	line	96
  1944                           	
  1945  0121                     l19455:	
  1946                           ;logic_control.c: 96: if((System_Sta == System_Closed)&&(Motor_RunTime < 6000))
  1947  0121  083F               	movf	(_System_Sta),w
  1948  0122  3A01               	xorlw	01h&0ffh
  1949  0123  1D03               	skipz
  1950  0124  2926               	goto	u3351
  1951  0125  2927               	goto	u3350
  1952  0126                     u3351:
  1953  0126  2941               	goto	l19467
  1954  0127                     u3350:
  1955                           	
  1956  0127                     l19457:	
  1957  0127  3017               	movlw	high(01770h)
  1958  0128  022D               	subwf	(_Motor_RunTime+1),w
  1959  0129  3070               	movlw	low(01770h)
  1960  012A  1903               	skipnz
  1961  012B  022C               	subwf	(_Motor_RunTime),w
  1962  012C  1803               	skipnc
  1963  012D  292F               	goto	u3361
  1964  012E  2930               	goto	u3360
  1965  012F                     u3361:
  1966  012F  2941               	goto	l19467
  1967  0130                     u3360:
  1968                           	line	98
  1969                           	
  1970  0130                     l19459:	
  1971                           ;logic_control.c: 97: {
  1972                           ;logic_control.c: 98: Uart_SendStr((uint8_t*)"M auto close\r\n");
  1973  0130  304E               	movlw	(STR_5|8000h)&0ffh
  1974  0131  3187  2708  3181   	fcall	_Uart_SendStr
  1975                           	line	99
  1976                           	
  1977  0134                     l19461:	
  1978                           ;logic_control.c: 99: Motor_RunSta = Motor_Stoped;
  1979  0134  3004               	movlw	(04h)
  1980  0135  0020               	movlb 0	; select bank0
  1981  0136  00CE               	movwf	(??_Motor_Driver+0)+0
  1982  0137  084E               	movf	(??_Motor_Driver+0)+0,w
  1983  0138  00BC               	movwf	(_Motor_RunSta)
  1984                           	line	100
  1985                           	
  1986  0139                     l19463:	
  1987                           ;logic_control.c: 100: Motor_Stop();
  1988  0139  3185  25A9  3181   	fcall	_Motor_Stop
  1989                           	line	101
  1990                           	
  1991  013C                     l19465:	
  1992                           ;logic_control.c: 101: e2SavePara(eE2State_AutoClose);
  1993  013C  3002               	movlw	(02h)
  1994  013D  3185  25FD  3181   	fcall	_e2SavePara
  1995                           	line	103
  1996                           ;logic_control.c: 103: }
  1997  0140  29E3               	goto	l5383
  1998                           	line	104
  1999                           	
  2000  0141                     l5370:	
  2001                           	
  2002  0141                     l19467:	
  2003                           ;logic_control.c: 104: else if(Motor_RunTime >= 6000)
  2004  0141  3017               	movlw	high(01770h)
  2005  0142  0020               	movlb 0	; select bank0
  2006  0143  022D               	subwf	(_Motor_RunTime+1),w
  2007  0144  3070               	movlw	low(01770h)
  2008  0145  1903               	skipnz
  2009  0146  022C               	subwf	(_Motor_RunTime),w
  2010  0147  1C03               	skipc
  2011  0148  294A               	goto	u3371
  2012  0149  294B               	goto	u3370
  2013  014A                     u3371:
  2014  014A  29E3               	goto	l5383
  2015  014B                     u3370:
  2016                           	line	106
  2017                           	
  2018  014B                     l19469:	
  2019                           ;logic_control.c: 105: {
  2020                           ;logic_control.c: 106: Uart_SendStr((uint8_t*)"M auto close timeout\r\n");
  2021  014B  3001               	movlw	(STR_6|8000h)&0ffh
  2022  014C  3187  2708  3181   	fcall	_Uart_SendStr
  2023                           	line	107
  2024                           	
  2025  014F                     l19471:	
  2026                           ;logic_control.c: 107: Motor_RunSta = Motor_Stoped;
  2027  014F  3004               	movlw	(04h)
  2028  0150  0020               	movlb 0	; select bank0
  2029  0151  00CE               	movwf	(??_Motor_Driver+0)+0
  2030  0152  084E               	movf	(??_Motor_Driver+0)+0,w
  2031  0153  00BC               	movwf	(_Motor_RunSta)
  2032                           	line	108
  2033                           	
  2034  0154                     l19473:	
  2035                           ;logic_control.c: 108: Motor_Stop();
  2036  0154  3185  25A9  3181   	fcall	_Motor_Stop
  2037  0157  29E3               	goto	l5383
  2038                           	line	110
  2039                           	
  2040  0158                     l5372:	
  2041  0158  29E3               	goto	l5383
  2042                           	line	111
  2043                           	
  2044  0159                     l5371:	
  2045                           ;logic_control.c: 110: }
  2046                           ;logic_control.c: 111: break;
  2047  0159  29E3               	goto	l5383
  2048                           	line	112
  2049                           ;logic_control.c: 112: case Motor_ManualClosing:
  2050                           	
  2051  015A                     l5374:	
  2052                           	line	113
  2053                           	
  2054  015A                     l19475:	
  2055                           ;logic_control.c: 113: if((System_Sta == System_Closed)&&(Motor_RunTime < 6000))
  2056  015A  0020               	movlb 0	; select bank0
  2057  015B  083F               	movf	(_System_Sta),w
  2058  015C  3A01               	xorlw	01h&0ffh
  2059  015D  1D03               	skipz
  2060  015E  2960               	goto	u3381
  2061  015F  2961               	goto	u3380
  2062  0160                     u3381:
  2063  0160  2983               	goto	l19487
  2064  0161                     u3380:
  2065                           	
  2066  0161                     l19477:	
  2067  0161  3017               	movlw	high(01770h)
  2068  0162  022D               	subwf	(_Motor_RunTime+1),w
  2069  0163  3070               	movlw	low(01770h)
  2070  0164  1903               	skipnz
  2071  0165  022C               	subwf	(_Motor_RunTime),w
  2072  0166  1803               	skipnc
  2073  0167  2969               	goto	u3391
  2074  0168  296A               	goto	u3390
  2075  0169                     u3391:
  2076  0169  2983               	goto	l19487
  2077  016A                     u3390:
  2078                           	line	115
  2079                           	
  2080  016A                     l19479:	
  2081                           ;logic_control.c: 114: {
  2082                           ;logic_control.c: 115: Uart_SendStr((uint8_t*)"M man close\r\n");
  2083  016A  306B               	movlw	(STR_7|8000h)&0ffh
  2084  016B  3187  2708  3181   	fcall	_Uart_SendStr
  2085                           	line	116
  2086                           ;logic_control.c: 116: Delay_MS(2);
  2087  016E  3002               	movlw	low(02h)
  2088  016F  0020               	movlb 0	; select bank0
  2089  0170  00C6               	movwf	(?_Delay_MS)
  2090  0171  3000               	movlw	high(02h)
  2091  0172  00C7               	movwf	((?_Delay_MS))+1
  2092  0173  3186  2621  3181   	fcall	_Delay_MS
  2093                           	line	117
  2094                           	
  2095  0176                     l19481:	
  2096                           ;logic_control.c: 117: Motor_RunSta = Motor_Stoped;
  2097  0176  3004               	movlw	(04h)
  2098  0177  0020               	movlb 0	; select bank0
  2099  0178  00CE               	movwf	(??_Motor_Driver+0)+0
  2100  0179  084E               	movf	(??_Motor_Driver+0)+0,w
  2101  017A  00BC               	movwf	(_Motor_RunSta)
  2102                           	line	118
  2103                           	
  2104  017B                     l19483:	
  2105                           ;logic_control.c: 118: Motor_Stop();
  2106  017B  3185  25A9  3181   	fcall	_Motor_Stop
  2107                           	line	119
  2108                           	
  2109  017E                     l19485:	
  2110                           ;logic_control.c: 119: e2SavePara(eE2State_ManClose);
  2111  017E  3004               	movlw	(04h)
  2112  017F  3185  25FD  3181   	fcall	_e2SavePara
  2113                           	line	120
  2114                           ;logic_control.c: 120: }
  2115  0182  29E3               	goto	l5383
  2116                           	line	121
  2117                           	
  2118  0183                     l5375:	
  2119                           	
  2120  0183                     l19487:	
  2121                           ;logic_control.c: 121: else if(Motor_RunTime >= 6000)
  2122  0183  3017               	movlw	high(01770h)
  2123  0184  0020               	movlb 0	; select bank0
  2124  0185  022D               	subwf	(_Motor_RunTime+1),w
  2125  0186  3070               	movlw	low(01770h)
  2126  0187  1903               	skipnz
  2127  0188  022C               	subwf	(_Motor_RunTime),w
  2128  0189  1C03               	skipc
  2129  018A  298C               	goto	u3401
  2130  018B  298D               	goto	u3400
  2131  018C                     u3401:
  2132  018C  29E3               	goto	l5383
  2133  018D                     u3400:
  2134                           	line	123
  2135                           	
  2136  018D                     l19489:	
  2137                           ;logic_control.c: 122: {
  2138                           ;logic_control.c: 123: Uart_SendStr((uint8_t*)"M man close timeout\r\n");
  2139  018D  3018               	movlw	(STR_8|8000h)&0ffh
  2140  018E  3187  2708  3181   	fcall	_Uart_SendStr
  2141                           	line	124
  2142                           	
  2143  0191                     l19491:	
  2144                           ;logic_control.c: 124: Motor_RunSta = Motor_Stoped;
  2145  0191  3004               	movlw	(04h)
  2146  0192  0020               	movlb 0	; select bank0
  2147  0193  00CE               	movwf	(??_Motor_Driver+0)+0
  2148  0194  084E               	movf	(??_Motor_Driver+0)+0,w
  2149  0195  00BC               	movwf	(_Motor_RunSta)
  2150                           	line	125
  2151                           	
  2152  0196                     l19493:	
  2153                           ;logic_control.c: 125: Motor_Stop();
  2154  0196  3185  25A9  3181   	fcall	_Motor_Stop
  2155  0199  29E3               	goto	l5383
  2156                           	line	127
  2157                           	
  2158  019A                     l5377:	
  2159  019A  29E3               	goto	l5383
  2160                           	line	128
  2161                           	
  2162  019B                     l5376:	
  2163                           ;logic_control.c: 127: }
  2164                           ;logic_control.c: 128: break;
  2165  019B  29E3               	goto	l5383
  2166                           	line	129
  2167                           ;logic_control.c: 129: case Motor_Opening:
  2168                           	
  2169  019C                     l5378:	
  2170                           	line	130
  2171                           	
  2172  019C                     l19495:	
  2173                           ;logic_control.c: 130: if((System_Sta == System_Opened)&&(Motor_RunTime > 500))
  2174  019C  0020               	movlb 0	; select bank0
  2175  019D  08BF               	movf	(_System_Sta),f
  2176  019E  1D03               	skipz
  2177  019F  29A1               	goto	u3411
  2178  01A0  29A2               	goto	u3410
  2179  01A1                     u3411:
  2180  01A1  29BC               	goto	l19507
  2181  01A2                     u3410:
  2182                           	
  2183  01A2                     l19497:	
  2184  01A2  3001               	movlw	high(01F5h)
  2185  01A3  022D               	subwf	(_Motor_RunTime+1),w
  2186  01A4  30F5               	movlw	low(01F5h)
  2187  01A5  1903               	skipnz
  2188  01A6  022C               	subwf	(_Motor_RunTime),w
  2189  01A7  1C03               	skipc
  2190  01A8  29AA               	goto	u3421
  2191  01A9  29AB               	goto	u3420
  2192  01AA                     u3421:
  2193  01AA  29BC               	goto	l19507
  2194  01AB                     u3420:
  2195                           	line	132
  2196                           	
  2197  01AB                     l19499:	
  2198                           ;logic_control.c: 131: {
  2199                           ;logic_control.c: 132: Uart_SendStr((uint8_t*)"M open\r\n");
  2200  01AB  3082               	movlw	(STR_9|8000h)&0ffh
  2201  01AC  3187  2708  3181   	fcall	_Uart_SendStr
  2202                           	line	133
  2203                           	
  2204  01AF                     l19501:	
  2205                           ;logic_control.c: 133: Motor_RunSta = Motor_Stoped;
  2206  01AF  3004               	movlw	(04h)
  2207  01B0  0020               	movlb 0	; select bank0
  2208  01B1  00CE               	movwf	(??_Motor_Driver+0)+0
  2209  01B2  084E               	movf	(??_Motor_Driver+0)+0,w
  2210  01B3  00BC               	movwf	(_Motor_RunSta)
  2211                           	line	134
  2212                           	
  2213  01B4                     l19503:	
  2214                           ;logic_control.c: 134: Motor_Stop();
  2215  01B4  3185  25A9  3181   	fcall	_Motor_Stop
  2216                           	line	135
  2217                           	
  2218  01B7                     l19505:	
  2219                           ;logic_control.c: 135: e2SavePara(eE2State_AutoOpen);
  2220  01B7  3001               	movlw	(01h)
  2221  01B8  3185  25FD  3181   	fcall	_e2SavePara
  2222                           	line	136
  2223                           ;logic_control.c: 136: }
  2224  01BB  29E3               	goto	l5383
  2225                           	line	137
  2226                           	
  2227  01BC                     l5379:	
  2228                           	
  2229  01BC                     l19507:	
  2230                           ;logic_control.c: 137: else if(Motor_RunTime >= 6000)
  2231  01BC  3017               	movlw	high(01770h)
  2232  01BD  0020               	movlb 0	; select bank0
  2233  01BE  022D               	subwf	(_Motor_RunTime+1),w
  2234  01BF  3070               	movlw	low(01770h)
  2235  01C0  1903               	skipnz
  2236  01C1  022C               	subwf	(_Motor_RunTime),w
  2237  01C2  1C03               	skipc
  2238  01C3  29C5               	goto	u3431
  2239  01C4  29C6               	goto	u3430
  2240  01C5                     u3431:
  2241  01C5  29E3               	goto	l5383
  2242  01C6                     u3430:
  2243                           	line	139
  2244                           	
  2245  01C6                     l19509:	
  2246                           ;logic_control.c: 138: {
  2247                           ;logic_control.c: 139: Uart_SendStr((uint8_t*)"M open timeout\r\n");
  2248  01C6  302E               	movlw	(STR_10|8000h)&0ffh
  2249  01C7  3187  2708  3181   	fcall	_Uart_SendStr
  2250                           	line	140
  2251                           	
  2252  01CA                     l19511:	
  2253                           ;logic_control.c: 140: Motor_RunSta = Motor_Stoped;
  2254  01CA  3004               	movlw	(04h)
  2255  01CB  0020               	movlb 0	; select bank0
  2256  01CC  00CE               	movwf	(??_Motor_Driver+0)+0
  2257  01CD  084E               	movf	(??_Motor_Driver+0)+0,w
  2258  01CE  00BC               	movwf	(_Motor_RunSta)
  2259                           	line	141
  2260                           	
  2261  01CF                     l19513:	
  2262                           ;logic_control.c: 141: Motor_Stop();
  2263  01CF  3185  25A9  3181   	fcall	_Motor_Stop
  2264  01D2  29E3               	goto	l5383
  2265                           	line	143
  2266                           	
  2267  01D3                     l5381:	
  2268  01D3  29E3               	goto	l5383
  2269                           	line	144
  2270                           	
  2271  01D4                     l5380:	
  2272                           ;logic_control.c: 143: }
  2273                           ;logic_control.c: 144: break;
  2274  01D4  29E3               	goto	l5383
  2275                           	line	146
  2276                           ;logic_control.c: 146: default:break;
  2277                           	
  2278  01D5                     l5382:	
  2279  01D5  29E3               	goto	l5383
  2280                           	line	147
  2281                           	
  2282  01D6                     l19515:	
  2283                           ;logic_control.c: 147: }
  2284  01D6  29E3               	goto	l5383
  2285                           	line	93
  2286                           	
  2287  01D7                     l5368:	
  2288                           	
  2289  01D7                     l19517:	
  2290  01D7  0020               	movlb 0	; select bank0
  2291  01D8  083C               	movf	(_Motor_RunSta),w
  2292                           	; Switch size 1, requested type "space"
  2293                           ; Number of cases is 3, Range of values is 1 to 3
  2294                           ; switch strategies available:
  2295                           ; Name         Instructions Cycles
  2296                           ; simple_byte           10     6 (average)
  2297                           ; direct_byte           15     9 (fixed)
  2298                           ; jumptable            263     9 (fixed)
  2299                           ;	Chosen strategy is simple_byte
  2300                           
  2301                           	opt asmopt_off
  2302  01D9  3A01               	xorlw	1^0	; case 1
  2303  01DA  1903               	skipnz
  2304  01DB  2921               	goto	l19455
  2305  01DC  3A03               	xorlw	2^1	; case 2
  2306  01DD  1903               	skipnz
  2307  01DE  295A               	goto	l19475
  2308  01DF  3A01               	xorlw	3^2	; case 3
  2309  01E0  1903               	skipnz
  2310  01E1  299C               	goto	l19495
  2311  01E2  29E3               	goto	l5383
  2312                           	opt asmopt_on
  2313                           
  2314                           	line	147
  2315                           	
  2316  01E3                     l5373:	
  2317                           	line	149
  2318                           	
  2319  01E3                     l5383:	
  2320  01E3  0008               	return
  2321                           	opt stack 0
  2322                           GLOBAL	__end_of_Motor_Driver
  2323  01E4                     	__end_of_Motor_Driver:
  2324 ;; =============== function _Motor_Driver ends ============
  2325                           
  2326                           	signat	_Motor_Driver,88
  2327                           	global	_ContrlSignal_Driver
  2328                           psect	text950,local,class=CODE,delta=2
  2329                           global __ptext950
  2330  01E4                     __ptext950:
  2331                           
  2332 ;; *************** function _ContrlSignal_Driver *****************
  2333 ;; Defined at:
  2334 ;;		line 35 in file "logic_control.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;		None
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;		None
  2339 ;; Return value:  Size  Location     Type
  2340 ;;		None               void
  2341 ;; Registers used:
  2342 ;;		wreg, status,2, status,0, pclath, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMMON   BANK0   BANK1
  2348 ;;      Params:         0       0       0
  2349 ;;      Locals:         0       0       0
  2350 ;;      Temps:          0       1       0
  2351 ;;      Totals:         0       1       0
  2352 ;;Total ram usage:        1 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    7
  2355 ;; This function calls:
  2356 ;;		_PowerSwitch_Enable
  2357 ;;		_Delay_MS
  2358 ;;		_Motor_GetStaus
  2359 ;;		_Motor_Stop
  2360 ;;		_Uart_SendStr
  2361 ;;		_Motor_Counterclockwise
  2362 ;;		_Motor_Clockwise
  2363 ;; This function is called by:
  2364 ;;		_MainLoop
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           psect	text950
  2368                           	file	"logic_control.c"
  2369                           	line	35
  2370                           	global	__size_of_ContrlSignal_Driver
  2371  00A2                     	__size_of_ContrlSignal_Driver	equ	__end_of_ContrlSignal_Driver-_ContrlSignal_Driver
  2372                           	
  2373  01E4                     _ContrlSignal_Driver:	
  2374                           	opt	stack 7
  2375                           ; Regs used in _ContrlSignal_Driver: [wreg+status,2+status,0+pclath+cstack]
  2376                           	line	38
  2377                           	
  2378  01E4                     l19399:	
  2379                           ;logic_control.c: 38: if((Ctr_SignalBck != Ctr_Signal) &&(Motor_RunSta==Motor_Stoped ||M
                                 otor_RunSta== Motor_Default) &&(gPhaseVoltage_CH1 > 200) )
  2380  01E4  0020               	movlb 0	; select bank0
  2381  01E5  083B               	movf	(_Ctr_SignalBck),w
  2382  01E6  063A               	xorwf	(_Ctr_Signal),w
  2383  01E7  1903               	skipnz
  2384  01E8  29EA               	goto	u3231
  2385  01E9  29EB               	goto	u3230
  2386  01EA                     u3231:
  2387  01EA  2A85               	goto	l5365
  2388  01EB                     u3230:
  2389                           	
  2390  01EB                     l19401:	
  2391  01EB  083C               	movf	(_Motor_RunSta),w
  2392  01EC  3A04               	xorlw	04h&0ffh
  2393  01ED  1903               	skipnz
  2394  01EE  29F0               	goto	u3241
  2395  01EF  29F1               	goto	u3240
  2396  01F0                     u3241:
  2397  01F0  29F7               	goto	l19405
  2398  01F1                     u3240:
  2399                           	
  2400  01F1                     l19403:	
  2401  01F1  08BC               	movf	(_Motor_RunSta),f
  2402  01F2  1D03               	skipz
  2403  01F3  29F5               	goto	u3251
  2404  01F4  29F6               	goto	u3250
  2405  01F5                     u3251:
  2406  01F5  2A85               	goto	l5365
  2407  01F6                     u3250:
  2408  01F6  29F7               	goto	l19405
  2409                           	
  2410  01F7                     l5352:	
  2411                           	
  2412  01F7                     l19405:	
  2413  01F7  3000               	movlw	high(0C9h)
  2414  01F8  0233               	subwf	(_gPhaseVoltage_CH1+1),w
  2415  01F9  30C9               	movlw	low(0C9h)
  2416  01FA  1903               	skipnz
  2417  01FB  0232               	subwf	(_gPhaseVoltage_CH1),w
  2418  01FC  1C03               	skipc
  2419  01FD  29FF               	goto	u3261
  2420  01FE  2A00               	goto	u3260
  2421  01FF                     u3261:
  2422  01FF  2A85               	goto	l5365
  2423  0200                     u3260:
  2424                           	line	40
  2425                           	
  2426  0200                     l19407:	
  2427                           ;logic_control.c: 39: {
  2428                           ;logic_control.c: 40: PowerSwitch_Enable();
  2429  0200  3186  2610  3181   	fcall	_PowerSwitch_Enable
  2430                           	line	41
  2431                           ;logic_control.c: 41: Delay_MS(200);
  2432  0203  30C8               	movlw	low(0C8h)
  2433  0204  0020               	movlb 0	; select bank0
  2434  0205  00C6               	movwf	(?_Delay_MS)
  2435  0206  3000               	movlw	high(0C8h)
  2436  0207  00C7               	movwf	((?_Delay_MS))+1
  2437  0208  3186  2621  3181   	fcall	_Delay_MS
  2438                           	line	43
  2439                           	
  2440  020B                     l19409:	
  2441                           ;logic_control.c: 43: System_Sta = Motor_GetStaus();
  2442  020B  3186  26DE  3181   	fcall	_Motor_GetStaus
  2443  020E  0020               	movlb 0	; select bank0
  2444  020F  00CC               	movwf	(??_ContrlSignal_Driver+0)+0
  2445  0210  084C               	movf	(??_ContrlSignal_Driver+0)+0,w
  2446  0211  00BF               	movwf	(_System_Sta)
  2447                           	line	44
  2448                           	
  2449  0212                     l19411:	
  2450                           ;logic_control.c: 44: if(Ctr_Signal == Ctrl_SignalValid)
  2451  0212  083A               	movf	(_Ctr_Signal),w
  2452  0213  3A01               	xorlw	01h&0ffh
  2453  0214  1D03               	skipz
  2454  0215  2A17               	goto	u3271
  2455  0216  2A18               	goto	u3270
  2456  0217                     u3271:
  2457  0217  2A51               	goto	l19435
  2458  0218                     u3270:
  2459                           	line	46
  2460                           	
  2461  0218                     l19413:	
  2462                           ;logic_control.c: 45: {
  2463                           ;logic_control.c: 46: if(System_Sta == System_Closed)
  2464  0218  083F               	movf	(_System_Sta),w
  2465  0219  3A01               	xorlw	01h&0ffh
  2466  021A  1D03               	skipz
  2467  021B  2A1D               	goto	u3281
  2468  021C  2A1E               	goto	u3280
  2469  021D                     u3281:
  2470  021D  2A22               	goto	l19417
  2471  021E                     u3280:
  2472                           	line	48
  2473                           	
  2474  021E                     l19415:	
  2475                           ;logic_control.c: 47: {
  2476                           ;logic_control.c: 48: Motor_Stop();
  2477  021E  3185  25A9  3181   	fcall	_Motor_Stop
  2478                           	line	49
  2479                           ;logic_control.c: 49: }
  2480  0221  2A7F               	goto	l5360
  2481                           	line	50
  2482                           	
  2483  0222                     l5354:	
  2484                           	
  2485  0222                     l19417:	
  2486                           ;logic_control.c: 50: else if(System_Sta == System_Opened)
  2487  0222  0020               	movlb 0	; select bank0
  2488  0223  08BF               	movf	(_System_Sta),f
  2489  0224  1D03               	skipz
  2490  0225  2A27               	goto	u3291
  2491  0226  2A28               	goto	u3290
  2492  0227                     u3291:
  2493  0227  2A7F               	goto	l5360
  2494  0228                     u3290:
  2495                           	line	52
  2496                           	
  2497  0228                     l19419:	
  2498                           ;logic_control.c: 51: {
  2499                           ;logic_control.c: 52: if(AutoOrManualMode == AutoMode)
  2500  0228  08B9               	movf	(_AutoOrManualMode),f
  2501  0229  1D03               	skipz
  2502  022A  2A2C               	goto	u3301
  2503  022B  2A2D               	goto	u3300
  2504  022C                     u3301:
  2505  022C  2A39               	goto	l19427
  2506  022D                     u3300:
  2507                           	line	54
  2508                           	
  2509  022D                     l19421:	
  2510                           ;logic_control.c: 53: {
  2511                           ;logic_control.c: 54: Uart_SendStr((uint8_t*)"C auto close\r\n");
  2512  022D  303F               	movlw	(STR_1|8000h)&0ffh
  2513  022E  3187  2708  3181   	fcall	_Uart_SendStr
  2514                           	line	55
  2515                           	
  2516  0231                     l19423:	
  2517                           ;logic_control.c: 55: Motor_RunSta = Motor_AutoClosing;
  2518  0231  0020               	movlb 0	; select bank0
  2519  0232  01BC               	clrf	(_Motor_RunSta)
  2520  0233  1403               	bsf	status,0
  2521  0234  0DBC               	rlf	(_Motor_RunSta),f
  2522                           	line	56
  2523                           	
  2524  0235                     l19425:	
  2525                           ;logic_control.c: 56: Motor_Counterclockwise();
  2526  0235  3186  26AD  3181   	fcall	_Motor_Counterclockwise
  2527                           	line	57
  2528                           ;logic_control.c: 57: }
  2529  0238  2A7F               	goto	l5360
  2530                           	line	58
  2531                           	
  2532  0239                     l5357:	
  2533                           	
  2534  0239                     l19427:	
  2535                           ;logic_control.c: 58: else if(AutoOrManualMode == ManualMode)
  2536  0239  0020               	movlb 0	; select bank0
  2537  023A  0839               	movf	(_AutoOrManualMode),w
  2538  023B  3A01               	xorlw	01h&0ffh
  2539  023C  1D03               	skipz
  2540  023D  2A3F               	goto	u3311
  2541  023E  2A40               	goto	u3310
  2542  023F                     u3311:
  2543  023F  2A7F               	goto	l5360
  2544  0240                     u3310:
  2545                           	line	60
  2546                           	
  2547  0240                     l19429:	
  2548                           ;logic_control.c: 59: {
  2549                           ;logic_control.c: 60: Uart_SendStr((uint8_t*)"C man close\r\n");
  2550  0240  305D               	movlw	(STR_2|8000h)&0ffh
  2551  0241  3187  2708  3181   	fcall	_Uart_SendStr
  2552                           	line	61
  2553                           	
  2554  0244                     l19431:	
  2555                           ;logic_control.c: 61: Motor_RunSta = Motor_ManualClosing;
  2556  0244  3002               	movlw	(02h)
  2557  0245  0020               	movlb 0	; select bank0
  2558  0246  00CC               	movwf	(??_ContrlSignal_Driver+0)+0
  2559  0247  084C               	movf	(??_ContrlSignal_Driver+0)+0,w
  2560  0248  00BC               	movwf	(_Motor_RunSta)
  2561                           	line	62
  2562                           	
  2563  0249                     l19433:	
  2564                           ;logic_control.c: 62: Motor_Clockwise();
  2565  0249  3186  26A0  3181   	fcall	_Motor_Clockwise
  2566  024C  2A7F               	goto	l5360
  2567                           	line	63
  2568                           	
  2569  024D                     l5359:	
  2570  024D  2A7F               	goto	l5360
  2571                           	line	65
  2572                           	
  2573  024E                     l5358:	
  2574  024E  2A7F               	goto	l5360
  2575                           	
  2576  024F                     l5356:	
  2577  024F  2A7F               	goto	l5360
  2578                           	line	66
  2579                           	
  2580  0250                     l5355:	
  2581                           ;logic_control.c: 63: }
  2582                           ;logic_control.c: 65: }
  2583                           ;logic_control.c: 66: }
  2584  0250  2A7F               	goto	l5360
  2585                           	line	67
  2586                           	
  2587  0251                     l5353:	
  2588                           	
  2589  0251                     l19435:	
  2590                           ;logic_control.c: 67: else if(Ctr_Signal == Ctrl_SignalInvalid)
  2591  0251  0020               	movlb 0	; select bank0
  2592  0252  08BA               	movf	(_Ctr_Signal),f
  2593  0253  1D03               	skipz
  2594  0254  2A56               	goto	u3321
  2595  0255  2A57               	goto	u3320
  2596  0256                     u3321:
  2597  0256  2A7F               	goto	l5360
  2598  0257                     u3320:
  2599                           	line	70
  2600                           	
  2601  0257                     l19437:	
  2602                           ;logic_control.c: 68: {
  2603                           ;logic_control.c: 70: if(System_Sta == System_Closed)
  2604  0257  083F               	movf	(_System_Sta),w
  2605  0258  3A01               	xorlw	01h&0ffh
  2606  0259  1D03               	skipz
  2607  025A  2A5C               	goto	u3331
  2608  025B  2A5D               	goto	u3330
  2609  025C                     u3331:
  2610  025C  2A6A               	goto	l19445
  2611  025D                     u3330:
  2612                           	line	72
  2613                           	
  2614  025D                     l19439:	
  2615                           ;logic_control.c: 71: {
  2616                           ;logic_control.c: 72: Uart_SendStr((uint8_t*)"C open\r\n");
  2617  025D  3079               	movlw	(STR_3|8000h)&0ffh
  2618  025E  3187  2708  3181   	fcall	_Uart_SendStr
  2619                           	line	73
  2620                           	
  2621  0261                     l19441:	
  2622                           ;logic_control.c: 73: Motor_RunSta = Motor_Opening;
  2623  0261  3003               	movlw	(03h)
  2624  0262  0020               	movlb 0	; select bank0
  2625  0263  00CC               	movwf	(??_ContrlSignal_Driver+0)+0
  2626  0264  084C               	movf	(??_ContrlSignal_Driver+0)+0,w
  2627  0265  00BC               	movwf	(_Motor_RunSta)
  2628                           	line	74
  2629                           	
  2630  0266                     l19443:	
  2631                           ;logic_control.c: 74: Motor_Counterclockwise();
  2632  0266  3186  26AD  3181   	fcall	_Motor_Counterclockwise
  2633                           	line	75
  2634                           ;logic_control.c: 75: }
  2635  0269  2A7F               	goto	l5360
  2636                           	line	76
  2637                           	
  2638  026A                     l5362:	
  2639                           	
  2640  026A                     l19445:	
  2641                           ;logic_control.c: 76: else if(System_Sta == System_Opened)
  2642  026A  0020               	movlb 0	; select bank0
  2643  026B  08BF               	movf	(_System_Sta),f
  2644  026C  1D03               	skipz
  2645  026D  2A6F               	goto	u3341
  2646  026E  2A70               	goto	u3340
  2647  026F                     u3341:
  2648  026F  2A7F               	goto	l5360
  2649  0270                     u3340:
  2650                           	line	78
  2651                           	
  2652  0270                     l19447:	
  2653                           ;logic_control.c: 77: {
  2654                           ;logic_control.c: 78: Uart_SendStr((uint8_t*)"C stop\r\n");
  2655  0270  308B               	movlw	(STR_4|8000h)&0ffh
  2656  0271  3187  2708  3181   	fcall	_Uart_SendStr
  2657                           	line	79
  2658                           	
  2659  0274                     l19449:	
  2660                           ;logic_control.c: 79: Motor_RunSta = Motor_Stoped;
  2661  0274  3004               	movlw	(04h)
  2662  0275  0020               	movlb 0	; select bank0
  2663  0276  00CC               	movwf	(??_ContrlSignal_Driver+0)+0
  2664  0277  084C               	movf	(??_ContrlSignal_Driver+0)+0,w
  2665  0278  00BC               	movwf	(_Motor_RunSta)
  2666                           	line	80
  2667                           	
  2668  0279                     l19451:	
  2669                           ;logic_control.c: 80: Motor_Stop();
  2670  0279  3185  25A9  3181   	fcall	_Motor_Stop
  2671  027C  2A7F               	goto	l5360
  2672                           	line	81
  2673                           	
  2674  027D                     l5364:	
  2675  027D  2A7F               	goto	l5360
  2676                           	line	82
  2677                           	
  2678  027E                     l5363:	
  2679  027E  2A7F               	goto	l5360
  2680                           	
  2681  027F                     l5361:	
  2682                           	line	83
  2683                           	
  2684  027F                     l5360:	
  2685                           ;logic_control.c: 81: }
  2686                           ;logic_control.c: 82: }
  2687                           ;logic_control.c: 83: Ctr_SignalBck = Ctr_Signal;
  2688  027F  0020               	movlb 0	; select bank0
  2689  0280  083A               	movf	(_Ctr_Signal),w
  2690  0281  00CC               	movwf	(??_ContrlSignal_Driver+0)+0
  2691  0282  084C               	movf	(??_ContrlSignal_Driver+0)+0,w
  2692  0283  00BB               	movwf	(_Ctr_SignalBck)
  2693  0284  2A85               	goto	l5365
  2694                           	line	84
  2695                           	
  2696  0285                     l5350:	
  2697                           	line	85
  2698                           	
  2699  0285                     l5365:	
  2700  0285  0008               	return
  2701                           	opt stack 0
  2702                           GLOBAL	__end_of_ContrlSignal_Driver
  2703  0286                     	__end_of_ContrlSignal_Driver:
  2704 ;; =============== function _ContrlSignal_Driver ends ============
  2705                           
  2706                           	signat	_ContrlSignal_Driver,88
  2707                           	global	_Motor_Stop
  2708                           psect	text951,local,class=CODE,delta=2
  2709                           global __ptext951
  2710  05A9                     __ptext951:
  2711                           
  2712 ;; *************** function _Motor_Stop *****************
  2713 ;; Defined at:
  2714 ;;		line 69 in file "motor.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  tem             1    5[BANK0 ] unsigned char 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;		None               void
  2721 ;; Registers used:
  2722 ;;		wreg, status,2, status,0, pclath, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMMON   BANK0   BANK1
  2728 ;;      Params:         0       0       0
  2729 ;;      Locals:         0       1       0
  2730 ;;      Temps:          0       1       0
  2731 ;;      Totals:         0       2       0
  2732 ;;Total ram usage:        2 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    6
  2735 ;; This function calls:
  2736 ;;		_Delay_MS
  2737 ;;		_PowerSwitch_Disable
  2738 ;; This function is called by:
  2739 ;;		_main
  2740 ;;		_ContrlSignal_Driver
  2741 ;;		_Motor_Driver
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           psect	text951
  2745                           	file	"motor.c"
  2746                           	line	69
  2747                           	global	__size_of_Motor_Stop
  2748  0016                     	__size_of_Motor_Stop	equ	__end_of_Motor_Stop-_Motor_Stop
  2749                           	
  2750  05A9                     _Motor_Stop:	
  2751                           	opt	stack 7
  2752                           ; Regs used in _Motor_Stop: [wreg+status,2+status,0+pclath+cstack]
  2753                           	line	73
  2754                           	
  2755  05A9                     l19387:	
  2756                           ;motor.c: 72: uint8_t tem;
  2757                           ;motor.c: 73: tem = PORTC;
  2758  05A9  0020               	movlb 0	; select bank0
  2759  05AA  080E               	movf	(14),w	;volatile
  2760  05AB  00CA               	movwf	(??_Motor_Stop+0)+0
  2761  05AC  084A               	movf	(??_Motor_Stop+0)+0,w
  2762  05AD  00CB               	movwf	(Motor_Stop@tem)
  2763                           	line	74
  2764                           	
  2765  05AE                     l19389:	
  2766                           ;motor.c: 74: tem |= (0x01 << 2);
  2767  05AE  154B               	bsf	(Motor_Stop@tem)+(2/8),(2)&7
  2768                           	line	75
  2769                           	
  2770  05AF                     l19391:	
  2771                           ;motor.c: 75: tem |= (0x01 << 5);
  2772  05AF  16CB               	bsf	(Motor_Stop@tem)+(5/8),(5)&7
  2773                           	line	76
  2774                           ;motor.c: 76: PORTC = tem;
  2775  05B0  084B               	movf	(Motor_Stop@tem),w
  2776  05B1  008E               	movwf	(14)	;volatile
  2777                           	line	77
  2778                           	
  2779  05B2                     l19393:	
  2780                           ;motor.c: 77: Motor_RunTime = 0;
  2781  05B2  01AC               	clrf	(_Motor_RunTime)
  2782  05B3  01AD               	clrf	(_Motor_RunTime+1)
  2783                           	line	80
  2784                           	
  2785  05B4                     l19395:	
  2786                           ;motor.c: 80: Delay_MS(200);
  2787  05B4  30C8               	movlw	low(0C8h)
  2788  05B5  00C6               	movwf	(?_Delay_MS)
  2789  05B6  3000               	movlw	high(0C8h)
  2790  05B7  00C7               	movwf	((?_Delay_MS))+1
  2791  05B8  3186  2621  3185   	fcall	_Delay_MS
  2792                           	line	81
  2793                           	
  2794  05BB                     l19397:	
  2795                           ;motor.c: 81: PowerSwitch_Disable();
  2796  05BB  3186  2685  3185   	fcall	_PowerSwitch_Disable
  2797                           	line	83
  2798                           	
  2799  05BE                     l6702:	
  2800  05BE  0008               	return
  2801                           	opt stack 0
  2802                           GLOBAL	__end_of_Motor_Stop
  2803  05BF                     	__end_of_Motor_Stop:
  2804 ;; =============== function _Motor_Stop ends ============
  2805                           
  2806                           	signat	_Motor_Stop,88
  2807                           	global	_PowerSwitch_Disable
  2808                           psect	text952,local,class=CODE,delta=2
  2809                           global __ptext952
  2810  0685                     __ptext952:
  2811                           
  2812 ;; *************** function _PowerSwitch_Disable *****************
  2813 ;; Defined at:
  2814 ;;		line 31 in file "lowpower.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;		None
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  tmp             1    3[BANK0 ] unsigned char 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;		None               void
  2821 ;; Registers used:
  2822 ;;		wreg, status,2, status,0, pclath, cstack
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMMON   BANK0   BANK1
  2828 ;;      Params:         0       0       0
  2829 ;;      Locals:         0       1       0
  2830 ;;      Temps:          0       1       0
  2831 ;;      Totals:         0       2       0
  2832 ;;Total ram usage:        2 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; Hardware stack levels required when called:    5
  2835 ;; This function calls:
  2836 ;;		_PowerSwitch_Delay
  2837 ;; This function is called by:
  2838 ;;		_Motor_Stop
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           psect	text952
  2842                           	file	"lowpower.c"
  2843                           	line	31
  2844                           	global	__size_of_PowerSwitch_Disable
  2845  000E                     	__size_of_PowerSwitch_Disable	equ	__end_of_PowerSwitch_Disable-_PowerSwitch_Disable
  2846                           	
  2847  0685                     _PowerSwitch_Disable:	
  2848                           	opt	stack 7
  2849                           ; Regs used in _PowerSwitch_Disable: [wreg+status,2+status,0+pclath+cstack]
  2850                           	line	32
  2851                           	
  2852  0685                     l19377:	
  2853                           ;lowpower.c: 32: uint8_t tmp = 0;
  2854  0685  0020               	movlb 0	; select bank0
  2855  0686  01C9               	clrf	(PowerSwitch_Disable@tmp)
  2856                           	line	34
  2857                           	
  2858  0687                     l19379:	
  2859                           ;lowpower.c: 34: PowerSwitch_Delay();
  2860  0687  3185  257C  3186   	fcall	_PowerSwitch_Delay
  2861                           	line	35
  2862                           	
  2863  068A                     l19381:	
  2864                           ;lowpower.c: 35: tmp = PORTC;
  2865  068A  0020               	movlb 0	; select bank0
  2866  068B  080E               	movf	(14),w	;volatile
  2867  068C  00C8               	movwf	(??_PowerSwitch_Disable+0)+0
  2868  068D  0848               	movf	(??_PowerSwitch_Disable+0)+0,w
  2869  068E  00C9               	movwf	(PowerSwitch_Disable@tmp)
  2870                           	line	36
  2871                           	
  2872  068F                     l19383:	
  2873                           ;lowpower.c: 36: tmp |= (0x01 << 3);
  2874  068F  15C9               	bsf	(PowerSwitch_Disable@tmp)+(3/8),(3)&7
  2875                           	line	37
  2876                           	
  2877  0690                     l19385:	
  2878                           ;lowpower.c: 37: PORTC = tmp;
  2879  0690  0849               	movf	(PowerSwitch_Disable@tmp),w
  2880  0691  008E               	movwf	(14)	;volatile
  2881                           	line	39
  2882                           	
  2883  0692                     l14636:	
  2884  0692  0008               	return
  2885                           	opt stack 0
  2886                           GLOBAL	__end_of_PowerSwitch_Disable
  2887  0693                     	__end_of_PowerSwitch_Disable:
  2888 ;; =============== function _PowerSwitch_Disable ends ============
  2889                           
  2890                           	signat	_PowerSwitch_Disable,88
  2891                           	global	_e2SavePara
  2892                           psect	text953,local,class=CODE,delta=2
  2893                           global __ptext953
  2894  05FD                     __ptext953:
  2895                           
  2896 ;; *************** function _e2SavePara *****************
  2897 ;; Defined at:
  2898 ;;		line 84 in file "internal_e2prom.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  val             1    wreg     enum E29
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  val             1    7[BANK0 ] enum E29
  2903 ;; Return value:  Size  Location     Type
  2904 ;;		None               void
  2905 ;; Registers used:
  2906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMMON   BANK0   BANK1
  2912 ;;      Params:         0       0       0
  2913 ;;      Locals:         0       1       0
  2914 ;;      Temps:          0       2       0
  2915 ;;      Totals:         0       3       0
  2916 ;;Total ram usage:        3 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    5
  2919 ;; This function calls:
  2920 ;;		_internal_E2Write
  2921 ;; This function is called by:
  2922 ;;		_Motor_Driver
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           psect	text953
  2926                           	file	"internal_e2prom.c"
  2927                           	line	84
  2928                           	global	__size_of_e2SavePara
  2929  0013                     	__size_of_e2SavePara	equ	__end_of_e2SavePara-_e2SavePara
  2930                           	
  2931  05FD                     _e2SavePara:	
  2932                           	opt	stack 8
  2933                           ; Regs used in _e2SavePara: [wreg+fsr1l-status,0+pclath+cstack]
  2934                           ;e2SavePara@val stored from wreg
  2935  05FD  0020               	movlb 0	; select bank0
  2936  05FE  00CD               	movwf	(e2SavePara@val)
  2937                           	line	85
  2938                           	
  2939  05FF                     l19373:	
  2940                           ;internal_e2prom.c: 85: gE2promState.systemState = val;
  2941  05FF  084D               	movf	(e2SavePara@val),w
  2942  0600  00CB               	movwf	(??_e2SavePara+0)+0
  2943  0601  084B               	movf	(??_e2SavePara+0)+0,w
  2944  0602  00C4               	movwf	0+(_gE2promState)+01h
  2945                           	line	86
  2946                           	
  2947  0603                     l19375:	
  2948                           ;internal_e2prom.c: 86: internal_E2Write(0,(uint8_t *)&gE2promState,sizeof(gE2promState)
                                 );
  2949  0603  3043               	movlw	(_gE2promState)&0ffh
  2950  0604  00CB               	movwf	(??_e2SavePara+0)+0
  2951  0605  084B               	movf	(??_e2SavePara+0)+0,w
  2952  0606  00C6               	movwf	(?_internal_E2Write)
  2953  0607  3003               	movlw	(03h)
  2954  0608  00CC               	movwf	(??_e2SavePara+1)+0
  2955  0609  084C               	movf	(??_e2SavePara+1)+0,w
  2956  060A  00C7               	movwf	0+(?_internal_E2Write)+01h
  2957  060B  3000               	movlw	(0)
  2958  060C  3184  2411  3185   	fcall	_internal_E2Write
  2959                           	line	87
  2960                           	
  2961  060F                     l15978:	
  2962  060F  0008               	return
  2963                           	opt stack 0
  2964                           GLOBAL	__end_of_e2SavePara
  2965  0610                     	__end_of_e2SavePara:
  2966 ;; =============== function _e2SavePara ends ============
  2967                           
  2968                           	signat	_e2SavePara,4216
  2969                           	global	_PowerSwitch_Enable
  2970                           psect	text954,local,class=CODE,delta=2
  2971                           global __ptext954
  2972  0610                     __ptext954:
  2973                           
  2974 ;; *************** function _PowerSwitch_Enable *****************
  2975 ;; Defined at:
  2976 ;;		line 22 in file "lowpower.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  tmp             1    3[BANK0 ] unsigned char 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;		None               void
  2983 ;; Registers used:
  2984 ;;		wreg, status,2, status,0, pclath, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMMON   BANK0   BANK1
  2990 ;;      Params:         0       0       0
  2991 ;;      Locals:         0       1       0
  2992 ;;      Temps:          0       1       0
  2993 ;;      Totals:         0       2       0
  2994 ;;Total ram usage:        2 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    5
  2997 ;; This function calls:
  2998 ;;		_PowerSwitch_Delay
  2999 ;; This function is called by:
  3000 ;;		_ContrlSignal_Driver
  3001 ;;		_PowerSwitch_WaitReady
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           psect	text954
  3005                           	file	"lowpower.c"
  3006                           	line	22
  3007                           	global	__size_of_PowerSwitch_Enable
  3008  0011                     	__size_of_PowerSwitch_Enable	equ	__end_of_PowerSwitch_Enable-_PowerSwitch_Enable
  3009                           	
  3010  0610                     _PowerSwitch_Enable:	
  3011                           	opt	stack 8
  3012                           ; Regs used in _PowerSwitch_Enable: [wreg+status,2+status,0+pclath+cstack]
  3013                           	line	23
  3014                           	
  3015  0610                     l19363:	
  3016                           ;lowpower.c: 23: uint8_t tmp = 0;
  3017  0610  0020               	movlb 0	; select bank0
  3018  0611  01C9               	clrf	(PowerSwitch_Enable@tmp)
  3019                           	line	24
  3020                           	
  3021  0612                     l19365:	
  3022                           ;lowpower.c: 24: PowerSwitch_Delay();
  3023  0612  3185  257C  3186   	fcall	_PowerSwitch_Delay
  3024                           	line	25
  3025                           	
  3026  0615                     l19367:	
  3027                           ;lowpower.c: 25: tmp = PORTC;
  3028  0615  0020               	movlb 0	; select bank0
  3029  0616  080E               	movf	(14),w	;volatile
  3030  0617  00C8               	movwf	(??_PowerSwitch_Enable+0)+0
  3031  0618  0848               	movf	(??_PowerSwitch_Enable+0)+0,w
  3032  0619  00C9               	movwf	(PowerSwitch_Enable@tmp)
  3033                           	line	26
  3034                           	
  3035  061A                     l19369:	
  3036                           ;lowpower.c: 26: tmp &= ~(0x01 << 3);
  3037  061A  30F7               	movlw	(0F7h)
  3038  061B  00C8               	movwf	(??_PowerSwitch_Enable+0)+0
  3039  061C  0848               	movf	(??_PowerSwitch_Enable+0)+0,w
  3040  061D  05C9               	andwf	(PowerSwitch_Enable@tmp),f
  3041                           	line	27
  3042                           	
  3043  061E                     l19371:	
  3044                           ;lowpower.c: 27: PORTC = tmp;
  3045  061E  0849               	movf	(PowerSwitch_Enable@tmp),w
  3046  061F  008E               	movwf	(14)	;volatile
  3047                           	line	28
  3048                           	
  3049  0620                     l14633:	
  3050  0620  0008               	return
  3051                           	opt stack 0
  3052                           GLOBAL	__end_of_PowerSwitch_Enable
  3053  0621                     	__end_of_PowerSwitch_Enable:
  3054 ;; =============== function _PowerSwitch_Enable ends ============
  3055                           
  3056                           	signat	_PowerSwitch_Enable,88
  3057                           	global	_PIC_ConfigClock32Khz
  3058                           psect	text955,local,class=CODE,delta=2
  3059                           global __ptext955
  3060  0693                     __ptext955:
  3061                           
  3062 ;; *************** function _PIC_ConfigClock32Khz *****************
  3063 ;; Defined at:
  3064 ;;		line 56 in file "system_init.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;		None               void
  3071 ;; Registers used:
  3072 ;;		wreg, status,2, status,0
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMMON   BANK0   BANK1
  3078 ;;      Params:         0       0       0
  3079 ;;      Locals:         0       0       0
  3080 ;;      Temps:          0       1       0
  3081 ;;      Totals:         0       1       0
  3082 ;;Total ram usage:        1 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    4
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_main
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           psect	text955
  3092                           	file	"system_init.c"
  3093                           	line	56
  3094                           	global	__size_of_PIC_ConfigClock32Khz
  3095  000D                     	__size_of_PIC_ConfigClock32Khz	equ	__end_of_PIC_ConfigClock32Khz-_PIC_ConfigClock32Khz
  3096                           	
  3097  0693                     _PIC_ConfigClock32Khz:	
  3098                           	opt	stack 11
  3099                           ; Regs used in _PIC_ConfigClock32Khz: [wreg+status,2+status,0]
  3100                           	line	57
  3101                           	
  3102  0693                     l19351:	
  3103                           ;system_init.c: 57: OSCCON &= ~(0x0f << 3);
  3104  0693  3087               	movlw	(087h)
  3105  0694  0020               	movlb 0	; select bank0
  3106  0695  00C6               	movwf	(??_PIC_ConfigClock32Khz+0)+0
  3107  0696  0846               	movf	(??_PIC_ConfigClock32Khz+0)+0,w
  3108  0697  0021               	movlb 1	; select bank1
  3109  0698  0599               	andwf	(153)^080h,f	;volatile
  3110                           	line	58
  3111                           	
  3112  0699                     l19353:	
  3113                           ;system_init.c: 58: _nop();
  3114  0699  0000               	nop
  3115                           	line	59
  3116                           	
  3117  069A                     l19355:	
  3118                           ;system_init.c: 59: _nop();
  3119  069A  0000               	nop
  3120                           	line	60
  3121                           	
  3122  069B                     l19357:	
  3123                           ;system_init.c: 60: OSCCON |= (0x00 << 3);
  3124  069B  0021               	movlb 1	; select bank1
  3125  069C  0819               	movf	(153)^080h,w	;volatile
  3126                           	line	61
  3127                           	
  3128  069D                     l19359:	
  3129                           ;system_init.c: 61: _nop();
  3130  069D  0000               	nop
  3131                           	line	62
  3132                           	
  3133  069E                     l19361:	
  3134                           ;system_init.c: 62: _nop();
  3135  069E  0000               	nop
  3136                           	line	63
  3137                           	
  3138  069F                     l9352:	
  3139  069F  0008               	return
  3140                           	opt stack 0
  3141                           GLOBAL	__end_of_PIC_ConfigClock32Khz
  3142  06A0                     	__end_of_PIC_ConfigClock32Khz:
  3143 ;; =============== function _PIC_ConfigClock32Khz ends ============
  3144                           
  3145                           	signat	_PIC_ConfigClock32Khz,88
  3146                           	global	_KeyDriver
  3147                           psect	text956,local,class=CODE,delta=2
  3148                           global __ptext956
  3149  052D                     __ptext956:
  3150                           
  3151 ;; *************** function _KeyDriver *****************
  3152 ;; Defined at:
  3153 ;;		line 17 in file "keyboard.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;		None
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;		None
  3158 ;; Return value:  Size  Location     Type
  3159 ;;		None               void
  3160 ;; Registers used:
  3161 ;;		wreg, status,2, status,0, pclath, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMMON   BANK0   BANK1
  3167 ;;      Params:         0       0       0
  3168 ;;      Locals:         0       0       0
  3169 ;;      Temps:          0       1       0
  3170 ;;      Totals:         0       1       0
  3171 ;;Total ram usage:        1 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    5
  3174 ;; This function calls:
  3175 ;;		_KeyAction
  3176 ;; This function is called by:
  3177 ;;		_main
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           psect	text956
  3181                           	file	"keyboard.c"
  3182                           	line	17
  3183                           	global	__size_of_KeyDriver
  3184  001D                     	__size_of_KeyDriver	equ	__end_of_KeyDriver-_KeyDriver
  3185                           	
  3186  052D                     _KeyDriver:	
  3187                           	opt	stack 10
  3188                           ; Regs used in _KeyDriver: [wreg+status,2+status,0+pclath+cstack]
  3189                           	line	20
  3190                           	
  3191  052D                     l19341:	
  3192                           ;keyboard.c: 18: static unsigned char backup = 1;
  3193                           ;keyboard.c: 20: if(backup != KeySta)
  3194  052D  0020               	movlb 0	; select bank0
  3195  052E  0857               	movf	(KeyDriver@backup),w
  3196  052F  0659               	xorwf	(_KeySta),w
  3197  0530  1903               	skipnz
  3198  0531  2D33               	goto	u3211
  3199  0532  2D34               	goto	u3210
  3200  0533                     u3211:
  3201  0533  2D49               	goto	l8028
  3202  0534                     u3210:
  3203                           	line	22
  3204                           	
  3205  0534                     l19343:	
  3206                           ;keyboard.c: 21: {
  3207                           ;keyboard.c: 22: if(KeySta == 0x00)
  3208  0534  08D9               	movf	(_KeySta),f
  3209  0535  1D03               	skipz
  3210  0536  2D38               	goto	u3221
  3211  0537  2D39               	goto	u3220
  3212  0538                     u3221:
  3213  0538  2D3E               	goto	l19347
  3214  0539                     u3220:
  3215                           	line	24
  3216                           	
  3217  0539                     l19345:	
  3218                           ;keyboard.c: 23: {
  3219                           ;keyboard.c: 24: KeyAction(0x00);
  3220  0539  3000               	movlw	(0)
  3221  053A  3185  25BF  3185   	fcall	_KeyAction
  3222                           	line	25
  3223                           ;keyboard.c: 25: }
  3224  053D  2D43               	goto	l19349
  3225                           	line	26
  3226                           	
  3227  053E                     l8026:	
  3228                           	line	28
  3229                           	
  3230  053E                     l19347:	
  3231                           ;keyboard.c: 26: else
  3232                           ;keyboard.c: 27: {
  3233                           ;keyboard.c: 28: KeyAction(0x01);
  3234  053E  3001               	movlw	(01h)
  3235  053F  3185  25BF  3185   	fcall	_KeyAction
  3236  0542  2D43               	goto	l19349
  3237                           	line	29
  3238                           	
  3239  0543                     l8027:	
  3240                           	line	30
  3241                           	
  3242  0543                     l19349:	
  3243                           ;keyboard.c: 29: }
  3244                           ;keyboard.c: 30: backup = KeySta;
  3245  0543  0020               	movlb 0	; select bank0
  3246  0544  0859               	movf	(_KeySta),w
  3247  0545  00C7               	movwf	(??_KeyDriver+0)+0
  3248  0546  0847               	movf	(??_KeyDriver+0)+0,w
  3249  0547  00D7               	movwf	(KeyDriver@backup)
  3250  0548  2D49               	goto	l8028
  3251                           	line	31
  3252                           	
  3253  0549                     l8025:	
  3254                           	line	32
  3255                           	
  3256  0549                     l8028:	
  3257  0549  0008               	return
  3258                           	opt stack 0
  3259                           GLOBAL	__end_of_KeyDriver
  3260  054A                     	__end_of_KeyDriver:
  3261 ;; =============== function _KeyDriver ends ============
  3262                           
  3263                           	signat	_KeyDriver,88
  3264                           	global	_internal_E2promInit
  3265                           psect	text957,local,class=CODE,delta=2
  3266                           global __ptext957
  3267  04E0                     __ptext957:
  3268                           
  3269 ;; *************** function _internal_E2promInit *****************
  3270 ;; Defined at:
  3271 ;;		line 13 in file "internal_e2prom.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  addr            1    7[BANK0 ] unsigned char 
  3276 ;; Return value:  Size  Location     Type
  3277 ;;		None               void
  3278 ;; Registers used:
  3279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMMON   BANK0   BANK1
  3285 ;;      Params:         0       0       0
  3286 ;;      Locals:         0       1       0
  3287 ;;      Temps:          0       2       0
  3288 ;;      Totals:         0       3       0
  3289 ;;Total ram usage:        3 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; Hardware stack levels required when called:    5
  3292 ;; This function calls:
  3293 ;;		_internal_E2Read
  3294 ;;		_internal_E2Write
  3295 ;; This function is called by:
  3296 ;;		_main
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           psect	text957
  3300                           	file	"internal_e2prom.c"
  3301                           	line	13
  3302                           	global	__size_of_internal_E2promInit
  3303  002B                     	__size_of_internal_E2promInit	equ	__end_of_internal_E2promInit-_internal_E2promInit
  3304                           	
  3305  04E0                     _internal_E2promInit:	
  3306                           	opt	stack 10
  3307                           ; Regs used in _internal_E2promInit: [wreg+fsr1l-status,0+pclath+cstack]
  3308                           	line	14
  3309                           	
  3310  04E0                     l19327:	
  3311                           ;internal_e2prom.c: 14: uint8_t addr = 0;
  3312  04E0  0020               	movlb 0	; select bank0
  3313  04E1  01CD               	clrf	(internal_E2promInit@addr)
  3314                           	line	15
  3315                           	
  3316  04E2                     l19329:	
  3317                           ;internal_e2prom.c: 15: EECON1 = 0;
  3318  04E2  0023               	movlb 3	; select bank3
  3319  04E3  0195               	clrf	(405)^0180h	;volatile
  3320                           	line	18
  3321                           	
  3322  04E4                     l19331:	
  3323                           ;internal_e2prom.c: 18: internal_E2Read(0,(uint8_t *)&gE2promState,sizeof(gE2promState))
                                 ;
  3324  04E4  3043               	movlw	(_gE2promState)&0ffh
  3325  04E5  0020               	movlb 0	; select bank0
  3326  04E6  00CB               	movwf	(??_internal_E2promInit+0)+0
  3327  04E7  084B               	movf	(??_internal_E2promInit+0)+0,w
  3328  04E8  00C6               	movwf	(?_internal_E2Read)
  3329  04E9  3003               	movlw	(03h)
  3330  04EA  00CC               	movwf	(??_internal_E2promInit+1)+0
  3331  04EB  084C               	movf	(??_internal_E2promInit+1)+0,w
  3332  04EC  00C7               	movwf	0+(?_internal_E2Read)+01h
  3333  04ED  3000               	movlw	(0)
  3334  04EE  3184  244D  3184   	fcall	_internal_E2Read
  3335                           	line	19
  3336                           	
  3337  04F1                     l19333:	
  3338                           ;internal_e2prom.c: 19: if(gE2promState.version != 0xab)
  3339  04F1  0020               	movlb 0	; select bank0
  3340  04F2  0843               	movf	(_gE2promState),w
  3341  04F3  3AAB               	xorlw	0ABh&0ffh
  3342  04F4  1903               	skipnz
  3343  04F5  2CF7               	goto	u3201
  3344  04F6  2CF8               	goto	u3200
  3345  04F7                     u3201:
  3346  04F7  2D0A               	goto	l15951
  3347  04F8                     u3200:
  3348                           	line	21
  3349                           	
  3350  04F8                     l19335:	
  3351                           ;internal_e2prom.c: 20: {
  3352                           ;internal_e2prom.c: 21: gE2promState.systemState = eE2State_Default;
  3353  04F8  01C4               	clrf	0+(_gE2promState)+01h
  3354                           	line	22
  3355                           	
  3356  04F9                     l19337:	
  3357                           ;internal_e2prom.c: 22: gE2promState.version = 0xab;
  3358  04F9  30AB               	movlw	(0ABh)
  3359  04FA  00CB               	movwf	(??_internal_E2promInit+0)+0
  3360  04FB  084B               	movf	(??_internal_E2promInit+0)+0,w
  3361  04FC  00C3               	movwf	(_gE2promState)
  3362                           	line	23
  3363                           	
  3364  04FD                     l19339:	
  3365                           ;internal_e2prom.c: 23: internal_E2Write(0,(uint8_t *)&gE2promState,sizeof(gE2promState)
                                 );
  3366  04FD  3043               	movlw	(_gE2promState)&0ffh
  3367  04FE  00CB               	movwf	(??_internal_E2promInit+0)+0
  3368  04FF  084B               	movf	(??_internal_E2promInit+0)+0,w
  3369  0500  00C6               	movwf	(?_internal_E2Write)
  3370  0501  3003               	movlw	(03h)
  3371  0502  00CC               	movwf	(??_internal_E2promInit+1)+0
  3372  0503  084C               	movf	(??_internal_E2promInit+1)+0,w
  3373  0504  00C7               	movwf	0+(?_internal_E2Write)+01h
  3374  0505  3000               	movlw	(0)
  3375  0506  3184  2411  3184   	fcall	_internal_E2Write
  3376  0509  2D0A               	goto	l15951
  3377                           	line	24
  3378                           	
  3379  050A                     l15950:	
  3380                           	line	36
  3381                           	
  3382  050A                     l15951:	
  3383  050A  0008               	return
  3384                           	opt stack 0
  3385                           GLOBAL	__end_of_internal_E2promInit
  3386  050B                     	__end_of_internal_E2promInit:
  3387 ;; =============== function _internal_E2promInit ends ============
  3388                           
  3389                           	signat	_internal_E2promInit,88
  3390                           	global	_ADC_Init
  3391                           psect	text958,local,class=CODE,delta=2
  3392                           global __ptext958
  3393  05E9                     __ptext958:
  3394                           
  3395 ;; *************** function _ADC_Init *****************
  3396 ;; Defined at:
  3397 ;;		line 25 in file "adc.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;		None
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;		None               void
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, pclath, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMMON   BANK0   BANK1
  3411 ;;      Params:         0       0       0
  3412 ;;      Locals:         0       0       0
  3413 ;;      Temps:          0       1       0
  3414 ;;      Totals:         0       1       0
  3415 ;;Total ram usage:        1 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    5
  3418 ;; This function calls:
  3419 ;;		_ADC_AllPin_Init
  3420 ;; This function is called by:
  3421 ;;		_main
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           psect	text958
  3425                           	file	"adc.c"
  3426                           	line	25
  3427                           	global	__size_of_ADC_Init
  3428  0014                     	__size_of_ADC_Init	equ	__end_of_ADC_Init-_ADC_Init
  3429                           	
  3430  05E9                     _ADC_Init:	
  3431                           	opt	stack 10
  3432                           ; Regs used in _ADC_Init: [wreg+status,2+status,0+pclath+cstack]
  3433                           	line	26
  3434                           	
  3435  05E9                     l19315:	
  3436                           ;adc.c: 26: ADC_AllPin_Init();
  3437  05E9  3186  26D3  3185   	fcall	_ADC_AllPin_Init
  3438                           	line	28
  3439                           	
  3440  05EC                     l19317:	
  3441                           ;adc.c: 28: ADCON1 |= (0x01 << 7);
  3442  05EC  0021               	movlb 1	; select bank1
  3443  05ED  179E               	bsf	(158)^080h+(7/8),(7)&7	;volatile
  3444                           	line	29
  3445                           	
  3446  05EE                     l19319:	
  3447                           ;adc.c: 29: ADCON1 &= ~(0x07 << 4);
  3448  05EE  308F               	movlw	(08Fh)
  3449  05EF  0020               	movlb 0	; select bank0
  3450  05F0  00C7               	movwf	(??_ADC_Init+0)+0
  3451  05F1  0847               	movf	(??_ADC_Init+0)+0,w
  3452  05F2  0021               	movlb 1	; select bank1
  3453  05F3  059E               	andwf	(158)^080h,f	;volatile
  3454                           	line	31
  3455                           	
  3456  05F4                     l19321:	
  3457                           ;adc.c: 31: ADCON1 |= (0x00 << 4);
  3458  05F4  081E               	movf	(158)^080h,w	;volatile
  3459                           	line	32
  3460                           	
  3461  05F5                     l19323:	
  3462                           ;adc.c: 32: ADCON1 &= ~(0x03 << 0);
  3463  05F5  30FC               	movlw	(0FCh)
  3464  05F6  0020               	movlb 0	; select bank0
  3465  05F7  00C7               	movwf	(??_ADC_Init+0)+0
  3466  05F8  0847               	movf	(??_ADC_Init+0)+0,w
  3467  05F9  0021               	movlb 1	; select bank1
  3468  05FA  059E               	andwf	(158)^080h,f	;volatile
  3469                           	line	34
  3470                           	
  3471  05FB                     l19325:	
  3472                           ;adc.c: 34: ADCON0 |= 0x01;
  3473  05FB  141D               	bsf	(157)^080h+(0/8),(0)&7	;volatile
  3474                           	line	35
  3475                           	
  3476  05FC                     l13316:	
  3477  05FC  0008               	return
  3478                           	opt stack 0
  3479                           GLOBAL	__end_of_ADC_Init
  3480  05FD                     	__end_of_ADC_Init:
  3481 ;; =============== function _ADC_Init ends ============
  3482                           
  3483                           	signat	_ADC_Init,88
  3484                           	global	_internal_E2Write
  3485                           psect	text959,local,class=CODE,delta=2
  3486                           global __ptext959
  3487  0411                     __ptext959:
  3488                           
  3489 ;; *************** function _internal_E2Write *****************
  3490 ;; Defined at:
  3491 ;;		line 58 in file "internal_e2prom.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  addr            1    wreg     unsigned char 
  3494 ;;  dat             1    0[BANK0 ] PTR unsigned char 
  3495 ;;		 -> gE2promState(3), 
  3496 ;;  len             1    1[BANK0 ] unsigned char 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  addr            1    4[BANK0 ] unsigned char 
  3499 ;;  reg             1    3[BANK0 ] unsigned char 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;		None               void
  3502 ;; Registers used:
  3503 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMMON   BANK0   BANK1
  3509 ;;      Params:         0       2       0
  3510 ;;      Locals:         0       2       0
  3511 ;;      Temps:          0       1       0
  3512 ;;      Totals:         0       5       0
  3513 ;;Total ram usage:        5 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    4
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_internal_E2promInit
  3520 ;;		_e2SavePara
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           psect	text959
  3524                           	file	"internal_e2prom.c"
  3525                           	line	58
  3526                           	global	__size_of_internal_E2Write
  3527  003C                     	__size_of_internal_E2Write	equ	__end_of_internal_E2Write-_internal_E2Write
  3528                           	
  3529  0411                     _internal_E2Write:	
  3530                           	opt	stack 8
  3531                           ; Regs used in _internal_E2Write: [wreg+fsr1l-status,0]
  3532                           ;internal_E2Write@addr stored from wreg
  3533  0411  0020               	movlb 0	; select bank0
  3534  0412  00CA               	movwf	(internal_E2Write@addr)
  3535                           	line	59
  3536                           	
  3537  0413                     l19293:	
  3538                           ;internal_e2prom.c: 59: uint8_t reg = 0;
  3539  0413  01C9               	clrf	(internal_E2Write@reg)
  3540                           	line	60
  3541                           	
  3542  0414                     l19295:	
  3543                           ;internal_e2prom.c: 60: INTCON &= ~(0x01 << 7);
  3544  0414  307F               	movlw	(07Fh)
  3545  0415  00C8               	movwf	(??_internal_E2Write+0)+0
  3546  0416  0848               	movf	(??_internal_E2Write+0)+0,w
  3547  0417  058B               	andwf	(11),f	;volatile
  3548                           	line	61
  3549                           ;internal_e2prom.c: 61: while(len --)
  3550  0418  2C42               	goto	l19313
  3551                           	
  3552  0419                     l15967:	
  3553                           	line	63
  3554                           ;internal_e2prom.c: 62: {
  3555                           ;internal_e2prom.c: 63: while(WR == 1);
  3556  0419  2C1A               	goto	l15968
  3557                           	
  3558  041A                     l15969:	
  3559                           	
  3560  041A                     l15968:	
  3561  041A  0023               	movlb 3	; select bank3
  3562  041B  1895               	btfsc	(3241/8)^0180h,(3241)&7
  3563  041C  2C1E               	goto	u3171
  3564  041D  2C1F               	goto	u3170
  3565  041E                     u3171:
  3566  041E  2C1A               	goto	l15968
  3567  041F                     u3170:
  3568  041F  2C20               	goto	l19297
  3569                           	
  3570  0420                     l15970:	
  3571                           	line	65
  3572                           	
  3573  0420                     l19297:	
  3574                           ;internal_e2prom.c: 65: EEADRL = addr++;
  3575  0420  0020               	movlb 0	; select bank0
  3576  0421  084A               	movf	(internal_E2Write@addr),w
  3577  0422  0023               	movlb 3	; select bank3
  3578  0423  0091               	movwf	(401)^0180h	;volatile
  3579                           	
  3580  0424                     l19299:	
  3581  0424  3001               	movlw	(01h)
  3582  0425  0020               	movlb 0	; select bank0
  3583  0426  00C8               	movwf	(??_internal_E2Write+0)+0
  3584  0427  0848               	movf	(??_internal_E2Write+0)+0,w
  3585  0428  07CA               	addwf	(internal_E2Write@addr),f
  3586                           	line	66
  3587                           	
  3588  0429                     l19301:	
  3589                           ;internal_e2prom.c: 66: EEDATL = *dat++;
  3590  0429  0846               	movf	(internal_E2Write@dat),w
  3591  042A  0086               	movwf	fsr1l
  3592  042B  0187               	clrf fsr1h	
  3593                           	
  3594  042C  0801               	movf	indf1,w
  3595  042D  0023               	movlb 3	; select bank3
  3596  042E  0093               	movwf	(403)^0180h	;volatile
  3597                           	
  3598  042F                     l19303:	
  3599  042F  3001               	movlw	(01h)
  3600  0430  0020               	movlb 0	; select bank0
  3601  0431  00C8               	movwf	(??_internal_E2Write+0)+0
  3602  0432  0848               	movf	(??_internal_E2Write+0)+0,w
  3603  0433  07C6               	addwf	(internal_E2Write@dat),f
  3604                           	line	68
  3605                           	
  3606  0434                     l19305:	
  3607                           ;internal_e2prom.c: 68: WREN = 1;
  3608  0434  0023               	movlb 3	; select bank3
  3609  0435  1515               	bsf	(3242/8)^0180h,(3242)&7
  3610                           	line	69
  3611                           	
  3612  0436                     l19307:	
  3613                           ;internal_e2prom.c: 69: EECON2 = 0x55;
  3614  0436  3055               	movlw	(055h)
  3615  0437  0096               	movwf	(406)^0180h	;volatile
  3616                           	line	70
  3617                           	
  3618  0438                     l19309:	
  3619                           ;internal_e2prom.c: 70: EECON2 = 0xAA;
  3620  0438  30AA               	movlw	(0AAh)
  3621  0439  0096               	movwf	(406)^0180h	;volatile
  3622                           	line	72
  3623                           	
  3624  043A                     l19311:	
  3625                           ;internal_e2prom.c: 72: WR = 1;
  3626  043A  1495               	bsf	(3241/8)^0180h,(3241)&7
  3627                           	line	73
  3628                           ;internal_e2prom.c: 73: while(WR==1);
  3629  043B  2C3C               	goto	l15971
  3630                           	
  3631  043C                     l15972:	
  3632                           	
  3633  043C                     l15971:	
  3634  043C  1895               	btfsc	(3241/8)^0180h,(3241)&7
  3635  043D  2C3F               	goto	u3181
  3636  043E  2C40               	goto	u3180
  3637  043F                     u3181:
  3638  043F  2C3C               	goto	l15971
  3639  0440                     u3180:
  3640                           	
  3641  0440                     l15973:	
  3642                           	line	74
  3643                           ;internal_e2prom.c: 74: WREN = 0;
  3644  0440  1115               	bcf	(3242/8)^0180h,(3242)&7
  3645  0441  2C42               	goto	l19313
  3646                           	line	78
  3647                           	
  3648  0442                     l15966:	
  3649                           	line	61
  3650                           	
  3651  0442                     l19313:	
  3652  0442  3001               	movlw	low(01h)
  3653  0443  0020               	movlb 0	; select bank0
  3654  0444  02C7               	subwf	(internal_E2Write@len),f
  3655  0445  0847               	movf	((internal_E2Write@len)),w
  3656  0446  3AFF               	xorlw	0FFh&0ffh
  3657  0447  1D03               	skipz
  3658  0448  2C4A               	goto	u3191
  3659  0449  2C4B               	goto	u3190
  3660  044A                     u3191:
  3661  044A  2C1A               	goto	l15968
  3662  044B                     u3190:
  3663                           	
  3664  044B                     l15974:	
  3665                           	line	79
  3666                           ;internal_e2prom.c: 78: }
  3667                           ;internal_e2prom.c: 79: INTCON |= (0x01 << 7);
  3668  044B  178B               	bsf	(11)+(7/8),(7)&7	;volatile
  3669                           	line	81
  3670                           	
  3671  044C                     l15975:	
  3672  044C  0008               	return
  3673                           	opt stack 0
  3674                           GLOBAL	__end_of_internal_E2Write
  3675  044D                     	__end_of_internal_E2Write:
  3676 ;; =============== function _internal_E2Write ends ============
  3677                           
  3678                           	signat	_internal_E2Write,12408
  3679                           	global	_internal_E2Read
  3680                           psect	text960,local,class=CODE,delta=2
  3681                           global __ptext960
  3682  044D                     __ptext960:
  3683                           
  3684 ;; *************** function _internal_E2Read *****************
  3685 ;; Defined at:
  3686 ;;		line 40 in file "internal_e2prom.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  addr            1    wreg     unsigned char 
  3689 ;;  dat             1    0[BANK0 ] PTR unsigned char 
  3690 ;;		 -> gE2promState(3), 
  3691 ;;  len             1    1[BANK0 ] unsigned char 
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;  addr            1    3[BANK0 ] unsigned char 
  3694 ;; Return value:  Size  Location     Type
  3695 ;;		None               void
  3696 ;; Registers used:
  3697 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMMON   BANK0   BANK1
  3703 ;;      Params:         0       2       0
  3704 ;;      Locals:         0       1       0
  3705 ;;      Temps:          0       1       0
  3706 ;;      Totals:         0       4       0
  3707 ;;Total ram usage:        4 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; Hardware stack levels required when called:    4
  3710 ;; This function calls:
  3711 ;;		Nothing
  3712 ;; This function is called by:
  3713 ;;		_internal_E2promInit
  3714 ;; This function uses a non-reentrant model
  3715 ;;
  3716                           psect	text960
  3717                           	file	"internal_e2prom.c"
  3718                           	line	40
  3719                           	global	__size_of_internal_E2Read
  3720  0034                     	__size_of_internal_E2Read	equ	__end_of_internal_E2Read-_internal_E2Read
  3721                           	
  3722  044D                     _internal_E2Read:	
  3723                           	opt	stack 10
  3724                           ; Regs used in _internal_E2Read: [wreg+fsr1l-status,0]
  3725                           ;internal_E2Read@addr stored from wreg
  3726  044D  0020               	movlb 0	; select bank0
  3727  044E  00C9               	movwf	(internal_E2Read@addr)
  3728                           	line	41
  3729                           	
  3730  044F                     l19277:	
  3731                           ;internal_e2prom.c: 41: while(len --)
  3732  044F  2C77               	goto	l19291
  3733                           	
  3734  0450                     l15955:	
  3735                           	line	43
  3736                           ;internal_e2prom.c: 42: {
  3737                           ;internal_e2prom.c: 43: while(RD == 1);
  3738  0450  2C51               	goto	l15956
  3739                           	
  3740  0451                     l15957:	
  3741                           	
  3742  0451                     l15956:	
  3743  0451  0023               	movlb 3	; select bank3
  3744  0452  1815               	btfsc	(3240/8)^0180h,(3240)&7
  3745  0453  2C55               	goto	u3141
  3746  0454  2C56               	goto	u3140
  3747  0455                     u3141:
  3748  0455  2C51               	goto	l15956
  3749  0456                     u3140:
  3750  0456  2C57               	goto	l19279
  3751                           	
  3752  0457                     l15958:	
  3753                           	line	45
  3754                           	
  3755  0457                     l19279:	
  3756                           ;internal_e2prom.c: 45: EEADRL = addr++;
  3757  0457  0020               	movlb 0	; select bank0
  3758  0458  0849               	movf	(internal_E2Read@addr),w
  3759  0459  0023               	movlb 3	; select bank3
  3760  045A  0091               	movwf	(401)^0180h	;volatile
  3761  045B  3001               	movlw	(01h)
  3762  045C  0020               	movlb 0	; select bank0
  3763  045D  00C8               	movwf	(??_internal_E2Read+0)+0
  3764  045E  0848               	movf	(??_internal_E2Read+0)+0,w
  3765  045F  07C9               	addwf	(internal_E2Read@addr),f
  3766                           	line	46
  3767                           	
  3768  0460                     l19281:	
  3769                           ;internal_e2prom.c: 46: EEPGD = 0;
  3770  0460  0023               	movlb 3	; select bank3
  3771  0461  1395               	bcf	(3247/8)^0180h,(3247)&7
  3772                           	line	47
  3773                           	
  3774  0462                     l19283:	
  3775                           ;internal_e2prom.c: 47: CFGS = 0;
  3776  0462  1315               	bcf	(3246/8)^0180h,(3246)&7
  3777                           	line	48
  3778                           	
  3779  0463                     l19285:	
  3780                           ;internal_e2prom.c: 48: RD = 1;
  3781  0463  1415               	bsf	(3240/8)^0180h,(3240)&7
  3782                           	line	49
  3783                           ;internal_e2prom.c: 49: while(RD==1);
  3784  0464  2C65               	goto	l15959
  3785                           	
  3786  0465                     l15960:	
  3787                           	
  3788  0465                     l15959:	
  3789  0465  1815               	btfsc	(3240/8)^0180h,(3240)&7
  3790  0466  2C68               	goto	u3151
  3791  0467  2C69               	goto	u3150
  3792  0468                     u3151:
  3793  0468  2C65               	goto	l15959
  3794  0469                     u3150:
  3795  0469  2C6A               	goto	l19287
  3796                           	
  3797  046A                     l15961:	
  3798                           	line	52
  3799                           	
  3800  046A                     l19287:	
  3801                           ;internal_e2prom.c: 52: *dat++ = EEDATL;
  3802  046A  0813               	movf	(403)^0180h,w	;volatile
  3803  046B  0020               	movlb 0	; select bank0
  3804  046C  00C8               	movwf	(??_internal_E2Read+0)+0
  3805  046D  0846               	movf	(internal_E2Read@dat),w
  3806  046E  0086               	movwf	fsr1l
  3807  046F  0187               	clrf fsr1h	
  3808                           	
  3809  0470  0848               	movf	(??_internal_E2Read+0)+0,w
  3810  0471  0081               	movwf	indf1
  3811                           	
  3812  0472                     l19289:	
  3813  0472  3001               	movlw	(01h)
  3814  0473  00C8               	movwf	(??_internal_E2Read+0)+0
  3815  0474  0848               	movf	(??_internal_E2Read+0)+0,w
  3816  0475  07C6               	addwf	(internal_E2Read@dat),f
  3817  0476  2C77               	goto	l19291
  3818                           	line	53
  3819                           	
  3820  0477                     l15954:	
  3821                           	line	41
  3822                           	
  3823  0477                     l19291:	
  3824  0477  3001               	movlw	low(01h)
  3825  0478  02C7               	subwf	(internal_E2Read@len),f
  3826  0479  0847               	movf	((internal_E2Read@len)),w
  3827  047A  3AFF               	xorlw	0FFh&0ffh
  3828  047B  1D03               	skipz
  3829  047C  2C7E               	goto	u3161
  3830  047D  2C7F               	goto	u3160
  3831  047E                     u3161:
  3832  047E  2C51               	goto	l15956
  3833  047F                     u3160:
  3834  047F  2C80               	goto	l15963
  3835                           	
  3836  0480                     l15962:	
  3837                           	line	55
  3838                           	
  3839  0480                     l15963:	
  3840  0480  0008               	return
  3841                           	opt stack 0
  3842                           GLOBAL	__end_of_internal_E2Read
  3843  0481                     	__end_of_internal_E2Read:
  3844 ;; =============== function _internal_E2Read ends ============
  3845                           
  3846                           	signat	_internal_E2Read,12408
  3847                           	global	_PowerSwitch_Delay
  3848                           psect	text961,local,class=CODE,delta=2
  3849                           global __ptext961
  3850  057C                     __ptext961:
  3851                           
  3852 ;; *************** function _PowerSwitch_Delay *****************
  3853 ;; Defined at:
  3854 ;;		line 16 in file "lowpower.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;		None
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  delay           1    1[BANK0 ] unsigned char 
  3859 ;; Return value:  Size  Location     Type
  3860 ;;		None               void
  3861 ;; Registers used:
  3862 ;;		wreg, status,2, status,0
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMMON   BANK0   BANK1
  3868 ;;      Params:         0       0       0
  3869 ;;      Locals:         0       1       0
  3870 ;;      Temps:          0       1       0
  3871 ;;      Totals:         0       2       0
  3872 ;;Total ram usage:        2 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    4
  3875 ;; This function calls:
  3876 ;;		Nothing
  3877 ;; This function is called by:
  3878 ;;		_PowerSwitch_Enable
  3879 ;;		_PowerSwitch_Disable
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           psect	text961
  3883                           	file	"lowpower.c"
  3884                           	line	16
  3885                           	global	__size_of_PowerSwitch_Delay
  3886  0017                     	__size_of_PowerSwitch_Delay	equ	__end_of_PowerSwitch_Delay-_PowerSwitch_Delay
  3887                           	
  3888  057C                     _PowerSwitch_Delay:	
  3889                           	opt	stack 7
  3890                           ; Regs used in _PowerSwitch_Delay: [wreg+status,2+status,0]
  3891                           	line	17
  3892                           	
  3893  057C                     l19245:	
  3894                           ;lowpower.c: 17: uint8_t delay = 0;
  3895  057C  0020               	movlb 0	; select bank0
  3896  057D  01C7               	clrf	(PowerSwitch_Delay@delay)
  3897                           	line	18
  3898                           ;lowpower.c: 18: for(delay=0;delay<20;delay++);
  3899  057E  01C7               	clrf	(PowerSwitch_Delay@delay)
  3900                           	
  3901  057F                     l19247:	
  3902  057F  3014               	movlw	(014h)
  3903  0580  0247               	subwf	(PowerSwitch_Delay@delay),w
  3904  0581  1C03               	skipc
  3905  0582  2D84               	goto	u3101
  3906  0583  2D85               	goto	u3100
  3907  0584                     u3101:
  3908  0584  2D87               	goto	l19251
  3909  0585                     u3100:
  3910  0585  2D92               	goto	l14630
  3911                           	
  3912  0586                     l19249:	
  3913  0586  2D92               	goto	l14630
  3914                           	
  3915  0587                     l14628:	
  3916                           	
  3917  0587                     l19251:	
  3918  0587  3001               	movlw	(01h)
  3919  0588  00C6               	movwf	(??_PowerSwitch_Delay+0)+0
  3920  0589  0846               	movf	(??_PowerSwitch_Delay+0)+0,w
  3921  058A  07C7               	addwf	(PowerSwitch_Delay@delay),f
  3922                           	
  3923  058B                     l19253:	
  3924  058B  3014               	movlw	(014h)
  3925  058C  0247               	subwf	(PowerSwitch_Delay@delay),w
  3926  058D  1C03               	skipc
  3927  058E  2D90               	goto	u3111
  3928  058F  2D91               	goto	u3110
  3929  0590                     u3111:
  3930  0590  2D87               	goto	l19251
  3931  0591                     u3110:
  3932  0591  2D92               	goto	l14630
  3933                           	
  3934  0592                     l14629:	
  3935                           	line	19
  3936                           	
  3937  0592                     l14630:	
  3938  0592  0008               	return
  3939                           	opt stack 0
  3940                           GLOBAL	__end_of_PowerSwitch_Delay
  3941  0593                     	__end_of_PowerSwitch_Delay:
  3942 ;; =============== function _PowerSwitch_Delay ends ============
  3943                           
  3944                           	signat	_PowerSwitch_Delay,88
  3945                           	global	_ADC_AllPin_Init
  3946                           psect	text962,local,class=CODE,delta=2
  3947                           global __ptext962
  3948  06D3                     __ptext962:
  3949                           
  3950 ;; *************** function _ADC_AllPin_Init *****************
  3951 ;; Defined at:
  3952 ;;		line 5 in file "adc.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;		None
  3957 ;; Return value:  Size  Location     Type
  3958 ;;		None               void
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMMON   BANK0   BANK1
  3966 ;;      Params:         0       0       0
  3967 ;;      Locals:         0       0       0
  3968 ;;      Temps:          0       1       0
  3969 ;;      Totals:         0       1       0
  3970 ;;Total ram usage:        1 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    4
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		_ADC_Init
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           psect	text962
  3980                           	file	"adc.c"
  3981                           	line	5
  3982                           	global	__size_of_ADC_AllPin_Init
  3983  000B                     	__size_of_ADC_AllPin_Init	equ	__end_of_ADC_AllPin_Init-_ADC_AllPin_Init
  3984                           	
  3985  06D3                     _ADC_AllPin_Init:	
  3986                           	opt	stack 10
  3987                           ; Regs used in _ADC_AllPin_Init: [wreg+status,2+status,0]
  3988                           	line	13
  3989                           	
  3990  06D3                     l19241:	
  3991                           ;adc.c: 13: TRISC |= (0x01 << 0);
  3992  06D3  0021               	movlb 1	; select bank1
  3993  06D4  140E               	bsf	(142)^080h+(0/8),(0)&7	;volatile
  3994                           	line	14
  3995                           ;adc.c: 14: ANSELC |= (0x01 << 0);
  3996  06D5  0023               	movlb 3	; select bank3
  3997  06D6  140E               	bsf	(398)^0180h+(0/8),(0)&7	;volatile
  3998                           	line	15
  3999                           	
  4000  06D7                     l19243:	
  4001                           ;adc.c: 15: WPUC &= ~(0x01 << 0);
  4002  06D7  30FE               	movlw	(0FEh)
  4003  06D8  0020               	movlb 0	; select bank0
  4004  06D9  00C6               	movwf	(??_ADC_AllPin_Init+0)+0
  4005  06DA  0846               	movf	(??_ADC_AllPin_Init+0)+0,w
  4006  06DB  0024               	movlb 4	; select bank4
  4007  06DC  058E               	andwf	(526)^0200h,f	;volatile
  4008                           	line	22
  4009                           	
  4010  06DD                     l13313:	
  4011  06DD  0008               	return
  4012                           	opt stack 0
  4013                           GLOBAL	__end_of_ADC_AllPin_Init
  4014  06DE                     	__end_of_ADC_AllPin_Init:
  4015 ;; =============== function _ADC_AllPin_Init ends ============
  4016                           
  4017                           	signat	_ADC_AllPin_Init,88
  4018                           	global	_KeyAction
  4019                           psect	text963,local,class=CODE,delta=2
  4020                           global __ptext963
  4021  05BF                     __ptext963:
  4022                           
  4023 ;; *************** function _KeyAction *****************
  4024 ;; Defined at:
  4025 ;;		line 53 in file "keyboard.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  KeyCode         1    wreg     unsigned char 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  KeyCode         1    0[BANK0 ] unsigned char 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;		None               void
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMMON   BANK0   BANK1
  4039 ;;      Params:         0       0       0
  4040 ;;      Locals:         0       1       0
  4041 ;;      Temps:          0       0       0
  4042 ;;      Totals:         0       1       0
  4043 ;;Total ram usage:        1 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    4
  4046 ;; This function calls:
  4047 ;;		Nothing
  4048 ;; This function is called by:
  4049 ;;		_KeyDriver
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           psect	text963
  4053                           	file	"keyboard.c"
  4054                           	line	53
  4055                           	global	__size_of_KeyAction
  4056  0015                     	__size_of_KeyAction	equ	__end_of_KeyAction-_KeyAction
  4057                           	
  4058  05BF                     _KeyAction:	
  4059                           	opt	stack 10
  4060                           ; Regs used in _KeyAction: [wreg+status,2+status,0]
  4061                           ;KeyAction@KeyCode stored from wreg
  4062  05BF  0020               	movlb 0	; select bank0
  4063  05C0  00C6               	movwf	(KeyAction@KeyCode)
  4064                           	line	54
  4065                           	
  4066  05C1                     l19217:	
  4067                           ;keyboard.c: 54: if(KeyCode == 0x00)
  4068  05C1  08C6               	movf	(KeyAction@KeyCode),f
  4069  05C2  1D03               	skipz
  4070  05C3  2DC5               	goto	u3061
  4071  05C4  2DC6               	goto	u3060
  4072  05C5                     u3061:
  4073  05C5  2DCA               	goto	l19221
  4074  05C6                     u3060:
  4075                           	line	56
  4076                           	
  4077  05C6                     l19219:	
  4078                           ;keyboard.c: 55: {
  4079                           ;keyboard.c: 56: AutoOrManualMode = ManualMode;
  4080  05C6  01B9               	clrf	(_AutoOrManualMode)
  4081  05C7  1403               	bsf	status,0
  4082  05C8  0DB9               	rlf	(_AutoOrManualMode),f
  4083                           	line	57
  4084                           ;keyboard.c: 57: }
  4085  05C9  2DD3               	goto	l8042
  4086                           	line	58
  4087                           	
  4088  05CA                     l8039:	
  4089                           	
  4090  05CA                     l19221:	
  4091                           ;keyboard.c: 58: else if(KeyCode == 0x01)
  4092  05CA  0846               	movf	(KeyAction@KeyCode),w
  4093  05CB  3A01               	xorlw	01h&0ffh
  4094  05CC  1D03               	skipz
  4095  05CD  2DCF               	goto	u3071
  4096  05CE  2DD0               	goto	u3070
  4097  05CF                     u3071:
  4098  05CF  2DD3               	goto	l8042
  4099  05D0                     u3070:
  4100                           	line	60
  4101                           	
  4102  05D0                     l19223:	
  4103                           ;keyboard.c: 59: {
  4104                           ;keyboard.c: 60: AutoOrManualMode = AutoMode;
  4105  05D0  01B9               	clrf	(_AutoOrManualMode)
  4106  05D1  2DD3               	goto	l8042
  4107                           	line	61
  4108                           	
  4109  05D2                     l8041:	
  4110  05D2  2DD3               	goto	l8042
  4111                           	line	72
  4112                           	
  4113  05D3                     l8040:	
  4114                           	
  4115  05D3                     l8042:	
  4116  05D3  0008               	return
  4117                           	opt stack 0
  4118                           GLOBAL	__end_of_KeyAction
  4119  05D4                     	__end_of_KeyAction:
  4120 ;; =============== function _KeyAction ends ============
  4121                           
  4122                           	signat	_KeyAction,4216
  4123                           	global	_Motor_Clockwise
  4124                           psect	text964,local,class=CODE,delta=2
  4125                           global __ptext964
  4126  06A0                     __ptext964:
  4127                           
  4128 ;; *************** function _Motor_Clockwise *****************
  4129 ;; Defined at:
  4130 ;;		line 49 in file "motor.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;  tem             1    1[BANK0 ] unsigned char 
  4135 ;; Return value:  Size  Location     Type
  4136 ;;		None               void
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMMON   BANK0   BANK1
  4144 ;;      Params:         0       0       0
  4145 ;;      Locals:         0       1       0
  4146 ;;      Temps:          0       1       0
  4147 ;;      Totals:         0       2       0
  4148 ;;Total ram usage:        2 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    4
  4151 ;; This function calls:
  4152 ;;		Nothing
  4153 ;; This function is called by:
  4154 ;;		_ContrlSignal_Driver
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           psect	text964
  4158                           	file	"motor.c"
  4159                           	line	49
  4160                           	global	__size_of_Motor_Clockwise
  4161  000D                     	__size_of_Motor_Clockwise	equ	__end_of_Motor_Clockwise-_Motor_Clockwise
  4162                           	
  4163  06A0                     _Motor_Clockwise:	
  4164                           	opt	stack 9
  4165                           ; Regs used in _Motor_Clockwise: [wreg+status,2+status,0]
  4166                           	line	61
  4167                           	
  4168  06A0                     l19209:	
  4169                           ;motor.c: 60: uint8_t tem;
  4170                           ;motor.c: 61: tem = PORTC;
  4171  06A0  0020               	movlb 0	; select bank0
  4172  06A1  080E               	movf	(14),w	;volatile
  4173  06A2  00C6               	movwf	(??_Motor_Clockwise+0)+0
  4174  06A3  0846               	movf	(??_Motor_Clockwise+0)+0,w
  4175  06A4  00C7               	movwf	(Motor_Clockwise@tem)
  4176                           	line	62
  4177                           	
  4178  06A5                     l19211:	
  4179                           ;motor.c: 62: tem |= (0x01 << 2);
  4180  06A5  1547               	bsf	(Motor_Clockwise@tem)+(2/8),(2)&7
  4181                           	line	63
  4182                           	
  4183  06A6                     l19213:	
  4184                           ;motor.c: 63: tem &= ~(0x01 << 5);
  4185  06A6  30DF               	movlw	(0DFh)
  4186  06A7  00C6               	movwf	(??_Motor_Clockwise+0)+0
  4187  06A8  0846               	movf	(??_Motor_Clockwise+0)+0,w
  4188  06A9  05C7               	andwf	(Motor_Clockwise@tem),f
  4189                           	line	64
  4190                           	
  4191  06AA                     l19215:	
  4192                           ;motor.c: 64: PORTC = tem;
  4193  06AA  0847               	movf	(Motor_Clockwise@tem),w
  4194  06AB  008E               	movwf	(14)	;volatile
  4195                           	line	66
  4196                           	
  4197  06AC                     l6699:	
  4198  06AC  0008               	return
  4199                           	opt stack 0
  4200                           GLOBAL	__end_of_Motor_Clockwise
  4201  06AD                     	__end_of_Motor_Clockwise:
  4202 ;; =============== function _Motor_Clockwise ends ============
  4203                           
  4204                           	signat	_Motor_Clockwise,88
  4205                           	global	_Motor_Counterclockwise
  4206                           psect	text965,local,class=CODE,delta=2
  4207                           global __ptext965
  4208  06AD                     __ptext965:
  4209                           
  4210 ;; *************** function _Motor_Counterclockwise *****************
  4211 ;; Defined at:
  4212 ;;		line 32 in file "motor.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;		None
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  tem             1    1[BANK0 ] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;		None               void
  4219 ;; Registers used:
  4220 ;;		wreg, status,2, status,0
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMMON   BANK0   BANK1
  4226 ;;      Params:         0       0       0
  4227 ;;      Locals:         0       1       0
  4228 ;;      Temps:          0       1       0
  4229 ;;      Totals:         0       2       0
  4230 ;;Total ram usage:        2 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    4
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_ContrlSignal_Driver
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           psect	text965
  4240                           	file	"motor.c"
  4241                           	line	32
  4242                           	global	__size_of_Motor_Counterclockwise
  4243  000D                     	__size_of_Motor_Counterclockwise	equ	__end_of_Motor_Counterclockwise-_Motor_Countercloc
                                 kwise
  4244                           	
  4245  06AD                     _Motor_Counterclockwise:	
  4246                           	opt	stack 9
  4247                           ; Regs used in _Motor_Counterclockwise: [wreg+status,2+status,0]
  4248                           	line	41
  4249                           	
  4250  06AD                     l19201:	
  4251                           ;motor.c: 40: uint8_t tem;
  4252                           ;motor.c: 41: tem = PORTC;
  4253  06AD  0020               	movlb 0	; select bank0
  4254  06AE  080E               	movf	(14),w	;volatile
  4255  06AF  00C6               	movwf	(??_Motor_Counterclockwise+0)+0
  4256  06B0  0846               	movf	(??_Motor_Counterclockwise+0)+0,w
  4257  06B1  00C7               	movwf	(Motor_Counterclockwise@tem)
  4258                           	line	42
  4259                           	
  4260  06B2                     l19203:	
  4261                           ;motor.c: 42: tem &= ~(0x01 << 2);
  4262  06B2  30FB               	movlw	(0FBh)
  4263  06B3  00C6               	movwf	(??_Motor_Counterclockwise+0)+0
  4264  06B4  0846               	movf	(??_Motor_Counterclockwise+0)+0,w
  4265  06B5  05C7               	andwf	(Motor_Counterclockwise@tem),f
  4266                           	line	43
  4267                           	
  4268  06B6                     l19205:	
  4269                           ;motor.c: 43: tem |= (0x01 << 5);
  4270  06B6  16C7               	bsf	(Motor_Counterclockwise@tem)+(5/8),(5)&7
  4271                           	line	44
  4272                           	
  4273  06B7                     l19207:	
  4274                           ;motor.c: 44: PORTC = tem;
  4275  06B7  0847               	movf	(Motor_Counterclockwise@tem),w
  4276  06B8  008E               	movwf	(14)	;volatile
  4277                           	line	46
  4278                           	
  4279  06B9                     l6696:	
  4280  06B9  0008               	return
  4281                           	opt stack 0
  4282                           GLOBAL	__end_of_Motor_Counterclockwise
  4283  06BA                     	__end_of_Motor_Counterclockwise:
  4284 ;; =============== function _Motor_Counterclockwise ends ============
  4285                           
  4286                           	signat	_Motor_Counterclockwise,88
  4287                           	global	_Motor_GetStaus
  4288                           psect	text966,local,class=CODE,delta=2
  4289                           global __ptext966
  4290  06DE                     __ptext966:
  4291                           
  4292 ;; *************** function _Motor_GetStaus *****************
  4293 ;; Defined at:
  4294 ;;		line 97 in file "motor.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;		None
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;		None
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  1    wreg      char 
  4301 ;; Registers used:
  4302 ;;		wreg
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1
  4308 ;;      Params:         0       0       0
  4309 ;;      Locals:         0       0       0
  4310 ;;      Temps:          0       0       0
  4311 ;;      Totals:         0       0       0
  4312 ;;Total ram usage:        0 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:    4
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_ContrlSignal_Driver
  4319 ;;		_Motor_Driver
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           psect	text966
  4323                           	file	"motor.c"
  4324                           	line	97
  4325                           	global	__size_of_Motor_GetStaus
  4326  000B                     	__size_of_Motor_GetStaus	equ	__end_of_Motor_GetStaus-_Motor_GetStaus
  4327                           	
  4328  06DE                     _Motor_GetStaus:	
  4329                           	opt	stack 9
  4330                           ; Regs used in _Motor_GetStaus: [wreg]
  4331                           	line	98
  4332                           	
  4333  06DE                     l19191:	
  4334                           ;motor.c: 98: if(RA4 == 0)
  4335  06DE  0020               	movlb 0	; select bank0
  4336  06DF  1A0C               	btfsc	(100/8),(100)&7
  4337  06E0  2EE2               	goto	u3051
  4338  06E1  2EE3               	goto	u3050
  4339  06E2                     u3051:
  4340  06E2  2EE6               	goto	l19197
  4341  06E3                     u3050:
  4342                           	line	100
  4343                           	
  4344  06E3                     l19193:	
  4345                           ;motor.c: 99: {
  4346                           ;motor.c: 100: return System_Closed;
  4347  06E3  3001               	movlw	(01h)
  4348  06E4  2EE8               	goto	l6709
  4349                           	
  4350  06E5                     l19195:	
  4351  06E5  2EE8               	goto	l6709
  4352                           	line	101
  4353                           	
  4354  06E6                     l6708:	
  4355                           	line	102
  4356                           	
  4357  06E6                     l19197:	
  4358                           ;motor.c: 101: }
  4359                           ;motor.c: 102: return System_Opened;
  4360  06E6  3000               	movlw	(0)
  4361  06E7  2EE8               	goto	l6709
  4362                           	
  4363  06E8                     l19199:	
  4364                           	line	103
  4365                           	
  4366  06E8                     l6709:	
  4367  06E8  0008               	return
  4368                           	opt stack 0
  4369                           GLOBAL	__end_of_Motor_GetStaus
  4370  06E9                     	__end_of_Motor_GetStaus:
  4371 ;; =============== function _Motor_GetStaus ends ============
  4372                           
  4373                           	signat	_Motor_GetStaus,89
  4374                           	global	_Uart_SendStr
  4375                           psect	text967,local,class=CODE,delta=2
  4376                           global __ptext967
  4377  0708                     __ptext967:
  4378                           
  4379 ;; *************** function _Uart_SendStr *****************
  4380 ;; Defined at:
  4381 ;;		line 56 in file "uart.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;  str             1    wreg     PTR unsigned char 
  4384 ;;		 -> STR_10(17), STR_9(9), STR_8(22), STR_7(14), 
  4385 ;;		 -> STR_6(23), STR_5(15), STR_4(9), STR_3(9), 
  4386 ;;		 -> STR_2(14), STR_1(15), 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  str             1    0[COMMON] PTR unsigned char 
  4389 ;;		 -> STR_10(17), STR_9(9), STR_8(22), STR_7(14), 
  4390 ;;		 -> STR_6(23), STR_5(15), STR_4(9), STR_3(9), 
  4391 ;;		 -> STR_2(14), STR_1(15), 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;		None               void
  4394 ;; Registers used:
  4395 ;;		wreg
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMMON   BANK0   BANK1
  4401 ;;      Params:         0       0       0
  4402 ;;      Locals:         0       0       0
  4403 ;;      Temps:          0       0       0
  4404 ;;      Totals:         0       0       0
  4405 ;;Total ram usage:        0 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    4
  4408 ;; This function calls:
  4409 ;;		Nothing
  4410 ;; This function is called by:
  4411 ;;		_ContrlSignal_Driver
  4412 ;;		_Motor_Driver
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           psect	text967
  4416                           	file	"uart.c"
  4417                           	line	56
  4418                           	global	__size_of_Uart_SendStr
  4419  0001                     	__size_of_Uart_SendStr	equ	__end_of_Uart_SendStr-_Uart_SendStr
  4420                           	
  4421  0708                     _Uart_SendStr:	
  4422                           	opt	stack 9
  4423                           ; Regs used in _Uart_SendStr: [wreg]
  4424                           	line	64
  4425                           	
  4426  0708                     l4007:	
  4427  0708  0008               	return
  4428                           	opt stack 0
  4429                           GLOBAL	__end_of_Uart_SendStr
  4430  0709                     	__end_of_Uart_SendStr:
  4431 ;; =============== function _Uart_SendStr ends ============
  4432                           
  4433                           	signat	_Uart_SendStr,4216
  4434                           	global	_Motor_LowPower
  4435                           psect	text968,local,class=CODE,delta=2
  4436                           global __ptext968
  4437  0665                     __ptext968:
  4438                           
  4439 ;; *************** function _Motor_LowPower *****************
  4440 ;; Defined at:
  4441 ;;		line 86 in file "motor.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;		None
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  tem             1    1[BANK0 ] unsigned char 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;		None               void
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMMON   BANK0   BANK1
  4455 ;;      Params:         0       0       0
  4456 ;;      Locals:         0       1       0
  4457 ;;      Temps:          0       1       0
  4458 ;;      Totals:         0       2       0
  4459 ;;Total ram usage:        2 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    4
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_main
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           psect	text968
  4469                           	file	"motor.c"
  4470                           	line	86
  4471                           	global	__size_of_Motor_LowPower
  4472  0010                     	__size_of_Motor_LowPower	equ	__end_of_Motor_LowPower-_Motor_LowPower
  4473                           	
  4474  0665                     _Motor_LowPower:	
  4475                           	opt	stack 11
  4476                           ; Regs used in _Motor_LowPower: [wreg+status,2+status,0]
  4477                           	line	88
  4478                           	
  4479  0665                     l19103:	
  4480                           ;motor.c: 87: uint8_t tem;
  4481                           ;motor.c: 88: tem = PORTC;
  4482  0665  0020               	movlb 0	; select bank0
  4483  0666  080E               	movf	(14),w	;volatile
  4484  0667  00C6               	movwf	(??_Motor_LowPower+0)+0
  4485  0668  0846               	movf	(??_Motor_LowPower+0)+0,w
  4486  0669  00C7               	movwf	(Motor_LowPower@tem)
  4487                           	line	89
  4488                           	
  4489  066A                     l19105:	
  4490                           ;motor.c: 89: tem &= ~(0x01 << 2);
  4491  066A  30FB               	movlw	(0FBh)
  4492  066B  00C6               	movwf	(??_Motor_LowPower+0)+0
  4493  066C  0846               	movf	(??_Motor_LowPower+0)+0,w
  4494  066D  05C7               	andwf	(Motor_LowPower@tem),f
  4495                           	line	90
  4496                           	
  4497  066E                     l19107:	
  4498                           ;motor.c: 90: tem &= ~(0x01 << 5);
  4499  066E  30DF               	movlw	(0DFh)
  4500  066F  00C6               	movwf	(??_Motor_LowPower+0)+0
  4501  0670  0846               	movf	(??_Motor_LowPower+0)+0,w
  4502  0671  05C7               	andwf	(Motor_LowPower@tem),f
  4503                           	line	91
  4504                           ;motor.c: 91: PORTC = tem;
  4505  0672  0847               	movf	(Motor_LowPower@tem),w
  4506  0673  008E               	movwf	(14)	;volatile
  4507                           	line	92
  4508                           	
  4509  0674                     l6705:	
  4510  0674  0008               	return
  4511                           	opt stack 0
  4512                           GLOBAL	__end_of_Motor_LowPower
  4513  0675                     	__end_of_Motor_LowPower:
  4514 ;; =============== function _Motor_LowPower ends ============
  4515                           
  4516                           	signat	_Motor_LowPower,88
  4517                           	global	_WatchDog_Reset
  4518                           psect	text969,local,class=CODE,delta=2
  4519                           global __ptext969
  4520  06F6                     __ptext969:
  4521                           
  4522 ;; *************** function _WatchDog_Reset *****************
  4523 ;; Defined at:
  4524 ;;		line 97 in file "system_init.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;		None
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;		None
  4529 ;; Return value:  Size  Location     Type
  4530 ;;		None               void
  4531 ;; Registers used:
  4532 ;;		status,2
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMMON   BANK0   BANK1
  4538 ;;      Params:         0       0       0
  4539 ;;      Locals:         0       0       0
  4540 ;;      Temps:          0       0       0
  4541 ;;      Totals:         0       0       0
  4542 ;;Total ram usage:        0 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    4
  4545 ;; This function calls:
  4546 ;;		Nothing
  4547 ;; This function is called by:
  4548 ;;		_main
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           psect	text969
  4552                           	file	"system_init.c"
  4553                           	line	97
  4554                           	global	__size_of_WatchDog_Reset
  4555  0006                     	__size_of_WatchDog_Reset	equ	__end_of_WatchDog_Reset-_WatchDog_Reset
  4556                           	
  4557  06F6                     _WatchDog_Reset:	
  4558                           	opt	stack 11
  4559                           ; Regs used in _WatchDog_Reset: [status,2]
  4560                           	line	98
  4561                           	
  4562  06F6                     l19099:	
  4563                           ;system_init.c: 98: WDTCON = 0;
  4564  06F6  0021               	movlb 1	; select bank1
  4565  06F7  0197               	clrf	(151)^080h	;volatile
  4566                           	line	99
  4567                           	
  4568  06F8                     l19101:	
  4569                           ;system_init.c: 99: WDTCON |= 0x01;
  4570  06F8  1417               	bsf	(151)^080h+(0/8),(0)&7	;volatile
  4571  06F9  2EFA               	goto	l9365
  4572                           	line	100
  4573                           ;system_init.c: 100: while(1);
  4574                           	
  4575  06FA                     l9364:	
  4576                           	
  4577  06FA                     l9365:	
  4578  06FA  2EFA               	goto	l9365
  4579                           	
  4580  06FB                     l9366:	
  4581                           	line	101
  4582                           	
  4583  06FB                     l9367:	
  4584  06FB  0008               	return
  4585                           	opt stack 0
  4586                           GLOBAL	__end_of_WatchDog_Reset
  4587  06FC                     	__end_of_WatchDog_Reset:
  4588 ;; =============== function _WatchDog_Reset ends ============
  4589                           
  4590                           	signat	_WatchDog_Reset,88
  4591                           	global	_Feed_WatchDog
  4592                           psect	text970,local,class=CODE,delta=2
  4593                           global __ptext970
  4594  0706                     __ptext970:
  4595                           
  4596 ;; *************** function _Feed_WatchDog *****************
  4597 ;; Defined at:
  4598 ;;		line 104 in file "system_init.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;		None
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;		None
  4603 ;; Return value:  Size  Location     Type
  4604 ;;		None               void
  4605 ;; Registers used:
  4606 ;;		None
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMMON   BANK0   BANK1
  4612 ;;      Params:         0       0       0
  4613 ;;      Locals:         0       0       0
  4614 ;;      Temps:          0       0       0
  4615 ;;      Totals:         0       0       0
  4616 ;;Total ram usage:        0 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; Hardware stack levels required when called:    4
  4619 ;; This function calls:
  4620 ;;		Nothing
  4621 ;; This function is called by:
  4622 ;;		_main
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           psect	text970
  4626                           	file	"system_init.c"
  4627                           	line	104
  4628                           	global	__size_of_Feed_WatchDog
  4629  0002                     	__size_of_Feed_WatchDog	equ	__end_of_Feed_WatchDog-_Feed_WatchDog
  4630                           	
  4631  0706                     _Feed_WatchDog:	
  4632                           	opt	stack 11
  4633                           ; Regs used in _Feed_WatchDog: []
  4634                           	line	105
  4635                           	
  4636  0706                     l19097:	
  4637                           # 105 "system_init.c"
  4638  0706  0064               clrwdt ;#
  4639                           psect	text970
  4640                           	line	106
  4641                           	
  4642  0707                     l9370:	
  4643  0707  0008               	return
  4644                           	opt stack 0
  4645                           GLOBAL	__end_of_Feed_WatchDog
  4646  0708                     	__end_of_Feed_WatchDog:
  4647 ;; =============== function _Feed_WatchDog ends ============
  4648                           
  4649                           	signat	_Feed_WatchDog,88
  4650                           	global	_WatchDog_Init
  4651                           psect	text971,local,class=CODE,delta=2
  4652                           global __ptext971
  4653  06FC                     __ptext971:
  4654                           
  4655 ;; *************** function _WatchDog_Init *****************
  4656 ;; Defined at:
  4657 ;;		line 92 in file "system_init.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;		None
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;		None
  4662 ;; Return value:  Size  Location     Type
  4663 ;;		None               void
  4664 ;; Registers used:
  4665 ;;		wreg
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1
  4671 ;;      Params:         0       0       0
  4672 ;;      Locals:         0       0       0
  4673 ;;      Temps:          0       0       0
  4674 ;;      Totals:         0       0       0
  4675 ;;Total ram usage:        0 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    4
  4678 ;; This function calls:
  4679 ;;		Nothing
  4680 ;; This function is called by:
  4681 ;;		_main
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           psect	text971
  4685                           	file	"system_init.c"
  4686                           	line	92
  4687                           	global	__size_of_WatchDog_Init
  4688  0004                     	__size_of_WatchDog_Init	equ	__end_of_WatchDog_Init-_WatchDog_Init
  4689                           	
  4690  06FC                     _WatchDog_Init:	
  4691                           	opt	stack 11
  4692                           ; Regs used in _WatchDog_Init: [wreg]
  4693                           	line	93
  4694                           	
  4695  06FC                     l19095:	
  4696                           ;system_init.c: 93: WDTCON = 0x1b;
  4697  06FC  301B               	movlw	(01Bh)
  4698  06FD  0021               	movlb 1	; select bank1
  4699  06FE  0097               	movwf	(151)^080h	;volatile
  4700                           	line	94
  4701                           	
  4702  06FF                     l9361:	
  4703  06FF  0008               	return
  4704                           	opt stack 0
  4705                           GLOBAL	__end_of_WatchDog_Init
  4706  0700                     	__end_of_WatchDog_Init:
  4707 ;; =============== function _WatchDog_Init ends ============
  4708                           
  4709                           	signat	_WatchDog_Init,88
  4710                           	global	_Delay_MS
  4711                           psect	text972,local,class=CODE,delta=2
  4712                           global __ptext972
  4713  0621                     __ptext972:
  4714                           
  4715 ;; *************** function _Delay_MS *****************
  4716 ;; Defined at:
  4717 ;;		line 6 in file "delay.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  ms              2    0[BANK0 ] unsigned int 
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;		None
  4722 ;; Return value:  Size  Location     Type
  4723 ;;		None               void
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMMON   BANK0   BANK1
  4731 ;;      Params:         0       2       0
  4732 ;;      Locals:         0       0       0
  4733 ;;      Temps:          0       0       0
  4734 ;;      Totals:         0       2       0
  4735 ;;Total ram usage:        2 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    4
  4738 ;; This function calls:
  4739 ;;		Nothing
  4740 ;; This function is called by:
  4741 ;;		_main
  4742 ;;		_ContrlSignal_Driver
  4743 ;;		_Motor_Driver
  4744 ;;		_Motor_Stop
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           psect	text972
  4748                           	file	"delay.c"
  4749                           	line	6
  4750                           	global	__size_of_Delay_MS
  4751  0011                     	__size_of_Delay_MS	equ	__end_of_Delay_MS-_Delay_MS
  4752                           	
  4753  0621                     _Delay_MS:	
  4754                           	opt	stack 9
  4755                           ; Regs used in _Delay_MS: [wreg+status,2+status,0]
  4756                           	line	7
  4757                           	
  4758  0621                     l19091:	
  4759                           ;delay.c: 7: delay_time = ms;
  4760  0621  0020               	movlb 0	; select bank0
  4761  0622  0847               	movf	(Delay_MS@ms+1),w
  4762  0623  01B1               	clrf	(_delay_time+1)
  4763  0624  07B1               	addwf	(_delay_time+1)
  4764  0625  0846               	movf	(Delay_MS@ms),w
  4765  0626  01B0               	clrf	(_delay_time)
  4766  0627  07B0               	addwf	(_delay_time)
  4767                           
  4768                           	line	8
  4769                           ;delay.c: 8: while(delay_time != 0);
  4770  0628  2E2A               	goto	l19093
  4771                           	
  4772  0629                     l10675:	
  4773  0629  2E2A               	goto	l19093
  4774                           	
  4775  062A                     l10674:	
  4776                           	
  4777  062A                     l19093:	
  4778  062A  0831               	movf	((_delay_time+1)),w
  4779  062B  0430               	iorwf	((_delay_time)),w
  4780  062C  1D03               	skipz
  4781  062D  2E2F               	goto	u2871
  4782  062E  2E30               	goto	u2870
  4783  062F                     u2871:
  4784  062F  2E2A               	goto	l19093
  4785  0630                     u2870:
  4786  0630  2E31               	goto	l10677
  4787                           	
  4788  0631                     l10676:	
  4789                           	line	9
  4790                           	
  4791  0631                     l10677:	
  4792  0631  0008               	return
  4793                           	opt stack 0
  4794                           GLOBAL	__end_of_Delay_MS
  4795  0632                     	__end_of_Delay_MS:
  4796 ;; =============== function _Delay_MS ends ============
  4797                           
  4798                           	signat	_Delay_MS,4216
  4799                           	global	_Motor_Init
  4800                           psect	text973,local,class=CODE,delta=2
  4801                           global __ptext973
  4802  04B2                     __ptext973:
  4803                           
  4804 ;; *************** function _Motor_Init *****************
  4805 ;; Defined at:
  4806 ;;		line 14 in file "motor.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;		None
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;		None
  4811 ;; Return value:  Size  Location     Type
  4812 ;;		None               void
  4813 ;; Registers used:
  4814 ;;		wreg, status,2, status,0
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1
  4820 ;;      Params:         0       0       0
  4821 ;;      Locals:         0       0       0
  4822 ;;      Temps:          0       1       0
  4823 ;;      Totals:         0       1       0
  4824 ;;Total ram usage:        1 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    4
  4827 ;; This function calls:
  4828 ;;		Nothing
  4829 ;; This function is called by:
  4830 ;;		_main
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           psect	text973
  4834                           	file	"motor.c"
  4835                           	line	14
  4836                           	global	__size_of_Motor_Init
  4837  002E                     	__size_of_Motor_Init	equ	__end_of_Motor_Init-_Motor_Init
  4838                           	
  4839  04B2                     _Motor_Init:	
  4840                           	opt	stack 11
  4841                           ; Regs used in _Motor_Init: [wreg+status,2+status,0]
  4842                           	line	17
  4843                           	
  4844  04B2                     l19083:	
  4845                           ;motor.c: 17: PORTC &= ~((0x01 << 2) | (0x01 << 5));
  4846  04B2  30DB               	movlw	(0DBh)
  4847  04B3  0020               	movlb 0	; select bank0
  4848  04B4  00C6               	movwf	(??_Motor_Init+0)+0
  4849  04B5  0846               	movf	(??_Motor_Init+0)+0,w
  4850  04B6  058E               	andwf	(14),f	;volatile
  4851                           	line	18
  4852                           ;motor.c: 18: TRISC &= ~((0x01 << 2) | (0x01 << 5));
  4853  04B7  30DB               	movlw	(0DBh)
  4854  04B8  00C6               	movwf	(??_Motor_Init+0)+0
  4855  04B9  0846               	movf	(??_Motor_Init+0)+0,w
  4856  04BA  0021               	movlb 1	; select bank1
  4857  04BB  058E               	andwf	(142)^080h,f	;volatile
  4858                           	line	19
  4859                           ;motor.c: 19: ANSELC &= ~(0x01 << 2);
  4860  04BC  30FB               	movlw	(0FBh)
  4861  04BD  0020               	movlb 0	; select bank0
  4862  04BE  00C6               	movwf	(??_Motor_Init+0)+0
  4863  04BF  0846               	movf	(??_Motor_Init+0)+0,w
  4864  04C0  0023               	movlb 3	; select bank3
  4865  04C1  058E               	andwf	(398)^0180h,f	;volatile
  4866                           	line	20
  4867                           ;motor.c: 20: ANSELC &= ~(0x01 << 5);
  4868  04C2  30DF               	movlw	(0DFh)
  4869  04C3  0020               	movlb 0	; select bank0
  4870  04C4  00C6               	movwf	(??_Motor_Init+0)+0
  4871  04C5  0846               	movf	(??_Motor_Init+0)+0,w
  4872  04C6  0023               	movlb 3	; select bank3
  4873  04C7  058E               	andwf	(398)^0180h,f	;volatile
  4874                           	line	21
  4875                           ;motor.c: 21: WPUC &= ~(0x01 << 2);
  4876  04C8  30FB               	movlw	(0FBh)
  4877  04C9  0020               	movlb 0	; select bank0
  4878  04CA  00C6               	movwf	(??_Motor_Init+0)+0
  4879  04CB  0846               	movf	(??_Motor_Init+0)+0,w
  4880  04CC  0024               	movlb 4	; select bank4
  4881  04CD  058E               	andwf	(526)^0200h,f	;volatile
  4882                           	line	22
  4883                           ;motor.c: 22: WPUC &= ~(0x01 << 5);
  4884  04CE  30DF               	movlw	(0DFh)
  4885  04CF  0020               	movlb 0	; select bank0
  4886  04D0  00C6               	movwf	(??_Motor_Init+0)+0
  4887  04D1  0846               	movf	(??_Motor_Init+0)+0,w
  4888  04D2  0024               	movlb 4	; select bank4
  4889  04D3  058E               	andwf	(526)^0200h,f	;volatile
  4890                           	line	25
  4891                           	
  4892  04D4                     l19085:	
  4893                           ;motor.c: 25: TRISA |= 0x01 << 4;
  4894  04D4  0021               	movlb 1	; select bank1
  4895  04D5  160C               	bsf	(140)^080h+(4/8),(4)&7	;volatile
  4896                           	line	26
  4897                           	
  4898  04D6                     l19087:	
  4899                           ;motor.c: 26: PORTA |= 0x01 << 4;
  4900  04D6  0020               	movlb 0	; select bank0
  4901  04D7  160C               	bsf	(12)+(4/8),(4)&7	;volatile
  4902                           	line	27
  4903                           ;motor.c: 27: ANSELA &= ~(0x01 << 4);
  4904  04D8  30EF               	movlw	(0EFh)
  4905  04D9  00C6               	movwf	(??_Motor_Init+0)+0
  4906  04DA  0846               	movf	(??_Motor_Init+0)+0,w
  4907  04DB  0023               	movlb 3	; select bank3
  4908  04DC  058C               	andwf	(396)^0180h,f	;volatile
  4909                           	line	28
  4910                           	
  4911  04DD                     l19089:	
  4912                           ;motor.c: 28: WPUA |= 0x01 << 4;
  4913  04DD  0024               	movlb 4	; select bank4
  4914  04DE  160C               	bsf	(524)^0200h+(4/8),(4)&7	;volatile
  4915                           	line	29
  4916                           	
  4917  04DF                     l6693:	
  4918  04DF  0008               	return
  4919                           	opt stack 0
  4920                           GLOBAL	__end_of_Motor_Init
  4921  04E0                     	__end_of_Motor_Init:
  4922 ;; =============== function _Motor_Init ends ============
  4923                           
  4924                           	signat	_Motor_Init,88
  4925                           	global	_PowerSwitch_Init
  4926                           psect	text974,local,class=CODE,delta=2
  4927                           global __ptext974
  4928  0632                     __ptext974:
  4929                           
  4930 ;; *************** function _PowerSwitch_Init *****************
  4931 ;; Defined at:
  4932 ;;		line 10 in file "lowpower.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;		None
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;		None
  4937 ;; Return value:  Size  Location     Type
  4938 ;;		None               void
  4939 ;; Registers used:
  4940 ;;		wreg, status,2, status,0
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMMON   BANK0   BANK1
  4946 ;;      Params:         0       0       0
  4947 ;;      Locals:         0       0       0
  4948 ;;      Temps:          0       1       0
  4949 ;;      Totals:         0       1       0
  4950 ;;Total ram usage:        1 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    4
  4953 ;; This function calls:
  4954 ;;		Nothing
  4955 ;; This function is called by:
  4956 ;;		_main
  4957 ;; This function uses a non-reentrant model
  4958 ;;
  4959                           psect	text974
  4960                           	file	"lowpower.c"
  4961                           	line	10
  4962                           	global	__size_of_PowerSwitch_Init
  4963  0011                     	__size_of_PowerSwitch_Init	equ	__end_of_PowerSwitch_Init-_PowerSwitch_Init
  4964                           	
  4965  0632                     _PowerSwitch_Init:	
  4966                           	opt	stack 11
  4967                           ; Regs used in _PowerSwitch_Init: [wreg+status,2+status,0]
  4968                           	line	11
  4969                           	
  4970  0632                     l19081:	
  4971                           ;lowpower.c: 11: TRISC &= ~(0x01 << 3);
  4972  0632  30F7               	movlw	(0F7h)
  4973  0633  0020               	movlb 0	; select bank0
  4974  0634  00C6               	movwf	(??_PowerSwitch_Init+0)+0
  4975  0635  0846               	movf	(??_PowerSwitch_Init+0)+0,w
  4976  0636  0021               	movlb 1	; select bank1
  4977  0637  058E               	andwf	(142)^080h,f	;volatile
  4978                           	line	12
  4979                           ;lowpower.c: 12: PORTC &= ~( 0x01 << 3);
  4980  0638  30F7               	movlw	(0F7h)
  4981  0639  0020               	movlb 0	; select bank0
  4982  063A  00C6               	movwf	(??_PowerSwitch_Init+0)+0
  4983  063B  0846               	movf	(??_PowerSwitch_Init+0)+0,w
  4984  063C  058E               	andwf	(14),f	;volatile
  4985                           	line	13
  4986                           ;lowpower.c: 13: ANSELC &= ~(0x01 << 3);
  4987  063D  30F7               	movlw	(0F7h)
  4988  063E  00C6               	movwf	(??_PowerSwitch_Init+0)+0
  4989  063F  0846               	movf	(??_PowerSwitch_Init+0)+0,w
  4990  0640  0023               	movlb 3	; select bank3
  4991  0641  058E               	andwf	(398)^0180h,f	;volatile
  4992                           	line	14
  4993                           	
  4994  0642                     l14625:	
  4995  0642  0008               	return
  4996                           	opt stack 0
  4997                           GLOBAL	__end_of_PowerSwitch_Init
  4998  0643                     	__end_of_PowerSwitch_Init:
  4999 ;; =============== function _PowerSwitch_Init ends ============
  5000                           
  5001                           	signat	_PowerSwitch_Init,88
  5002                           	global	_KeyInit
  5003                           psect	text975,local,class=CODE,delta=2
  5004                           global __ptext975
  5005  06C7                     __ptext975:
  5006                           
  5007 ;; *************** function _KeyInit *****************
  5008 ;; Defined at:
  5009 ;;		line 9 in file "keyboard.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;		None
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;		None
  5014 ;; Return value:  Size  Location     Type
  5015 ;;		None               void
  5016 ;; Registers used:
  5017 ;;		wreg, status,2, status,0
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMMON   BANK0   BANK1
  5023 ;;      Params:         0       0       0
  5024 ;;      Locals:         0       0       0
  5025 ;;      Temps:          0       1       0
  5026 ;;      Totals:         0       1       0
  5027 ;;Total ram usage:        1 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    4
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		_main
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           psect	text975
  5037                           	file	"keyboard.c"
  5038                           	line	9
  5039                           	global	__size_of_KeyInit
  5040  000C                     	__size_of_KeyInit	equ	__end_of_KeyInit-_KeyInit
  5041                           	
  5042  06C7                     _KeyInit:	
  5043                           	opt	stack 11
  5044                           ; Regs used in _KeyInit: [wreg+status,2+status,0]
  5045                           	line	10
  5046                           	
  5047  06C7                     l19075:	
  5048                           ;keyboard.c: 10: TRISA |= 0x01 << 5;
  5049  06C7  0021               	movlb 1	; select bank1
  5050  06C8  168C               	bsf	(140)^080h+(5/8),(5)&7	;volatile
  5051                           	line	11
  5052                           ;keyboard.c: 11: PORTA |= 0x01 << 5;
  5053  06C9  0020               	movlb 0	; select bank0
  5054  06CA  168C               	bsf	(12)+(5/8),(5)&7	;volatile
  5055                           	line	12
  5056                           	
  5057  06CB                     l19077:	
  5058                           ;keyboard.c: 12: ANSELA &= ~(0x01 << 5);
  5059  06CB  30DF               	movlw	(0DFh)
  5060  06CC  00C6               	movwf	(??_KeyInit+0)+0
  5061  06CD  0846               	movf	(??_KeyInit+0)+0,w
  5062  06CE  0023               	movlb 3	; select bank3
  5063  06CF  058C               	andwf	(396)^0180h,f	;volatile
  5064                           	line	13
  5065                           	
  5066  06D0                     l19079:	
  5067                           ;keyboard.c: 13: WPUA |= 0x01 << 5;
  5068  06D0  0024               	movlb 4	; select bank4
  5069  06D1  168C               	bsf	(524)^0200h+(5/8),(5)&7	;volatile
  5070                           	line	14
  5071                           	
  5072  06D2                     l8020:	
  5073  06D2  0008               	return
  5074                           	opt stack 0
  5075                           GLOBAL	__end_of_KeyInit
  5076  06D3                     	__end_of_KeyInit:
  5077 ;; =============== function _KeyInit ends ============
  5078                           
  5079                           	signat	_KeyInit,88
  5080                           	global	_PIC_EnableInterrupt
  5081                           psect	text976,local,class=CODE,delta=2
  5082                           global __ptext976
  5083  0703                     __ptext976:
  5084                           
  5085 ;; *************** function _PIC_EnableInterrupt *****************
  5086 ;; Defined at:
  5087 ;;		line 11 in file "interrupt.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;		None
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;		None
  5092 ;; Return value:  Size  Location     Type
  5093 ;;		None               void
  5094 ;; Registers used:
  5095 ;;		None
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMMON   BANK0   BANK1
  5101 ;;      Params:         0       0       0
  5102 ;;      Locals:         0       0       0
  5103 ;;      Temps:          0       0       0
  5104 ;;      Totals:         0       0       0
  5105 ;;Total ram usage:        0 bytes
  5106 ;; Hardware stack levels used:    1
  5107 ;; Hardware stack levels required when called:    4
  5108 ;; This function calls:
  5109 ;;		Nothing
  5110 ;; This function is called by:
  5111 ;;		_main
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           psect	text976
  5115                           	file	"interrupt.c"
  5116                           	line	11
  5117                           	global	__size_of_PIC_EnableInterrupt
  5118  0003                     	__size_of_PIC_EnableInterrupt	equ	__end_of_PIC_EnableInterrupt-_PIC_EnableInterrupt
  5119                           	
  5120  0703                     _PIC_EnableInterrupt:	
  5121                           	opt	stack 11
  5122                           ; Regs used in _PIC_EnableInterrupt: []
  5123                           	line	13
  5124                           	
  5125  0703                     l19073:	
  5126                           ;interrupt.c: 13: INTCON |= (0x01 << 7);
  5127  0703  178B               	bsf	(11)+(7/8),(7)&7	;volatile
  5128                           	line	14
  5129                           ;interrupt.c: 14: INTCON |= (0x01 << 6);
  5130  0704  170B               	bsf	(11)+(6/8),(6)&7	;volatile
  5131                           	line	15
  5132                           	
  5133  0705                     l2687:	
  5134  0705  0008               	return
  5135                           	opt stack 0
  5136                           GLOBAL	__end_of_PIC_EnableInterrupt
  5137  0706                     	__end_of_PIC_EnableInterrupt:
  5138 ;; =============== function _PIC_EnableInterrupt ends ============
  5139                           
  5140                           	signat	_PIC_EnableInterrupt,88
  5141                           	global	_PIC_CofnigTimer0
  5142                           psect	text977,local,class=CODE,delta=2
  5143                           global __ptext977
  5144  0643                     __ptext977:
  5145                           
  5146 ;; *************** function _PIC_CofnigTimer0 *****************
  5147 ;; Defined at:
  5148 ;;		line 108 in file "system_init.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;		None
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;		None
  5153 ;; Return value:  Size  Location     Type
  5154 ;;		None               void
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMMON   BANK0   BANK1
  5162 ;;      Params:         0       0       0
  5163 ;;      Locals:         0       0       0
  5164 ;;      Temps:          0       1       0
  5165 ;;      Totals:         0       1       0
  5166 ;;Total ram usage:        1 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    4
  5169 ;; This function calls:
  5170 ;;		Nothing
  5171 ;; This function is called by:
  5172 ;;		_main
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           psect	text977
  5176                           	file	"system_init.c"
  5177                           	line	108
  5178                           	global	__size_of_PIC_CofnigTimer0
  5179  0011                     	__size_of_PIC_CofnigTimer0	equ	__end_of_PIC_CofnigTimer0-_PIC_CofnigTimer0
  5180                           	
  5181  0643                     _PIC_CofnigTimer0:	
  5182                           	opt	stack 11
  5183                           ; Regs used in _PIC_CofnigTimer0: [wreg+status,2+status,0]
  5184                           	line	117
  5185                           	
  5186  0643                     l19063:	
  5187                           ;system_init.c: 117: OPTION_REG |= (0x01 << 3);
  5188  0643  0021               	movlb 1	; select bank1
  5189  0644  1595               	bsf	(149)^080h+(3/8),(3)&7	;volatile
  5190                           	line	118
  5191                           	
  5192  0645                     l19065:	
  5193                           ;system_init.c: 118: OPTION_REG &= ~(0x01 << 5);
  5194  0645  30DF               	movlw	(0DFh)
  5195  0646  0020               	movlb 0	; select bank0
  5196  0647  00C6               	movwf	(??_PIC_CofnigTimer0+0)+0
  5197  0648  0846               	movf	(??_PIC_CofnigTimer0+0)+0,w
  5198  0649  0021               	movlb 1	; select bank1
  5199  064A  0595               	andwf	(149)^080h,f	;volatile
  5200                           	line	120
  5201                           	
  5202  064B                     l19067:	
  5203                           ;system_init.c: 120: TMR0 = 5;
  5204  064B  3005               	movlw	(05h)
  5205  064C  0020               	movlb 0	; select bank0
  5206  064D  0095               	movwf	(21)	;volatile
  5207                           	line	122
  5208                           	
  5209  064E                     l19069:	
  5210                           ;system_init.c: 122: INTCON &= ~(0x01 << 2);
  5211  064E  30FB               	movlw	(0FBh)
  5212  064F  00C6               	movwf	(??_PIC_CofnigTimer0+0)+0
  5213  0650  0846               	movf	(??_PIC_CofnigTimer0+0)+0,w
  5214  0651  058B               	andwf	(11),f	;volatile
  5215                           	line	123
  5216                           	
  5217  0652                     l19071:	
  5218                           ;system_init.c: 123: INTCON |= (0x01 << 5);
  5219  0652  168B               	bsf	(11)+(5/8),(5)&7	;volatile
  5220                           	line	124
  5221                           	
  5222  0653                     l9373:	
  5223  0653  0008               	return
  5224                           	opt stack 0
  5225                           GLOBAL	__end_of_PIC_CofnigTimer0
  5226  0654                     	__end_of_PIC_CofnigTimer0:
  5227 ;; =============== function _PIC_CofnigTimer0 ends ============
  5228                           
  5229                           	signat	_PIC_CofnigTimer0,88
  5230                           	global	_PIC_ConfigGPIO
  5231                           psect	text978,local,class=CODE,delta=2
  5232                           global __ptext978
  5233  0654                     __ptext978:
  5234                           
  5235 ;; *************** function _PIC_ConfigGPIO *****************
  5236 ;; Defined at:
  5237 ;;		line 25 in file "system_init.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;		None
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;		None
  5242 ;; Return value:  Size  Location     Type
  5243 ;;		None               void
  5244 ;; Registers used:
  5245 ;;		wreg, status,2, status,0
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMMON   BANK0   BANK1
  5251 ;;      Params:         0       0       0
  5252 ;;      Locals:         0       0       0
  5253 ;;      Temps:          0       1       0
  5254 ;;      Totals:         0       1       0
  5255 ;;Total ram usage:        1 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:    4
  5258 ;; This function calls:
  5259 ;;		Nothing
  5260 ;; This function is called by:
  5261 ;;		_main
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           psect	text978
  5265                           	file	"system_init.c"
  5266                           	line	25
  5267                           	global	__size_of_PIC_ConfigGPIO
  5268  0011                     	__size_of_PIC_ConfigGPIO	equ	__end_of_PIC_ConfigGPIO-_PIC_ConfigGPIO
  5269                           	
  5270  0654                     _PIC_ConfigGPIO:	
  5271                           	opt	stack 11
  5272                           ; Regs used in _PIC_ConfigGPIO: [wreg+status,2+status,0]
  5273                           	line	27
  5274                           	
  5275  0654                     l19057:	
  5276                           ;system_init.c: 27: TRISC |= 0x01 << 1;
  5277  0654  0021               	movlb 1	; select bank1
  5278  0655  148E               	bsf	(142)^080h+(1/8),(1)&7	;volatile
  5279                           	line	28
  5280                           	
  5281  0656                     l19059:	
  5282                           ;system_init.c: 28: ANSELC &= ~(0x01 << 1);
  5283  0656  30FD               	movlw	(0FDh)
  5284  0657  0020               	movlb 0	; select bank0
  5285  0658  00C6               	movwf	(??_PIC_ConfigGPIO+0)+0
  5286  0659  0846               	movf	(??_PIC_ConfigGPIO+0)+0,w
  5287  065A  0023               	movlb 3	; select bank3
  5288  065B  058E               	andwf	(398)^0180h,f	;volatile
  5289                           	line	37
  5290                           	
  5291  065C                     l19061:	
  5292                           ;system_init.c: 37: TRISA |= 0x01 << 2;
  5293  065C  0021               	movlb 1	; select bank1
  5294  065D  150C               	bsf	(140)^080h+(2/8),(2)&7	;volatile
  5295                           	line	38
  5296                           ;system_init.c: 38: ANSELA &= ~(0x01 << 2);
  5297  065E  30FB               	movlw	(0FBh)
  5298  065F  0020               	movlb 0	; select bank0
  5299  0660  00C6               	movwf	(??_PIC_ConfigGPIO+0)+0
  5300  0661  0846               	movf	(??_PIC_ConfigGPIO+0)+0,w
  5301  0662  0023               	movlb 3	; select bank3
  5302  0663  058C               	andwf	(396)^0180h,f	;volatile
  5303                           	line	39
  5304                           	
  5305  0664                     l9346:	
  5306  0664  0008               	return
  5307                           	opt stack 0
  5308                           GLOBAL	__end_of_PIC_ConfigGPIO
  5309  0665                     	__end_of_PIC_ConfigGPIO:
  5310 ;; =============== function _PIC_ConfigGPIO ends ============
  5311                           
  5312                           	signat	_PIC_ConfigGPIO,88
  5313                           	global	_PIC_ConfigOptionReg
  5314                           psect	text979,local,class=CODE,delta=2
  5315                           global __ptext979
  5316  050B                     __ptext979:
  5317                           
  5318 ;; *************** function _PIC_ConfigOptionReg *****************
  5319 ;; Defined at:
  5320 ;;		line 67 in file "system_init.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;		None
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;		None
  5325 ;; Return value:  Size  Location     Type
  5326 ;;		None               void
  5327 ;; Registers used:
  5328 ;;		wreg, status,2, status,0
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMMON   BANK0   BANK1
  5334 ;;      Params:         0       0       0
  5335 ;;      Locals:         0       0       0
  5336 ;;      Temps:          0       1       0
  5337 ;;      Totals:         0       1       0
  5338 ;;Total ram usage:        1 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:    4
  5341 ;; This function calls:
  5342 ;;		Nothing
  5343 ;; This function is called by:
  5344 ;;		_main
  5345 ;;		_System_Init
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           psect	text979
  5349                           	file	"system_init.c"
  5350                           	line	67
  5351                           	global	__size_of_PIC_ConfigOptionReg
  5352  0022                     	__size_of_PIC_ConfigOptionReg	equ	__end_of_PIC_ConfigOptionReg-_PIC_ConfigOptionReg
  5353                           	
  5354  050B                     _PIC_ConfigOptionReg:	
  5355                           	opt	stack 11
  5356                           ; Regs used in _PIC_ConfigOptionReg: [wreg+status,2+status,0]
  5357                           	line	71
  5358                           	
  5359  050B                     l19051:	
  5360                           ;system_init.c: 71: OPTION_REG |= (0x01 << 7);
  5361  050B  0021               	movlb 1	; select bank1
  5362  050C  1795               	bsf	(149)^080h+(7/8),(7)&7	;volatile
  5363                           	line	73
  5364                           	
  5365  050D                     l19053:	
  5366                           ;system_init.c: 73: OPTION_REG &= ~(0x01 << 6);
  5367  050D  30BF               	movlw	(0BFh)
  5368  050E  0020               	movlb 0	; select bank0
  5369  050F  00C6               	movwf	(??_PIC_ConfigOptionReg+0)+0
  5370  0510  0846               	movf	(??_PIC_ConfigOptionReg+0)+0,w
  5371  0511  0021               	movlb 1	; select bank1
  5372  0512  0595               	andwf	(149)^080h,f	;volatile
  5373                           	line	74
  5374                           ;system_init.c: 74: OPTION_REG &= ~(0x01 << 5);
  5375  0513  30DF               	movlw	(0DFh)
  5376  0514  0020               	movlb 0	; select bank0
  5377  0515  00C6               	movwf	(??_PIC_ConfigOptionReg+0)+0
  5378  0516  0846               	movf	(??_PIC_ConfigOptionReg+0)+0,w
  5379  0517  0021               	movlb 1	; select bank1
  5380  0518  0595               	andwf	(149)^080h,f	;volatile
  5381                           	line	75
  5382                           ;system_init.c: 75: OPTION_REG &= ~(0x01 << 4);
  5383  0519  30EF               	movlw	(0EFh)
  5384  051A  0020               	movlb 0	; select bank0
  5385  051B  00C6               	movwf	(??_PIC_ConfigOptionReg+0)+0
  5386  051C  0846               	movf	(??_PIC_ConfigOptionReg+0)+0,w
  5387  051D  0021               	movlb 1	; select bank1
  5388  051E  0595               	andwf	(149)^080h,f	;volatile
  5389                           	line	76
  5390                           ;system_init.c: 76: OPTION_REG &= ~(0x01 << 3);
  5391  051F  30F7               	movlw	(0F7h)
  5392  0520  0020               	movlb 0	; select bank0
  5393  0521  00C6               	movwf	(??_PIC_ConfigOptionReg+0)+0
  5394  0522  0846               	movf	(??_PIC_ConfigOptionReg+0)+0,w
  5395  0523  0021               	movlb 1	; select bank1
  5396  0524  0595               	andwf	(149)^080h,f	;volatile
  5397                           	line	80
  5398                           ;system_init.c: 80: OPTION_REG &= ~(0x07 << 0);
  5399  0525  30F8               	movlw	(0F8h)
  5400  0526  0020               	movlb 0	; select bank0
  5401  0527  00C6               	movwf	(??_PIC_ConfigOptionReg+0)+0
  5402  0528  0846               	movf	(??_PIC_ConfigOptionReg+0)+0,w
  5403  0529  0021               	movlb 1	; select bank1
  5404  052A  0595               	andwf	(149)^080h,f	;volatile
  5405                           	line	81
  5406                           	
  5407  052B                     l19055:	
  5408                           ;system_init.c: 81: OPTION_REG |= (0x04 << 0);
  5409  052B  1515               	bsf	(149)^080h+(2/8),(2)&7	;volatile
  5410                           	line	83
  5411                           	
  5412  052C                     l9355:	
  5413  052C  0008               	return
  5414                           	opt stack 0
  5415                           GLOBAL	__end_of_PIC_ConfigOptionReg
  5416  052D                     	__end_of_PIC_ConfigOptionReg:
  5417 ;; =============== function _PIC_ConfigOptionReg ends ============
  5418                           
  5419                           	signat	_PIC_ConfigOptionReg,88
  5420                           	global	_PIC_ConfigClock
  5421                           psect	text980,local,class=CODE,delta=2
  5422                           global __ptext980
  5423  05D4                     __ptext980:
  5424                           
  5425 ;; *************** function _PIC_ConfigClock *****************
  5426 ;; Defined at:
  5427 ;;		line 42 in file "system_init.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;		None
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;		None
  5432 ;; Return value:  Size  Location     Type
  5433 ;;		None               void
  5434 ;; Registers used:
  5435 ;;		wreg, status,2, status,0
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMMON   BANK0   BANK1
  5441 ;;      Params:         0       0       0
  5442 ;;      Locals:         0       0       0
  5443 ;;      Temps:          0       1       0
  5444 ;;      Totals:         0       1       0
  5445 ;;Total ram usage:        1 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    4
  5448 ;; This function calls:
  5449 ;;		Nothing
  5450 ;; This function is called by:
  5451 ;;		_main
  5452 ;;		_System_Init
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           psect	text980
  5456                           	file	"system_init.c"
  5457                           	line	42
  5458                           	global	__size_of_PIC_ConfigClock
  5459  0015                     	__size_of_PIC_ConfigClock	equ	__end_of_PIC_ConfigClock-_PIC_ConfigClock
  5460                           	
  5461  05D4                     _PIC_ConfigClock:	
  5462                           	opt	stack 11
  5463                           ; Regs used in _PIC_ConfigClock: [wreg+status,2+status,0]
  5464                           	line	44
  5465                           	
  5466  05D4                     l19047:	
  5467                           ;system_init.c: 44: SPLLEN = 0;
  5468  05D4  0021               	movlb 1	; select bank1
  5469  05D5  1399               	bcf	(1231/8)^080h,(1231)&7
  5470                           	line	45
  5471                           	
  5472  05D6                     l19049:	
  5473                           ;system_init.c: 45: OSCCON &= ~(0x0f << 3);
  5474  05D6  3087               	movlw	(087h)
  5475  05D7  0020               	movlb 0	; select bank0
  5476  05D8  00C6               	movwf	(??_PIC_ConfigClock+0)+0
  5477  05D9  0846               	movf	(??_PIC_ConfigClock+0)+0,w
  5478  05DA  0021               	movlb 1	; select bank1
  5479  05DB  0599               	andwf	(153)^080h,f	;volatile
  5480                           	line	48
  5481                           ;system_init.c: 48: OSCCON |= (0x0b << 3);
  5482  05DC  3058               	movlw	(058h)
  5483  05DD  0020               	movlb 0	; select bank0
  5484  05DE  00C6               	movwf	(??_PIC_ConfigClock+0)+0
  5485  05DF  0846               	movf	(??_PIC_ConfigClock+0)+0,w
  5486  05E0  0021               	movlb 1	; select bank1
  5487  05E1  0499               	iorwf	(153)^080h,f	;volatile
  5488                           	line	51
  5489                           ;system_init.c: 51: OSCCON &= ~(0x03);
  5490  05E2  30FC               	movlw	(0FCh)
  5491  05E3  0020               	movlb 0	; select bank0
  5492  05E4  00C6               	movwf	(??_PIC_ConfigClock+0)+0
  5493  05E5  0846               	movf	(??_PIC_ConfigClock+0)+0,w
  5494  05E6  0021               	movlb 1	; select bank1
  5495  05E7  0599               	andwf	(153)^080h,f	;volatile
  5496                           	line	53
  5497                           	
  5498  05E8                     l9349:	
  5499  05E8  0008               	return
  5500                           	opt stack 0
  5501                           GLOBAL	__end_of_PIC_ConfigClock
  5502  05E9                     	__end_of_PIC_ConfigClock:
  5503 ;; =============== function _PIC_ConfigClock ends ============
  5504                           
  5505                           	signat	_PIC_ConfigClock,88
  5506                           	global	_ISR_Manger
  5507                           psect	intentry,class=CODE,delta=2
  5508                           global __pintentry
  5509  0004                     __pintentry:
  5510                           
  5511 ;; *************** function _ISR_Manger *****************
  5512 ;; Defined at:
  5513 ;;		line 36 in file "interrupt.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;		None
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;		None
  5518 ;; Return value:  Size  Location     Type
  5519 ;;		None               void
  5520 ;; Registers used:
  5521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1
  5527 ;;      Params:         0       0       0
  5528 ;;      Locals:         0       0       0
  5529 ;;      Temps:          2       0       0
  5530 ;;      Totals:         2       0       0
  5531 ;;Total ram usage:        2 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    3
  5534 ;; This function calls:
  5535 ;;		_InterruptTimer0
  5536 ;; This function is called by:
  5537 ;;		Interrupt level 1
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           psect	intentry
  5541                           	file	"interrupt.c"
  5542                           	line	36
  5543                           	global	__size_of_ISR_Manger
  5544  0014                     	__size_of_ISR_Manger	equ	__end_of_ISR_Manger-_ISR_Manger
  5545                           	
  5546  0004                     _ISR_Manger:	
  5547                           	opt	stack 7
  5548                           ; Regs used in _ISR_Manger: [allreg]
  5549                           psect	intentry
  5550  0004  3180               	pagesel	$
  5551  0005  0020               	movlb 0	; select bank0
  5552  0006  087F               	movf	btemp+1,w
  5553  0007  00FD               	movwf	(??_ISR_Manger+1)
  5554                           	line	37
  5555                           	
  5556  0008                     i1l19185:	
  5557                           ;interrupt.c: 37: if(INTCON & (0x01 << 2))
  5558  0008  1D0B               	btfss	(11),(2)&7
  5559  0009  280B               	goto	u304_21
  5560  000A  280C               	goto	u304_20
  5561  000B                     u304_21:
  5562  000B  2814               	goto	i1l2696
  5563  000C                     u304_20:
  5564                           	line	39
  5565                           	
  5566  000C                     i1l19187:	
  5567                           ;interrupt.c: 38: {
  5568                           ;interrupt.c: 39: InterruptTimer0();
  5569  000C  3186  2675  3180   	fcall	_InterruptTimer0
  5570                           	line	40
  5571                           	
  5572  000F                     i1l19189:	
  5573                           ;interrupt.c: 40: INTCON &= ~(0x01 << 2);
  5574  000F  30FB               	movlw	(0FBh)
  5575  0010  00FC               	movwf	(??_ISR_Manger+0)+0
  5576  0011  087C               	movf	(??_ISR_Manger+0)+0,w
  5577  0012  058B               	andwf	(11),f	;volatile
  5578  0013  2814               	goto	i1l2696
  5579                           	line	41
  5580                           	
  5581  0014                     i1l2695:	
  5582                           	line	42
  5583                           	
  5584  0014                     i1l2696:	
  5585  0014  087D               	movf	(??_ISR_Manger+1),w
  5586  0015  0020               	movlb 0	; select bank0
  5587  0016  00FF               	movwf	btemp+1
  5588  0017  0009               	retfie
  5589                           	opt stack 0
  5590                           GLOBAL	__end_of_ISR_Manger
  5591  0018                     	__end_of_ISR_Manger:
  5592 ;; =============== function _ISR_Manger ends ============
  5593                           
  5594                           	signat	_ISR_Manger,88
  5595                           	global	_InterruptTimer0
  5596                           psect	text982,local,class=CODE,delta=2
  5597                           global __ptext982
  5598  0675                     __ptext982:
  5599                           
  5600 ;; *************** function _InterruptTimer0 *****************
  5601 ;; Defined at:
  5602 ;;		line 20 in file "interrupt.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;		None
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;		None
  5607 ;; Return value:  Size  Location     Type
  5608 ;;		None               void
  5609 ;; Registers used:
  5610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMMON   BANK0   BANK1
  5616 ;;      Params:         0       0       0
  5617 ;;      Locals:         0       0       0
  5618 ;;      Temps:          0       0       0
  5619 ;;      Totals:         0       0       0
  5620 ;;Total ram usage:        0 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    2
  5623 ;; This function calls:
  5624 ;;		_KeyScan
  5625 ;;		_Contrl_Signal
  5626 ;;		_Motor_RunTimeCount
  5627 ;;		_Delay_Scan
  5628 ;; This function is called by:
  5629 ;;		_ISR_Manger
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           psect	text982
  5633                           	file	"interrupt.c"
  5634                           	line	20
  5635                           	global	__size_of_InterruptTimer0
  5636  0010                     	__size_of_InterruptTimer0	equ	__end_of_InterruptTimer0-_InterruptTimer0
  5637                           	
  5638  0675                     _InterruptTimer0:	
  5639                           	opt	stack 7
  5640                           ; Regs used in _InterruptTimer0: [allreg]
  5641                           	line	24
  5642                           	
  5643  0675                     i1l19109:	
  5644                           ;interrupt.c: 21: static unsigned long cnt = 0;
  5645                           ;interrupt.c: 24: TMR0 = 5;
  5646  0675  3005               	movlw	(05h)
  5647  0676  0020               	movlb 0	; select bank0
  5648  0677  0095               	movwf	(21)	;volatile
  5649                           	line	25
  5650                           	
  5651  0678                     i1l19111:	
  5652                           ;interrupt.c: 25: KeyScan();
  5653  0678  3185  2564  3186   	fcall	_KeyScan
  5654                           	line	26
  5655                           	
  5656  067B                     i1l19113:	
  5657                           ;interrupt.c: 26: Contrl_Signal();
  5658  067B  3183  2394  3186   	fcall	_Contrl_Signal
  5659                           	line	27
  5660                           	
  5661  067E                     i1l19115:	
  5662                           ;interrupt.c: 27: Motor_RunTimeCount();
  5663  067E  3185  254A  3186   	fcall	_Motor_RunTimeCount
  5664                           	line	28
  5665                           	
  5666  0681                     i1l19117:	
  5667                           ;interrupt.c: 28: Delay_Scan();
  5668  0681  3186  26BA  3186   	fcall	_Delay_Scan
  5669                           	line	31
  5670                           	
  5671  0684                     i1l2692:	
  5672  0684  0008               	return
  5673                           	opt stack 0
  5674                           GLOBAL	__end_of_InterruptTimer0
  5675  0685                     	__end_of_InterruptTimer0:
  5676 ;; =============== function _InterruptTimer0 ends ============
  5677                           
  5678                           	signat	_InterruptTimer0,88
  5679                           	global	_Contrl_Signal
  5680                           psect	text983,local,class=CODE,delta=2
  5681                           global __ptext983
  5682  0394                     __ptext983:
  5683                           
  5684 ;; *************** function _Contrl_Signal *****************
  5685 ;; Defined at:
  5686 ;;		line 33 in file "signal.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  dis_tmp         2   10[COMMON] unsigned int 
  5691 ;;  tem             2    0        unsigned int 
  5692 ;; Return value:  Size  Location     Type
  5693 ;;		None               void
  5694 ;; Registers used:
  5695 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMMON   BANK0   BANK1
  5701 ;;      Params:         0       0       0
  5702 ;;      Locals:         2       0       0
  5703 ;;      Temps:          1       0       0
  5704 ;;      Totals:         3       0       0
  5705 ;;Total ram usage:        3 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    1
  5708 ;; This function calls:
  5709 ;;		_Get_ADCValue
  5710 ;; This function is called by:
  5711 ;;		_InterruptTimer0
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           psect	text983
  5715                           	file	"signal.c"
  5716                           	line	33
  5717                           	global	__size_of_Contrl_Signal
  5718  007D                     	__size_of_Contrl_Signal	equ	__end_of_Contrl_Signal-_Contrl_Signal
  5719                           	
  5720  0394                     _Contrl_Signal:	
  5721                           	opt	stack 7
  5722                           ; Regs used in _Contrl_Signal: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5723                           	line	40
  5724                           	
  5725  0394                     i1l19129:	
  5726                           ;signal.c: 34: static uint16_t period = 0;
  5727                           ;signal.c: 35: static uint16_t signal_cnt = 0;
  5728                           ;signal.c: 36: static uint8_t ctrBuf = 0;
  5729                           ;signal.c: 37: uint16_t tem;
  5730                           ;signal.c: 40: period++;
  5731  0394  3001               	movlw	low(01h)
  5732  0395  0020               	movlb 0	; select bank0
  5733  0396  07A8               	addwf	(Contrl_Signal@period),f
  5734  0397  3000               	movlw	high(01h)
  5735  0398  3DA9               	addwfc	(Contrl_Signal@period+1),f
  5736                           	line	44
  5737                           	
  5738  0399                     i1l19131:	
  5739                           ;signal.c: 44: if(RC1 == 1)
  5740  0399  1C8E               	btfss	(113/8),(113)&7
  5741  039A  2B9C               	goto	u290_21
  5742  039B  2B9D               	goto	u290_20
  5743  039C                     u290_21:
  5744  039C  2BA1               	goto	i1l12004
  5745  039D                     u290_20:
  5746                           	line	46
  5747                           	
  5748  039D                     i1l19133:	
  5749                           ;signal.c: 45: {
  5750                           ;signal.c: 46: signal_cnt++;
  5751  039D  3001               	movlw	low(01h)
  5752  039E  07AA               	addwf	(Contrl_Signal@signal_cnt),f
  5753  039F  3000               	movlw	high(01h)
  5754  03A0  3DAB               	addwfc	(Contrl_Signal@signal_cnt+1),f
  5755                           	line	47
  5756                           	
  5757  03A1                     i1l12004:	
  5758                           	line	48
  5759                           ;signal.c: 47: }
  5760                           ;signal.c: 48: if(period >= 80)
  5761  03A1  3000               	movlw	high(050h)
  5762  03A2  0229               	subwf	(Contrl_Signal@period+1),w
  5763  03A3  3050               	movlw	low(050h)
  5764  03A4  1903               	skipnz
  5765  03A5  0228               	subwf	(Contrl_Signal@period),w
  5766  03A6  1C03               	skipc
  5767  03A7  2BA9               	goto	u291_21
  5768  03A8  2BAA               	goto	u291_20
  5769  03A9                     u291_21:
  5770  03A9  2C10               	goto	i1l12014
  5771  03AA                     u291_20:
  5772                           	line	59
  5773                           	
  5774  03AA                     i1l19135:	
  5775                           ;signal.c: 49: {
  5776                           ;signal.c: 59: uint16_t dis_tmp = 0;
  5777  03AA  01FA               	clrf	(Contrl_Signal@dis_tmp)
  5778  03AB  01FB               	clrf	(Contrl_Signal@dis_tmp+1)
  5779                           	line	60
  5780                           	
  5781  03AC                     i1l19137:	
  5782                           ;signal.c: 60: numOf120ms++;
  5783  03AC  3001               	movlw	low(01h)
  5784  03AD  07B6               	addwf	(_numOf120ms),f
  5785  03AE  3000               	movlw	high(01h)
  5786  03AF  3DB7               	addwfc	(_numOf120ms+1),f
  5787                           	line	65
  5788                           	
  5789  03B0                     i1l19139:	
  5790                           ;signal.c: 65: gPhaseVoltage_CH1 = Get_ADCValue(eADC_AN4);
  5791  03B0  3004               	movlw	(04h)
  5792  03B1  3184  2481  3183   	fcall	_Get_ADCValue
  5793  03B4  0871               	movf	(1+(?_Get_ADCValue)),w
  5794  03B5  0020               	movlb 0	; select bank0
  5795  03B6  01B3               	clrf	(_gPhaseVoltage_CH1+1)
  5796  03B7  07B3               	addwf	(_gPhaseVoltage_CH1+1)
  5797  03B8  0870               	movf	(0+(?_Get_ADCValue)),w
  5798  03B9  01B2               	clrf	(_gPhaseVoltage_CH1)
  5799  03BA  07B2               	addwf	(_gPhaseVoltage_CH1)
  5800                           
  5801                           	line	75
  5802                           	
  5803  03BB                     i1l19141:	
  5804                           ;signal.c: 75: if(signal_cnt > 50)
  5805  03BB  3000               	movlw	high(033h)
  5806  03BC  022B               	subwf	(Contrl_Signal@signal_cnt+1),w
  5807  03BD  3033               	movlw	low(033h)
  5808  03BE  1903               	skipnz
  5809  03BF  022A               	subwf	(Contrl_Signal@signal_cnt),w
  5810  03C0  1C03               	skipc
  5811  03C1  2BC3               	goto	u292_21
  5812  03C2  2BC4               	goto	u292_20
  5813  03C3                     u292_21:
  5814  03C3  2BC7               	goto	i1l19145
  5815  03C4                     u292_20:
  5816                           	line	77
  5817                           	
  5818  03C4                     i1l19143:	
  5819                           ;signal.c: 76: {
  5820                           ;signal.c: 77: ctrBuf = (ctrBuf << 1) |0x01;
  5821  03C4  1403               	setc
  5822  03C5  0DB8               	rlf	(Contrl_Signal@ctrBuf),f
  5823                           	line	80
  5824                           ;signal.c: 80: }
  5825  03C6  2BCD               	goto	i1l19147
  5826                           	line	81
  5827                           	
  5828  03C7                     i1l12006:	
  5829                           	line	83
  5830                           	
  5831  03C7                     i1l19145:	
  5832                           ;signal.c: 81: else
  5833                           ;signal.c: 82: {
  5834                           ;signal.c: 83: ctrBuf = (ctrBuf << 1) |0x00;
  5835  03C7  0838               	movf	(Contrl_Signal@ctrBuf),w
  5836  03C8  0709               	addwf	wreg,w
  5837  03C9  00F9               	movwf	(??_Contrl_Signal+0)+0
  5838  03CA  0879               	movf	(??_Contrl_Signal+0)+0,w
  5839  03CB  00B8               	movwf	(Contrl_Signal@ctrBuf)
  5840  03CC  2BCD               	goto	i1l19147
  5841                           	line	86
  5842                           	
  5843  03CD                     i1l12007:	
  5844                           	line	88
  5845                           	
  5846  03CD                     i1l19147:	
  5847                           ;signal.c: 86: }
  5848                           ;signal.c: 88: if(ctrBuf == 0xff)
  5849  03CD  0838               	movf	(Contrl_Signal@ctrBuf),w
  5850  03CE  3AFF               	xorlw	0FFh&0ffh
  5851  03CF  1D03               	skipz
  5852  03D0  2BD2               	goto	u293_21
  5853  03D1  2BD3               	goto	u293_20
  5854  03D2                     u293_21:
  5855  03D2  2BD7               	goto	i1l19151
  5856  03D3                     u293_20:
  5857                           	line	90
  5858                           	
  5859  03D3                     i1l19149:	
  5860                           ;signal.c: 89: {
  5861                           ;signal.c: 90: Ctr_Signal = Ctrl_SignalValid;
  5862  03D3  01BA               	clrf	(_Ctr_Signal)
  5863  03D4  1403               	bsf	status,0
  5864  03D5  0DBA               	rlf	(_Ctr_Signal),f
  5865                           	line	91
  5866                           ;signal.c: 91: }
  5867  03D6  2BDF               	goto	i1l19155
  5868                           	line	92
  5869                           	
  5870  03D7                     i1l12008:	
  5871                           	
  5872  03D7                     i1l19151:	
  5873                           ;signal.c: 92: else if(ctrBuf == 0x00)
  5874  03D7  08B8               	movf	(Contrl_Signal@ctrBuf),f
  5875  03D8  1D03               	skipz
  5876  03D9  2BDB               	goto	u294_21
  5877  03DA  2BDC               	goto	u294_20
  5878  03DB                     u294_21:
  5879  03DB  2BDF               	goto	i1l19155
  5880  03DC                     u294_20:
  5881                           	line	94
  5882                           	
  5883  03DC                     i1l19153:	
  5884                           ;signal.c: 93: {
  5885                           ;signal.c: 94: Ctr_Signal = Ctrl_SignalInvalid;
  5886  03DC  01BA               	clrf	(_Ctr_Signal)
  5887  03DD  2BDF               	goto	i1l19155
  5888                           	line	95
  5889                           	
  5890  03DE                     i1l12010:	
  5891  03DE  2BDF               	goto	i1l19155
  5892                           	line	97
  5893                           	
  5894  03DF                     i1l12009:	
  5895                           	
  5896  03DF                     i1l19155:	
  5897                           ;signal.c: 95: }
  5898                           ;signal.c: 97: if((numOf120ms > 100) && (Ctr_Signal== Ctr_SignalBck) &&(Motor_RunSta==Mo
                                 tor_Stoped ||Motor_RunSta== Motor_Default) &&(RA2==1))
  5899  03DF  3000               	movlw	high(065h)
  5900  03E0  0237               	subwf	(_numOf120ms+1),w
  5901  03E1  3065               	movlw	low(065h)
  5902  03E2  1903               	skipnz
  5903  03E3  0236               	subwf	(_numOf120ms),w
  5904  03E4  1C03               	skipc
  5905  03E5  2BE7               	goto	u295_21
  5906  03E6  2BE8               	goto	u295_20
  5907  03E7                     u295_21:
  5908  03E7  2C03               	goto	i1l19167
  5909  03E8                     u295_20:
  5910                           	
  5911  03E8                     i1l19157:	
  5912  03E8  083A               	movf	(_Ctr_Signal),w
  5913  03E9  063B               	xorwf	(_Ctr_SignalBck),w
  5914  03EA  1D03               	skipz
  5915  03EB  2BED               	goto	u296_21
  5916  03EC  2BEE               	goto	u296_20
  5917  03ED                     u296_21:
  5918  03ED  2C03               	goto	i1l19167
  5919  03EE                     u296_20:
  5920                           	
  5921  03EE                     i1l19159:	
  5922  03EE  083C               	movf	(_Motor_RunSta),w
  5923  03EF  3A04               	xorlw	04h&0ffh
  5924  03F0  1903               	skipnz
  5925  03F1  2BF3               	goto	u297_21
  5926  03F2  2BF4               	goto	u297_20
  5927  03F3                     u297_21:
  5928  03F3  2BF9               	goto	i1l12013
  5929  03F4                     u297_20:
  5930                           	
  5931  03F4                     i1l19161:	
  5932  03F4  08BC               	movf	(_Motor_RunSta),f
  5933  03F5  1D03               	skipz
  5934  03F6  2BF8               	goto	u298_21
  5935  03F7  2BF9               	goto	u298_20
  5936  03F8                     u298_21:
  5937  03F8  2C03               	goto	i1l19167
  5938  03F9                     u298_20:
  5939                           	
  5940  03F9                     i1l12013:	
  5941  03F9  1D0C               	btfss	(98/8),(98)&7
  5942  03FA  2BFC               	goto	u299_21
  5943  03FB  2BFD               	goto	u299_20
  5944  03FC                     u299_21:
  5945  03FC  2C03               	goto	i1l19167
  5946  03FD                     u299_20:
  5947                           	line	99
  5948                           	
  5949  03FD                     i1l19163:	
  5950                           ;signal.c: 98: {
  5951                           ;signal.c: 99: numOf120ms = 0;
  5952  03FD  01B6               	clrf	(_numOf120ms)
  5953  03FE  01B7               	clrf	(_numOf120ms+1)
  5954                           	line	100
  5955                           	
  5956  03FF                     i1l19165:	
  5957                           ;signal.c: 100: isLowPower = 1;
  5958  03FF  01C2               	clrf	(_isLowPower)
  5959  0400  1403               	bsf	status,0
  5960  0401  0DC2               	rlf	(_isLowPower),f
  5961  0402  2C03               	goto	i1l19167
  5962                           	line	101
  5963                           	
  5964  0403                     i1l12011:	
  5965                           	line	102
  5966                           	
  5967  0403                     i1l19167:	
  5968                           ;signal.c: 101: }
  5969                           ;signal.c: 102: average = 0;
  5970  0403  3000               	movlw	0
  5971  0404  00A7               	movwf	(_average+3)
  5972  0405  3000               	movlw	0
  5973  0406  00A6               	movwf	(_average+2)
  5974  0407  3000               	movlw	0
  5975  0408  00A5               	movwf	(_average+1)
  5976  0409  3000               	movlw	0
  5977  040A  00A4               	movwf	(_average)
  5978                           
  5979                           	line	103
  5980                           	
  5981  040B                     i1l19169:	
  5982                           ;signal.c: 103: period = 0;
  5983  040B  01A8               	clrf	(Contrl_Signal@period)
  5984  040C  01A9               	clrf	(Contrl_Signal@period+1)
  5985                           	line	104
  5986                           	
  5987  040D                     i1l19171:	
  5988                           ;signal.c: 104: signal_cnt = 0;
  5989  040D  01AA               	clrf	(Contrl_Signal@signal_cnt)
  5990  040E  01AB               	clrf	(Contrl_Signal@signal_cnt+1)
  5991  040F  2C10               	goto	i1l12014
  5992                           	line	105
  5993                           	
  5994  0410                     i1l12005:	
  5995                           	line	107
  5996                           	
  5997  0410                     i1l12014:	
  5998  0410  0008               	return
  5999                           	opt stack 0
  6000                           GLOBAL	__end_of_Contrl_Signal
  6001  0411                     	__end_of_Contrl_Signal:
  6002 ;; =============== function _Contrl_Signal ends ============
  6003                           
  6004                           	signat	_Contrl_Signal,88
  6005                           	global	_Get_ADCValue
  6006                           psect	text984,local,class=CODE,delta=2
  6007                           global __ptext984
  6008  0481                     __ptext984:
  6009                           
  6010 ;; *************** function _Get_ADCValue *****************
  6011 ;; Defined at:
  6012 ;;		line 38 in file "adc.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  channel         1    wreg     enum E2397
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;  channel         1    6[COMMON] enum E2397
  6017 ;;  tem             2    7[COMMON] unsigned int 
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  2    0[COMMON] unsigned int 
  6020 ;; Registers used:
  6021 ;;		wreg, status,2, status,0, btemp+1
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMMON   BANK0   BANK1
  6027 ;;      Params:         2       0       0
  6028 ;;      Locals:         3       0       0
  6029 ;;      Temps:          4       0       0
  6030 ;;      Totals:         9       0       0
  6031 ;;Total ram usage:        9 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; This function calls:
  6034 ;;		Nothing
  6035 ;; This function is called by:
  6036 ;;		_Contrl_Signal
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           psect	text984
  6040                           	file	"adc.c"
  6041                           	line	38
  6042                           	global	__size_of_Get_ADCValue
  6043  0031                     	__size_of_Get_ADCValue	equ	__end_of_Get_ADCValue-_Get_ADCValue
  6044                           	
  6045  0481                     _Get_ADCValue:	
  6046                           	opt	stack 7
  6047                           ; Regs used in _Get_ADCValue: [wreg+status,2+status,0+btemp+1]
  6048                           ;Get_ADCValue@channel stored from wreg
  6049  0481  00F6               	movwf	(Get_ADCValue@channel)
  6050                           	line	39
  6051                           	
  6052  0482                     i1l19227:	
  6053                           ;adc.c: 39: uint16_t tem = 0;
  6054  0482  01F7               	clrf	(Get_ADCValue@tem)
  6055  0483  01F8               	clrf	(Get_ADCValue@tem+1)
  6056                           	line	40
  6057                           	
  6058  0484                     i1l19229:	
  6059                           ;adc.c: 40: ADCON0 &= ~(0x1f << 2);
  6060  0484  3083               	movlw	(083h)
  6061  0485  00F2               	movwf	(??_Get_ADCValue+0)+0
  6062  0486  0872               	movf	(??_Get_ADCValue+0)+0,w
  6063  0487  0021               	movlb 1	; select bank1
  6064  0488  059D               	andwf	(157)^080h,f	;volatile
  6065                           	line	41
  6066                           	
  6067  0489                     i1l19231:	
  6068                           ;adc.c: 41: ADCON0 |= (channel << 2);
  6069  0489  0876               	movf	(Get_ADCValue@channel),w
  6070  048A  00F2               	movwf	(??_Get_ADCValue+0)+0
  6071  048B  3001               	movlw	(02h)-1
  6072  048C                     u308_25:
  6073  048C  35F2               	lslf	(??_Get_ADCValue+0)+0,f
  6074  048D  3EFF               	addlw	-1
  6075  048E  1D03               	skipz
  6076  048F  2C8C               	goto	u308_25
  6077  0490  3572               	lslf	(??_Get_ADCValue+0)+0,w
  6078  0491  00F3               	movwf	(??_Get_ADCValue+1)+0
  6079  0492  0873               	movf	(??_Get_ADCValue+1)+0,w
  6080  0493  049D               	iorwf	(157)^080h,f	;volatile
  6081                           	line	42
  6082                           	
  6083  0494                     i1l19233:	
  6084                           ;adc.c: 42: ADCON0 |= 0x01 << 1;
  6085  0494  149D               	bsf	(157)^080h+(1/8),(1)&7	;volatile
  6086                           	line	44
  6087                           ;adc.c: 44: while(ADCON0 & 0x02 );
  6088  0495  2C96               	goto	i1l13319
  6089                           	
  6090  0496                     i1l13320:	
  6091                           	
  6092  0496                     i1l13319:	
  6093  0496  189D               	btfsc	(157)^080h,(1)&7
  6094  0497  2C99               	goto	u309_21
  6095  0498  2C9A               	goto	u309_20
  6096  0499                     u309_21:
  6097  0499  2C96               	goto	i1l13319
  6098  049A                     u309_20:
  6099  049A  2C9B               	goto	i1l19235
  6100                           	
  6101  049B                     i1l13321:	
  6102                           	line	46
  6103                           	
  6104  049B                     i1l19235:	
  6105                           ;adc.c: 46: tem = (ADRESH << 8) | ADRESL;
  6106  049B  081B               	movf	(155)^080h,w	;volatile
  6107  049C  00F2               	movwf	(??_Get_ADCValue+0)+0
  6108  049D  01F3               	clrf	(??_Get_ADCValue+0)+0+1
  6109  049E  081C               	movf	(156)^080h,w	;volatile
  6110  049F  00F4               	movwf	(??_Get_ADCValue+2)+0
  6111  04A0  01F5               	clrf	(??_Get_ADCValue+2)+0+1
  6112  04A1  0874               	movf	(??_Get_ADCValue+2)+0,w
  6113  04A2  00F5               	movwf	(??_Get_ADCValue+2)+1
  6114  04A3  01F4               	clrf	(??_Get_ADCValue+2)+0
  6115  04A4  0872               	movf	0+(??_Get_ADCValue+0)+0,w
  6116  04A5  0474               	iorwf	0+(??_Get_ADCValue+2)+0,w
  6117  04A6  00F7               	movwf	(Get_ADCValue@tem)
  6118  04A7  0873               	movf	1+(??_Get_ADCValue+0)+0,w
  6119  04A8  0475               	iorwf	1+(??_Get_ADCValue+2)+0,w
  6120  04A9  00F8               	movwf	1+(Get_ADCValue@tem)
  6121                           	line	47
  6122                           	
  6123  04AA                     i1l19237:	
  6124                           ;adc.c: 47: return tem;
  6125  04AA  0878               	movf	(Get_ADCValue@tem+1),w
  6126  04AB  01F1               	clrf	(?_Get_ADCValue+1)
  6127  04AC  07F1               	addwf	(?_Get_ADCValue+1)
  6128  04AD  0877               	movf	(Get_ADCValue@tem),w
  6129  04AE  01F0               	clrf	(?_Get_ADCValue)
  6130  04AF  07F0               	addwf	(?_Get_ADCValue)
  6131                           
  6132  04B0  2CB1               	goto	i1l13322
  6133                           	
  6134  04B1                     i1l19239:	
  6135                           	line	48
  6136                           	
  6137  04B1                     i1l13322:	
  6138  04B1  0008               	return
  6139                           	opt stack 0
  6140                           GLOBAL	__end_of_Get_ADCValue
  6141  04B2                     	__end_of_Get_ADCValue:
  6142 ;; =============== function _Get_ADCValue ends ============
  6143                           
  6144                           	signat	_Get_ADCValue,4218
  6145                           	global	_Delay_Scan
  6146                           psect	text985,local,class=CODE,delta=2
  6147                           global __ptext985
  6148  06BA                     __ptext985:
  6149                           
  6150 ;; *************** function _Delay_Scan *****************
  6151 ;; Defined at:
  6152 ;;		line 12 in file "delay.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;		None
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;		None
  6157 ;; Return value:  Size  Location     Type
  6158 ;;		None               void
  6159 ;; Registers used:
  6160 ;;		wreg
  6161 ;; Tracked objects:
  6162 ;;		On entry : 0/0
  6163 ;;		On exit  : 0/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMMON   BANK0   BANK1
  6166 ;;      Params:         0       0       0
  6167 ;;      Locals:         0       0       0
  6168 ;;      Temps:          0       0       0
  6169 ;;      Totals:         0       0       0
  6170 ;;Total ram usage:        0 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; This function calls:
  6173 ;;		Nothing
  6174 ;; This function is called by:
  6175 ;;		_InterruptTimer0
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           psect	text985
  6179                           	file	"delay.c"
  6180                           	line	12
  6181                           	global	__size_of_Delay_Scan
  6182  000D                     	__size_of_Delay_Scan	equ	__end_of_Delay_Scan-_Delay_Scan
  6183                           	
  6184  06BA                     _Delay_Scan:	
  6185                           	opt	stack 8
  6186                           ; Regs used in _Delay_Scan: [wreg]
  6187                           	line	13
  6188                           	
  6189  06BA                     i1l19181:	
  6190                           ;delay.c: 13: if(delay_time > 0)
  6191  06BA  0020               	movlb 0	; select bank0
  6192  06BB  0831               	movf	(_delay_time+1),w
  6193  06BC  0430               	iorwf	(_delay_time),w
  6194  06BD  1903               	skipnz
  6195  06BE  2EC0               	goto	u303_21
  6196  06BF  2EC1               	goto	u303_20
  6197  06C0                     u303_21:
  6198  06C0  2EC6               	goto	i1l10681
  6199  06C1                     u303_20:
  6200                           	line	15
  6201                           	
  6202  06C1                     i1l19183:	
  6203                           ;delay.c: 14: {
  6204                           ;delay.c: 15: delay_time--;
  6205  06C1  3001               	movlw	low(01h)
  6206  06C2  02B0               	subwf	(_delay_time),f
  6207  06C3  3000               	movlw	high(01h)
  6208  06C4  3BB1               	subwfb	(_delay_time+1),f
  6209  06C5  2EC6               	goto	i1l10681
  6210                           	line	16
  6211                           	
  6212  06C6                     i1l10680:	
  6213                           	line	17
  6214                           	
  6215  06C6                     i1l10681:	
  6216  06C6  0008               	return
  6217                           	opt stack 0
  6218                           GLOBAL	__end_of_Delay_Scan
  6219  06C7                     	__end_of_Delay_Scan:
  6220 ;; =============== function _Delay_Scan ends ============
  6221                           
  6222                           	signat	_Delay_Scan,88
  6223                           	global	_Motor_RunTimeCount
  6224                           psect	text986,local,class=CODE,delta=2
  6225                           global __ptext986
  6226  054A                     __ptext986:
  6227                           
  6228 ;; *************** function _Motor_RunTimeCount *****************
  6229 ;; Defined at:
  6230 ;;		line 106 in file "motor.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;		None
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;		None
  6235 ;; Return value:  Size  Location     Type
  6236 ;;		None               void
  6237 ;; Registers used:
  6238 ;;		wreg
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMMON   BANK0   BANK1
  6244 ;;      Params:         0       0       0
  6245 ;;      Locals:         0       0       0
  6246 ;;      Temps:          0       0       0
  6247 ;;      Totals:         0       0       0
  6248 ;;Total ram usage:        0 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; This function calls:
  6251 ;;		Nothing
  6252 ;; This function is called by:
  6253 ;;		_InterruptTimer0
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           psect	text986
  6257                           	file	"motor.c"
  6258                           	line	106
  6259                           	global	__size_of_Motor_RunTimeCount
  6260  001A                     	__size_of_Motor_RunTimeCount	equ	__end_of_Motor_RunTimeCount-_Motor_RunTimeCount
  6261                           	
  6262  054A                     _Motor_RunTimeCount:	
  6263                           	opt	stack 8
  6264                           ; Regs used in _Motor_RunTimeCount: [wreg]
  6265                           	line	108
  6266                           	
  6267  054A                     i1l19173:	
  6268                           ;motor.c: 108: if((Motor_RunSta == Motor_AutoClosing) ||(Motor_RunSta == Motor_ManualClo
                                 sing)||(Motor_RunSta == Motor_Opening) )
  6269  054A  0020               	movlb 0	; select bank0
  6270  054B  083C               	movf	(_Motor_RunSta),w
  6271  054C  3A01               	xorlw	01h&0ffh
  6272  054D  1903               	skipnz
  6273  054E  2D50               	goto	u300_21
  6274  054F  2D51               	goto	u300_20
  6275  0550                     u300_21:
  6276  0550  2D5E               	goto	i1l19179
  6277  0551                     u300_20:
  6278                           	
  6279  0551                     i1l19175:	
  6280  0551  083C               	movf	(_Motor_RunSta),w
  6281  0552  3A02               	xorlw	02h&0ffh
  6282  0553  1903               	skipnz
  6283  0554  2D56               	goto	u301_21
  6284  0555  2D57               	goto	u301_20
  6285  0556                     u301_21:
  6286  0556  2D5E               	goto	i1l19179
  6287  0557                     u301_20:
  6288                           	
  6289  0557                     i1l19177:	
  6290  0557  083C               	movf	(_Motor_RunSta),w
  6291  0558  3A03               	xorlw	03h&0ffh
  6292  0559  1D03               	skipz
  6293  055A  2D5C               	goto	u302_21
  6294  055B  2D5D               	goto	u302_20
  6295  055C                     u302_21:
  6296  055C  2D63               	goto	i1l6715
  6297  055D                     u302_20:
  6298  055D  2D5E               	goto	i1l19179
  6299                           	
  6300  055E                     i1l6714:	
  6301                           	line	110
  6302                           	
  6303  055E                     i1l19179:	
  6304                           ;motor.c: 109: {
  6305                           ;motor.c: 110: Motor_RunTime++;
  6306  055E  3001               	movlw	low(01h)
  6307  055F  07AC               	addwf	(_Motor_RunTime),f
  6308  0560  3000               	movlw	high(01h)
  6309  0561  3DAD               	addwfc	(_Motor_RunTime+1),f
  6310  0562  2D63               	goto	i1l6715
  6311                           	line	111
  6312                           	
  6313  0563                     i1l6712:	
  6314                           	line	112
  6315                           	
  6316  0563                     i1l6715:	
  6317  0563  0008               	return
  6318                           	opt stack 0
  6319                           GLOBAL	__end_of_Motor_RunTimeCount
  6320  0564                     	__end_of_Motor_RunTimeCount:
  6321 ;; =============== function _Motor_RunTimeCount ends ============
  6322                           
  6323                           	signat	_Motor_RunTimeCount,88
  6324                           	global	_KeyScan
  6325                           psect	text987,local,class=CODE,delta=2
  6326                           global __ptext987
  6327  0564                     __ptext987:
  6328                           
  6329 ;; *************** function _KeyScan *****************
  6330 ;; Defined at:
  6331 ;;		line 36 in file "keyboard.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;		None
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;		None
  6336 ;; Return value:  Size  Location     Type
  6337 ;;		None               void
  6338 ;; Registers used:
  6339 ;;		wreg, status,2, status,0
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1
  6345 ;;      Params:         0       0       0
  6346 ;;      Locals:         0       0       0
  6347 ;;      Temps:          0       0       0
  6348 ;;      Totals:         0       0       0
  6349 ;;Total ram usage:        0 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; This function calls:
  6352 ;;		Nothing
  6353 ;; This function is called by:
  6354 ;;		_InterruptTimer0
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           psect	text987
  6358                           	file	"keyboard.c"
  6359                           	line	36
  6360                           	global	__size_of_KeyScan
  6361  0018                     	__size_of_KeyScan	equ	__end_of_KeyScan-_KeyScan
  6362                           	
  6363  0564                     _KeyScan:	
  6364                           	opt	stack 8
  6365                           ; Regs used in _KeyScan: [wreg+status,2+status,0]
  6366                           	line	39
  6367                           	
  6368  0564                     i1l19119:	
  6369                           ;keyboard.c: 37: static unsigned char KeyBuf = 0xff;
  6370                           ;keyboard.c: 39: KeyBuf = (KeyBuf << 1) | RA5;
  6371  0564  1003               	clrc
  6372  0565  0020               	movlb 0	; select bank0
  6373  0566  1A8C               	btfsc	(101/8),(101)&7
  6374  0567  1403               	setc
  6375  0568  0DD8               	rlf	(KeyScan@KeyBuf),f
  6376                           	line	41
  6377                           	
  6378  0569                     i1l19121:	
  6379                           ;keyboard.c: 41: if(KeyBuf == 0xff)
  6380  0569  0858               	movf	(KeyScan@KeyBuf),w
  6381  056A  3AFF               	xorlw	0FFh&0ffh
  6382  056B  1D03               	skipz
  6383  056C  2D6E               	goto	u288_21
  6384  056D  2D6F               	goto	u288_20
  6385  056E                     u288_21:
  6386  056E  2D73               	goto	i1l19125
  6387  056F                     u288_20:
  6388                           	line	43
  6389                           	
  6390  056F                     i1l19123:	
  6391                           ;keyboard.c: 42: {
  6392                           ;keyboard.c: 43: KeySta = 0x01;
  6393  056F  01D9               	clrf	(_KeySta)
  6394  0570  1403               	bsf	status,0
  6395  0571  0DD9               	rlf	(_KeySta),f
  6396                           	line	44
  6397                           ;keyboard.c: 44: }
  6398  0572  2D7B               	goto	i1l8036
  6399                           	line	45
  6400                           	
  6401  0573                     i1l8033:	
  6402                           	
  6403  0573                     i1l19125:	
  6404                           ;keyboard.c: 45: else if(KeyBuf == 0x00)
  6405  0573  08D8               	movf	(KeyScan@KeyBuf),f
  6406  0574  1D03               	skipz
  6407  0575  2D77               	goto	u289_21
  6408  0576  2D78               	goto	u289_20
  6409  0577                     u289_21:
  6410  0577  2D7B               	goto	i1l8036
  6411  0578                     u289_20:
  6412                           	line	47
  6413                           	
  6414  0578                     i1l19127:	
  6415                           ;keyboard.c: 46: {
  6416                           ;keyboard.c: 47: KeySta = 0x00;
  6417  0578  01D9               	clrf	(_KeySta)
  6418  0579  2D7B               	goto	i1l8036
  6419                           	line	48
  6420                           	
  6421  057A                     i1l8035:	
  6422  057A  2D7B               	goto	i1l8036
  6423                           	line	50
  6424                           	
  6425  057B                     i1l8034:	
  6426                           	
  6427  057B                     i1l8036:	
  6428  057B  0008               	return
  6429                           	opt stack 0
  6430                           GLOBAL	__end_of_KeyScan
  6431  057C                     	__end_of_KeyScan:
  6432 ;; =============== function _KeyScan ends ============
  6433                           
  6434                           	signat	_KeyScan,88
  6435                           psect	text988,local,class=CODE,delta=2
  6436                           global __ptext988
  6437  0000                     __ptext988:
  6438                           	global	btemp
  6439  007E                     	btemp set 07Eh
  6440                           
  6441                           	DABS	1,126,2	;btemp
  6442                           	global	wtemp0
  6443  007E                     	wtemp0 set btemp


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Fri Jul 24 14:20:13 2020

        __end_of_ADC_AllPin_Init 06DE                ??_InterruptTimer0 007C                               _RD 0CA8  
        ?_Motor_Counterclockwise 0070                               _WR 0CA9          __size_of_Motor_GetStaus 000B  
             _Motor_RunTimeCount 054A                              _GIE 005F                              _RA2 0062  
                            _RA4 0064                              _RC1 0071                              _RA5 0065  
                            _RC2 0072                              _RC5 0075              internal_E2Read@addr 0049  
                            wreg 0009              ?_Motor_RunTimeCount 0070         __size_of_Motor_Clockwise 000D  
        __size_of_Motor_LowPower 0010                             l1351 004E                             l1360 00AC  
                           l1352 0069                             l1361 00AB                             l1353 0084  
                           l1362 0116                             l1370 00F0                             l1354 007E  
                           l1363 0115                             l1371 0109                             l1372 00FD  
                           l1364 00CE                             l1356 007C                             l1373 0104  
                           l1365 00D0                             l1357 0083                             l1374 0108  
                           l1366 00D0                             l1358 0088                             l4007 0708  
                           l1375 0117                             l1367 00DB                             l1359 0093  
                           l1376 0118                             l1368 00E3                             l1377 0118  
                           l1369 00E2                             l5350 0285                             l2687 0705  
                           l5360 027F                             l5352 01F7                             l5361 027F  
                           l5353 0251                             l5362 026A                             l5354 0222  
                           l5370 0141                             l5363 027E                             l5355 0250  
                           l5371 0159                             l8020 06D2                             l5364 027D  
                           l5356 024F                             l5380 01D4                             l5372 0158  
                           l5357 0239                             l5365 0285                             l5373 01E3  
                           l5381 01D3                             l5358 024E                             l5382 01D5  
                           l5374 015A                             l5359 024D                             l5375 0183  
                           l5383 01E3                             l8040 05D3                             l5368 01D7  
                           l5376 019B                             l8041 05D2                             l8025 0549  
                           l5377 019A                             l5369 0121                             l8042 05D3  
                           l8026 053E                             l5378 019C                             l5386 06EF  
                           l8027 0543                             l5379 01BC                             l8028 0549  
                           l6702 05BE                             l8039 05CA                             l6705 0674  
                           l6708 06E6                             l6709 06E8                             l6693 04DF  
                           l6696 06B9                             l9352 069F                             l9361 06FF  
                           l9346 0664                             l9370 0707                             l9355 052C  
                           l6699 06AC                             l9364 06FA                             l9349 05E8  
                           l9373 0653                             l9365 06FA                             l9366 06FB  
                           l9367 06FB                             _CFGS 0CAE                             STR_1 033F  
                           STR_2 035D                             STR_3 0379                             STR_4 038B  
                           STR_5 034E                             STR_6 0301                             STR_7 036B  
                           STR_8 0318                             STR_9 0382                             u3100 0585  
                           u3101 0584                             u3110 0591                             u3111 0590  
                           u3200 04F8                             u3201 04F7                             u3050 06E3  
                           u3210 0534                             u3051 06E2                             u3211 0533  
                           u3060 05C6                             u3140 0456                             u3220 0539  
                           u3300 022D                             u3061 05C5                             u3141 0455  
                           u3221 0538                             u3301 022C                             u3070 05D0  
                           u3150 0469                             u3310 0240                             u3230 01EB  
                           u3071 05CF                             u3151 0468                             u3311 023F  
                           u3231 01EA                             u3160 047F                             u3320 0257  
                           u3240 01F1                             u3400 018D                             u3161 047E  
                           u3321 0256                             u3241 01F0                             u3401 018C  
                           u3170 041F                             u3330 025D                             u3250 01F6  
                           u3410 01A2                             u3171 041E                             u3331 025C  
                           u3251 01F5                             u3411 01A1                             u3180 0440  
                           u3340 0270                             u3260 0200                             u3420 01AB  
                           u3500 00A7                             u3181 043F                             u3341 026F  
                           u3261 01FF                             u3421 01AA                             u3501 00A6  
                           u3190 044B                             u3270 0218                             u3430 01C6  
                           u3350 0127                             u3510 00B3                             u3191 044A  
                           u3271 0217                             u3431 01C5                             u3351 0126  
                           u3511 00B2                             _PIE1 0091                             u3280 021E  
                           u3360 0130                             u3520 00C9                             u3440 004C  
                           u3281 021D                             u3361 012F                             u3521 00C8  
                           u3441 004B                             u3290 0228                             u3370 014B  
                           u3530 00D5                             u3450 0068                             u3291 0227  
                           u3371 014A                             u3531 00D4                             u3451 0067  
                           u3380 0161                             u3540 00DF                             u3460 0070  
                           u3381 0160                             u3541 00DE                             u3461 006F  
                           u3445 0048                             u3390 016A                             u3550 00E9  
                           u3470 0076                             u3391 0169                             u3551 00E8  
                           u3471 0075                             u3455 0064                             u3560 00EE  
                           u3480 007C                             u3561 00ED                             u3481 007B  
                           u3570 00F5                             u3490 0099                             u3571 00F4  
                           u3491 0098                             u3580 00FB                             u3581 00FA  
                           u2870 0630                             u3590 0101                             u2871 062F  
                           u3591 0100                             _TMR0 0015                             _WREN 0CAA  
                           _WPUA 020C                             _WPUC 020E                             _main 001A  
                           fsr0h 0005                             fsr1h 0007                             fsr0l 0004  
                           indf0 0000                             indf1 0001                             fsr1l 0006  
                           btemp 007E                       _Delay_Scan 06BA                 __end_of_ADC_Init 05FD  
          ??_internal_E2promInit 004B                             start 0018                       _e2SavePara 05FD  
           ??_Motor_RunTimeCount 0070                  __end_of_KeyInit 06D3                  __end_of_KeyScan 057C  
 __end_of_Motor_Counterclockwise 06BA       __size_of_PowerSwitch_Delay 0017                      ?_ISR_Manger 0070  
                          l13313 06DD                            l10674 062A                            l10675 0629  
                          l10676 0631                            l13316 05FC                            l10677 0631  
                          l14630 0592                            l14625 0642                            l14633 0620  
                          l14628 0587                            l14636 0692                            l14629 0592  
                          l19101 06F8                            l19103 0665                            l19105 066A  
                          l19201 06AD                            l19051 050B                            l19107 066E  
                          l19203 06B2                            l19211 06A5                            l19053 050D  
                          l19061 065C                            l19205 06B6                            l19213 06A6  
                          l19221 05CA                            l19301 0429                            l15950 050A  
                          l19047 05D4                            l19055 052B                            l19071 0652  
                          l19063 0643                            l19207 06B7                            l19215 06AA  
                          l19223 05D0                            l19311 043A                            l19303 042F  
                          l15951 050A                            l15960 0465                            l19049 05D6  
                          l19057 0654                            l19065 0645                            l19073 0703  
                          l19081 0632                            l19209 06A0                            l19217 05C1  
                          l19241 06D3                            l15961 046A                            l19305 0434  
                          l19313 0442                            l19321 05F4                            l19401 01EB  
                          l15962 0480                            l15954 0477                            l15970 0420  
                          l19059 0656                            l19067 064B                            l19075 06C7  
                          l19083 04B2                            l19091 0621                            l19219 05C6  
                          l19243 06D7                            l19251 0587                            l15963 0480  
                          l15955 0450                            l15971 043C                            l19307 0436  
                          l19323 05F5                            l19315 05E9                            l19331 04E4  
                          l19411 0212                            l19403 01F1                            l15956 0451  
                          l15972 043C                            l19069 064E                            l19077 06CB  
                          l19085 04D4                            l19093 062A                            l19253 058B  
                          l19245 057C                            l15957 0451                            l15973 0440  
                          l19309 0438                            l19325 05FB                            l19317 05EC  
                          l19333 04F1                            l19341 052D                            l19421 022D  
                          l19413 0218                            l19405 01F7                            l19501 01AF  
                          l15958 0457                            l15974 044B                            l15966 0442  
                          l19079 06D0                            l19087 04D6                            l19095 06FC  
                          l19191 06DE                            l19247 057F                            l15959 0465  
                          l15975 044C                            l15967 0419                            l19319 05EE  
                          l19335 04F8                            l19327 04E0                            l19343 0534  
                          l19351 0693                            l19431 0244                            l19423 0231  
                          l19415 021E                            l19407 0200                            l19511 01CA  
                          l19503 01B4                            l15968 041A                            l19089 04DD  
                          l19097 0706                            l19193 06E3                            l19249 0586  
                          l19281 0460                            l15969 041A                            l19337 04F9  
                          l19329 04E2                            l19345 0539                            l19361 069E  
                          l19353 0699                            l19441 0261                            l19433 0249  
                          l19425 0235                            l19417 0222                            l19409 020B  
                          l19513 01CF                            l19505 01B7                            l19521 06EC  
                          l19601 00E3                            l15978 060F                            l19099 06F6  
                          l19195 06E5                            l19283 0462                            l19291 0477  
                          l19339 04FD                            l19347 053E                            l19355 069A  
                          l19371 061E                            l19363 0610                            l19451 0279  
                          l19443 0266                            l19427 0239                            l19419 0228  
                          l19435 0251                            l19515 01D6                            l19507 01BC  
                          l19611 00FC                            l19603 00E9                            l19531 002E  
                          l19523 001A                            l19197 06E6                            l19285 0463  
                          l19277 044F                            l19293 0413                            l19349 0543  
                          l19357 069B                            l19365 0612                            l19373 05FF  
                          l19381 068A                            l19445 026A                            l19437 0257  
                          l19429 0240                            l19509 01C6                            l19461 0134  
                          l19517 01D7                            l19453 0119                            l19621 0111  
                          l19613 0101                            l19605 00EF                            l19541 003C  
                          l19533 0031                            l19525 001C                            l19199 06E8  
                          l19287 046A                            l19279 0457                            l19295 0414  
                          l19359 069D                            l19367 0615                            l19375 0603  
                          l19383 068F                            l19391 05AF                            l19447 0270  
                          l19439 025D                            l19471 014F                            l19463 0139  
                          l19455 0121                            l19519 06E9                            l19615 010A  
                          l19607 00F0                            l19551 0056                            l19543 003D  
                          l19535 0034                            l19527 0028                            l19289 0472  
                          l19297 0420                            l19369 061A                            l19385 0690  
                          l19377 0685                            l19393 05B2                            l19449 0274  
                          l19481 0176                            l19473 0154                            l19465 013C  
                          l19457 0127                            l19617 010C                            l19609 00F5  
                          l19561 007E                            l19553 005B                            l19545 003F  
                          l19537 0037                            l19529 002B                            l19299 0424  
                          l19379 0687                            l19395 05B4                            l19387 05A9  
                          l19491 0191                            l19483 017B                            l19475 015A  
                          l19459 0130                            l19467 0141                            l19619 010F  
                          l19571 0090                            l19563 0084                            l19547 004D  
                          l19555 0069                            l19539 003A                            l19397 05BB  
                          l19389 05AE                            l19493 0196                            l19485 017E  
                          l19477 0161                            l19469 014B                            l19581 00A2  
                          l19573 0093                            l19565 0088                            l19557 0070  
                          l19549 004E                            l19399 01E4                            l19495 019C  
                          l19479 016A                            l19487 0183                            l19591 00BF  
                          l19583 00A7                            l19575 0099                            l19567 008B  
                          l19559 0076                            l19497 01A2                            l19489 018D  
                          l19593 00C2                            l19577 009C                            l19585 00AC  
                          l19569 008E                            l19499 01AB                            l19595 00C9  
                          l19587 00B3                            l19579 009F                            l19597 00D5  
                          l19589 00BC                            l19599 00DF                            ?_main 004F  
                          _EEADR 0191                            STR_10 032E                            _CARRY 0018  
                          _EEPGD 0CAF                            _RCSTA 019D                            _PORTA 000C  
                          _PORTC 000E                            _TRISA 008C                            _TRISC 008E  
                          _TXREG 019A                            _TXSTA 019E          __size_of_WatchDog_Reset 0006  
            internal_E2Write@dat 0046              internal_E2Write@len 0047              internal_E2Write@reg 0049  
          _PowerSwitch_EnableCnt 003D                  ??_Contrl_Signal 0079                       _Ctr_Signal 003A  
                          main@i 0054                            status 0003                            wtemp0 007E  
               __end_of_Delay_MS 0632                Motor_LowPower@tem 0047                 ?_ADC_AllPin_Init 0070  
               __end_of_MainLoop 06F0                     __end_of_main 0119                    KeyScan@KeyBuf 0058  
    __size_of_PowerSwitch_Enable 0011                           ??_main 0053     __size_of_ContrlSignal_Driver 00A2  
               _AutoOrManualMode 0039                           _ADCON0 009D               __size_of_KeyAction 0015  
                         _ADCON1 009E                           _ADRESH 009C                           _ADRESL 009B  
                         _EEADRL 0191                           _EEDATA 0193                           _EEDATL 0193  
                         _EECON1 0195                           _EECON2 0196            __size_of_Get_ADCValue 0031  
                         _APFCON 011D            __end_of_WatchDog_Init 0700                           _ANSELA 018C  
                         _ANSELC 018E               __size_of_KeyDriver 001D                           i1l2692 0684  
                         i1l2695 0014                           u300_20 0551                           i1l2696 0014  
                         u300_21 0550                           u301_20 0557                           i1l8033 0573  
                         u301_21 0556                           i1l8034 057B                           i1l8035 057A  
                         i1l8036 057B                           i1l6712 0563                           u302_20 055D  
                         u302_21 055C                           i1l6714 055E                           i1l6715 0563  
                         u303_20 06C1                           u303_21 06C0                           u304_20 000C  
                         u304_21 000B                           _INTCON 000B                           u308_25 048C  
                         u309_20 049A                           u309_21 0499              _PIC_EnableInterrupt 0703  
                         u290_20 039D                           u290_21 039C                           u291_20 03AA  
                         u291_21 03A9                           u292_20 03C4                           u292_21 03C3  
                         u293_20 03D3                           u293_21 03D2                           u294_20 03DC  
                         u294_21 03DB                           u295_20 03E8                           u295_21 03E7  
                         u288_20 056F                           u296_20 03EE                           u288_21 056E  
                         u296_21 03ED                           u289_20 0578                           u297_20 03F4  
                         u289_21 0577                           u297_21 03F3                           u298_20 03F9  
                         _OSCCON 0099                           u298_21 03F8                           u299_20 03FD  
                         u299_21 03FC              __size_of_ISR_Manger 0014                           _SPBRGH 019C  
                         _SPBRGL 019B                           _WDTCON 0097                           _SPLLEN 04CF  
              ??_Motor_Clockwise 0046                      ?_Delay_Scan 0070                        ??_KeyInit 0046  
                      ??_KeyScan 0070                           _KeySta 0059             internal_E2Write@addr 004A  
                    ?_e2SavePara 0070      __end_of_PIC_ConfigOptionReg 052D                       _Motor_Init 04B2  
                     _Motor_Stop 05A9             ?_PIC_EnableInterrupt 0070                   _Motor_GetStaus 06DE  
                _PowerSwitch_Cnt 002E                           clrloop 06F1                     _Get_ADCValue 0481  
                      ?_ADC_Init 0070                   _Motor_LowPower 0665        __size_of_PIC_CofnigTimer0 0011  
   __end_of_PIC_ConfigClock32Khz 06A0                 ??_PIC_ConfigGPIO 0046              Contrl_Signal@ctrBuf 0038  
      __size_of_PowerSwitch_Init 0011              Contrl_Signal@period 0028                  _InterruptTimer0 0675  
                 __pcstackCOMMON 0070                     __pidataBANK0 0700                __end_of_KeyAction 05D4  
         __end_of_Motor_GetStaus 06E9            ??_PIC_EnableInterrupt 0046                __end_of_KeyDriver 054A  
         __size_of_Feed_WatchDog 0002        __size_of_internal_E2Write 003C          internal_E2promInit@addr 004D  
   __size_of_PowerSwitch_Disable 000E              __size_of_Delay_Scan 000D                   _WatchDog_Reset 06F6  
                     ??_ADC_Init 0047                       _System_Sta 003F           __end_of_Motor_LowPower 0675  
                      ?_Delay_MS 0046              __size_of_e2SavePara 0013                        ?_MainLoop 0070  
                     __pbssBANK0 0020                    e2SavePara@val 004D                       _delay_time 0030  
                     __pmaintext 001A                      ?_Motor_Init 0070                      ?_Motor_Stop 0070  
                  ?_Uart_SendStr 0070         __size_of_PIC_ConfigClock 0015                    ?_Motor_Driver 0070  
                ?_Motor_GetStaus 0070                       __pintentry 0004                     ??_ISR_Manger 007C  
          PowerSwitch_Enable@tmp 0049                          _BAUDCON 019F         __size_of_internal_E2Read 0034  
         __end_of_WatchDog_Reset 06FC                          i1l12010 03DE                          i1l12011 0403  
                        i1l12004 03A1                          i1l12005 0410                          i1l12013 03F9  
                        i1l12006 03C7                          i1l12014 0410                          i1l12007 03CD  
                        i1l12008 03D7                          i1l12009 03DF                          i1l10680 06C6  
                        i1l13320 0496                          i1l10681 06C6                          i1l13321 049B  
                        i1l13322 04B1                          i1l13319 0496                          i1l19111 0678  
                        i1l19121 0569                          i1l19113 067B                          i1l19123 056F  
                        i1l19131 0399                          i1l19115 067E                          i1l19125 0573  
                        i1l19141 03BB                          i1l19133 039D                          i1l19117 0681  
                        i1l19109 0675                          i1l19127 0578                          i1l19119 0564  
                        i1l19231 0489                          i1l19151 03D7                          i1l19143 03C4  
                        i1l19135 03AA                          i1l19233 0494                          i1l19161 03F4  
                        i1l19153 03DC                          i1l19145 03C7                          i1l19137 03AC  
                        i1l19129 0394                          i1l19235 049B                          i1l19227 0482  
                        i1l19171 040D                          i1l19163 03FD                          i1l19155 03DF  
                        i1l19147 03CD                          i1l19139 03B0                          i1l19173 054A  
                        i1l19181 06BA                          i1l19237 04AA                          i1l19229 0484  
                        i1l19165 03FF                          i1l19157 03E8                          i1l19149 03D3  
                        i1l19175 0551                          i1l19183 06C1                          i1l19239 04B1  
                        i1l19159 03EE                          i1l19167 0403                          i1l19177 0557  
                        i1l19169 040B                          i1l19185 0008                          i1l19179 055E  
                        i1l19187 000C                          i1l19189 000F                       ??_Delay_MS 0048  
                ?_Motor_LowPower 0070                    _System_StaBck 0040          __end_of_InterruptTimer0 0685  
    __end_of_internal_E2promInit 050B                       _isLowPower 0042                       ??_MainLoop 004F  
                     __stringtab 0300                    _Feed_WatchDog 0706               __end_of_ISR_Manger 0018  
                        _KeyInit 06C7                          _KeyScan 0564              _ContrlSignal_Driver 01E4  
                 ??_Uart_SendStr 0046                   ??_Motor_Driver 004E      __size_of_Motor_RunTimeCount 001A  
           _PIC_ConfigClock32Khz 0693                  ?_WatchDog_Reset 0070                          _average 0024  
           ?_ContrlSignal_Driver 0070                       _numOf120ms 0036                  _Motor_Clockwise 06A0  
               _PIC_CofnigTimer0 0643              __size_of_Motor_Init 002E              __size_of_Motor_Stop 0016  
               _PowerSwitch_Init 0632            __end_of_Contrl_Signal 0411             end_of_initialization 05A7  
                 ?_Feed_WatchDog 0070                  KeyDriver@backup 0057                     _gE2promState 0043  
                   ??_Delay_Scan 0070                     ??_e2SavePara 004B       __end_of_PowerSwitch_Enable 0621  
          ?_PIC_ConfigClock32Khz 0070             Contrl_Signal@dis_tmp 007A                ??_PIC_ConfigClock 0046  
               _internal_E2Write 0411         __size_of_ADC_AllPin_Init 000B            ??_ContrlSignal_Driver 004C  
             __end_of_Delay_Scan 06C7                ??_internal_E2Read 0048                 ?_InterruptTimer0 0070  
              __size_of_ADC_Init 0014               __end_of_e2SavePara 0610               internal_E2Read@dat 0046  
             internal_E2Read@len 0047         ??_Motor_Counterclockwise 0046                    Motor_Stop@tem 004B  
            _PowerSwitch_Disable 0685                       main@tmpbuf 0056           __size_of_WatchDog_Init 0004  
        __end_of_Motor_Clockwise 06AD     __size_of_PIC_ConfigOptionReg 0022                        _KeyAction 05BF  
             Motor_Clockwise@tem 0047                        _KeyDriver 052D             ?_PowerSwitch_Disable 0070  
            start_initialization 0593             __end_of_Uart_SendStr 0709                  ??_Feed_WatchDog 0046  
           __end_of_Motor_Driver 01E4                __size_of_Delay_MS 0011                _gPhaseVoltage_CH1 0032  
              _gPhaseVoltage_CH2 0034                __size_of_MainLoop 0007                 ??_Motor_GetStaus 0046  
    __end_of_PIC_EnableInterrupt 0706                     ??_Motor_Init 0046                     ??_Motor_Stop 004A  
         ??_PIC_ConfigClock32Khz 0046                      __pdataBANK0 0057                        _RunMode_t 003E  
               ??_Motor_LowPower 0046                       ?_KeyAction 0070            ??_PowerSwitch_Disable 0048  
                     ?_KeyDriver 0070                    _Motor_RunTime 002C                    __pcstackBANK0 0046  
              ??_ADC_AllPin_Init 0046               InterruptTimer0@cnt 0020               __end_of_Motor_Init 04E0  
         PowerSwitch_Delay@delay 0047               __end_of_Motor_Stop 05BF                    _WatchDog_Init 06FC  
                       ?_KeyInit 0070                         ?_KeyScan 0070  __size_of_Motor_Counterclockwise 000D  
        __size_of_PIC_ConfigGPIO 0011                  Get_ADCValue@tem 0077                 ??_WatchDog_Reset 0046  
       __end_of_PIC_CofnigTimer0 0654                 KeyAction@KeyCode 0046                        __ptext950 01E4  
                      __ptext951 05A9                        __ptext960 044D                        __ptext952 0685  
                      __ptext961 057C                        __ptext953 05FD                        __ptext970 0706  
                      __ptext962 06D3                        __ptext954 0610                        __ptext971 06FC  
                      __ptext963 05BF                        __ptext955 0693                        __ptext980 05D4  
                      __ptext972 0621                        __ptext964 06A0                        __ptext956 052D  
                      __ptext948 06E9                        __ptext973 04B2                        __ptext965 06AD  
                      __ptext957 04E0                        __ptext949 0119                        __ptext982 0675  
                      __ptext974 0632                        __ptext966 06DE                        __ptext958 05E9  
                      __ptext983 0394                        __ptext975 06C7                        __ptext967 0708  
                      __ptext959 0411                        __ptext984 0481                        __ptext976 0703  
                      __ptext968 0665                        __ptext985 06BA                        __ptext977 0643  
                      __ptext969 06F6                        __ptext986 054A                        __ptext978 0654  
                      __ptext987 0564                        __ptext979 050B                        __ptext988 0000  
                      _flag_uart 0041         __end_of_PowerSwitch_Init 0643                        __pstrings 0300  
               ?_Motor_Clockwise 0070              Get_ADCValue@channel 0076                         _ADC_Init 05E9  
         PowerSwitch_Disable@tmp 0049                   ?_WatchDog_Init 0070         __end_of_internal_E2Write 044D  
   __size_of_internal_E2promInit 002B       __end_of_Motor_RunTimeCount 0564                  _PIC_ConfigClock 05D4  
                _internal_E2Read 044D                      ??_KeyAction 0046            __size_of_Uart_SendStr 0001  
                  ?_Get_ADCValue 0070           _Motor_Counterclockwise 06AD            __size_of_Motor_Driver 00CB  
                    ??_KeyDriver 0047               _PowerSwitch_Enable 0610                         _Delay_MS 0621  
                       _MainLoop 06E9              ?_PowerSwitch_Enable 0070              _PIC_ConfigOptionReg 050B  
               __size_of_KeyInit 000C                 __size_of_KeyScan 0018                     _Uart_SendStr 0708  
                   _Motor_Driver 0119      __end_of_ContrlSignal_Driver 0286             ??_PowerSwitch_Enable 0048  
                   _Motor_RunSta 003C           __size_of_Contrl_Signal 007D             ?_PIC_ConfigOptionReg 0070  
                 ??_Get_ADCValue 0072                  ??_WatchDog_Init 0046          __end_of_PIC_ConfigClock 05E9  
                  __size_of_main 00FF                    _Ctr_SignalBck 003B         __size_of_InterruptTimer0 0010  
        __end_of_internal_E2Read 0481                         clear_ram 06F0                   _PIC_ConfigGPIO 0654  
                       main@argc 004F                         main@argv 0051            ??_PIC_ConfigOptionReg 0046  
              _PowerSwitch_Delay 057C                  _ADC_AllPin_Init 06D3               ?_PowerSwitch_Delay 0070  
                     Delay_MS@ms 0046              ??_PowerSwitch_Delay 0046            __end_of_Feed_WatchDog 0708  
                       intlevel1 0000                    _Contrl_Signal 0394           __end_of_PIC_ConfigGPIO 0665  
      Motor_Counterclockwise@tem 0047        __end_of_PowerSwitch_Delay 0593      __end_of_PowerSwitch_Disable 0693  
              ?_PIC_CofnigTimer0 0070    __size_of_PIC_ConfigClock32Khz 000D                ?_PowerSwitch_Init 0070  
                     _ISR_Manger 0004     __size_of_PIC_EnableInterrupt 0003               ??_PIC_CofnigTimer0 0046  
             ??_PowerSwitch_Init 0046                       _OPTION_REG 0095              _internal_E2promInit 04E0  
                Uart_SendStr@str 0070          Contrl_Signal@signal_cnt 002A                   ?_Contrl_Signal 0070  
               ?_PIC_ConfigClock 0070                  ?_PIC_ConfigGPIO 0070             __end_of_Get_ADCValue 04B2  
           ?_internal_E2promInit 0070                ?_internal_E2Write 0046                 ?_internal_E2Read 0046  
             ??_internal_E2Write 0048  
